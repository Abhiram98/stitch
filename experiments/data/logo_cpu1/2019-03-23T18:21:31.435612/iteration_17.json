{
    "verbose": true,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 1,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.7505186305366109,
        "productions": [
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA))",
                "logProbability": -1.840665253638229
            },
            {
                "expression": "#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA)",
                "logProbability": -1.733486278988611
            },
            {
                "expression": "#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))",
                "logProbability": -1.794478713635975
            },
            {
                "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0)))",
                "logProbability": -1.827878367047775
            },
            {
                "expression": "#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))",
                "logProbability": -1.9235898751224183
            },
            {
                "expression": "#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0)))))",
                "logProbability": -1.8764718529748086
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0))))))))",
                "logProbability": -1.8937353147294664
            },
            {
                "expression": "#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)))",
                "logProbability": -1.65644255681693
            },
            {
                "expression": "#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0)))))",
                "logProbability": -1.809968568592228
            },
            {
                "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2)))",
                "logProbability": -1.9470416042626253
            },
            {
                "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA)))",
                "logProbability": -1.7457162852853014
            },
            {
                "expression": "#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0)))))",
                "logProbability": -1.9235880396302631
            },
            {
                "expression": "#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY)",
                "logProbability": -1.7114619269636293
            },
            {
                "expression": "#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0)))))",
                "logProbability": -1.710350395414617
            },
            {
                "expression": "#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4)))",
                "logProbability": -1.9539722993843887
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0)))))))",
                "logProbability": -1.9736564984115863
            },
            {
                "expression": "logo_UA",
                "logProbability": -0.33219866702712997
            },
            {
                "expression": "logo_UL",
                "logProbability": -0.648580545397464
            },
            {
                "expression": "logo_ZA",
                "logProbability": -0.5701302646596016
            },
            {
                "expression": "logo_ZL",
                "logProbability": -0.8065563044841797
            },
            {
                "expression": "logo_DIVA",
                "logProbability": -0.4187017925573513
            },
            {
                "expression": "logo_MULA",
                "logProbability": -0.5309843698593415
            },
            {
                "expression": "logo_DIVL",
                "logProbability": -0.7673579615673489
            },
            {
                "expression": "logo_MULL",
                "logProbability": -0.5857365103280703
            },
            {
                "expression": "logo_ADDA",
                "logProbability": -0.5912130819271284
            },
            {
                "expression": "logo_SUBA",
                "logProbability": -0.6057923560699785
            },
            {
                "expression": "logo_PT",
                "logProbability": -2.018866564866286
            },
            {
                "expression": "logo_FWRT",
                "logProbability": -1.916264337411759
            },
            {
                "expression": "logo_GETSET",
                "logProbability": -1.9140006494733766
            },
            {
                "expression": "logo_IFTY",
                "logProbability": -1.2550779914334922
            },
            {
                "expression": "logo_epsA",
                "logProbability": -0.4435849649285366
            },
            {
                "expression": "logo_epsL",
                "logProbability": -0.3668070397623402
            },
            {
                "expression": "logo_forLoop",
                "logProbability": -1.730892927682366
            },
            {
                "expression": "0",
                "logProbability": -1.196061682739098
            },
            {
                "expression": "1",
                "logProbability": -1.235429549116803
            },
            {
                "expression": "2",
                "logProbability": -0.9809020738041445
            },
            {
                "expression": "3",
                "logProbability": -0.8429626604676703
            },
            {
                "expression": "4",
                "logProbability": -0.8876663093087758
            },
            {
                "expression": "5",
                "logProbability": -0.9536199672592591
            },
            {
                "expression": "6",
                "logProbability": -1.141219530319527
            },
            {
                "expression": "7",
                "logProbability": -1.051491858031465
            },
            {
                "expression": "8",
                "logProbability": -1.2018953158861887
            },
            {
                "expression": "9",
                "logProbability": -1.2543214886334781
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon (*d 1l 2)",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_MULA (logo_DIVA logo_UA 6) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_MULA (logo_DIVA logo_UA 3) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_MULA (logo_DIVA logo_UA 6) 2) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 4)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon (*d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_MULA (logo_DIVA logo_UA logo_IFTY) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_MULA (logo_DIVA logo_UA 5) 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 8 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 6 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 6 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 3) (logo_DIVA logo_UA 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 3) (logo_DIVA logo_UA 7) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon 1l slanted 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda $0) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 8 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda $0) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 8 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 8 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_epsL (logo_DIVA logo_UA 6) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 8 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 8 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 6 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 6 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 6 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 6 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 9",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 9 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 9 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 9 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 9 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 9 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 3",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 6) 2) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_DIVA logo_UA 3) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_DIVA logo_UA 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 6) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 3) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 8 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 8 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 6",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "diagonal zigzag 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 1 (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) (logo_SUBA logo_epsA logo_UA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) (logo_ADDA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL (logo_MULL logo_epsL 4) 2) logo_epsA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 2) $0)) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 4) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_UL 5) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 4) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 4) (logo_ADDA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_UL 5) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 5 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL (logo_MULL logo_epsL 3) 2) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 6) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 6) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL (logo_MULL logo_epsL 2) 3) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 6) (logo_ADDA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-circle flower l=2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 2) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-circle flower l=3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_ZL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 8 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL (logo_MULL logo_epsL 4) 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 lines",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 dashed lines of size (/d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_epsL 3) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle next to square",
            "programs": [
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to square",
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 6 semicircles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL (logo_MULL logo_epsL 4) 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 3 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (logo_FWRT logo_UL logo_UA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 4 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-spiral snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) (logo_ADDA logo_UA logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 8 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL (logo_MULL logo_epsL 4) 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 8 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL (logo_MULL logo_epsL 4) 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) (logo_ADDA logo_UA logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-row of squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) $2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) $2 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2x2 grid",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted squares",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 5 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) $1 (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) $1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon 1l slanted 8",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 3 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 3 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 5 logo_ZL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 5 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 5 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon (*d 1d 2) slanted 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 8 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 8 (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 (logo_MULL logo_UL 2) (logo_DIVA logo_UA 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 8 (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 6 (logo_MULL logo_UL 2) (logo_DIVA logo_UA 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 8 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 6) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 8 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL (logo_MULL logo_UL 4) 2) (logo_DIVA logo_UA 6) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 7 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 7 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 7 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_UL 2) (logo_MULA logo_epsA 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_UL 2) (logo_DIVA logo_UA 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 8 (logo_DIVL logo_UL 2) (logo_MULA logo_epsA 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 8 (logo_DIVL logo_UL 2) (logo_DIVA logo_UA 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 9 (logo_DIVL logo_UL 2) (logo_MULA logo_epsA 5) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "upwards",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 1 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle epsilon",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_epsL (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_epsL (logo_DIVA logo_UA 4) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_epsL (logo_DIVA logo_UA 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_epsL (logo_ADDA (logo_DIVA logo_UA 4) logo_UA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_epsL (logo_ADDA logo_UA (logo_DIVA logo_UA 4)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line segment",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square slanted by 2pi/3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda $0) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda $0) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 1 (lambda $0) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 5 (lambda $0) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 9 3 (lambda $0) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle slanted by 2pi/5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 7 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 7 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 7 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 logo_ZL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 7 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral slanted by 2pi/6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda $0) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 1 (lambda $0) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL (logo_DIVA logo_epsA 3) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted line",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 5 logo_ZL logo_epsA (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 8 5 (lambda $0) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 8",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 8 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 8 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 8 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 8 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4 slanted by 2pi/2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) logo_IFTY (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL logo_epsA (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_PT (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 5",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_DIVA (logo_ADDA logo_UA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_DIVA (logo_MULA logo_UA 2) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 5) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 4 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 6 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_MULA (logo_MULA logo_epsA 4) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 9",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_DIVA (logo_MULA logo_UA 4) 9) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 9) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 9 (logo_MULL logo_UL 4) (logo_DIVA (logo_MULA logo_UA 4) 9) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 9 (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 9) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY (logo_MULL logo_UL 4) (logo_DIVA (logo_MULA logo_UA 4) 9) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) (logo_MULL logo_epsL 1) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) (logo_DIVL logo_epsL 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) logo_IFTY (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_PT (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 3 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 5 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 6 (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) logo_IFTY $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL logo_epsA $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) logo_IFTY $0))))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) logo_IFTY (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL logo_epsA (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) logo_IFTY (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))))))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))))))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 3",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_UL (logo_SUBA logo_UA (logo_DIVA logo_UA 4)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda $0) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))))))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "diagonal zigzag 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0)))))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA)) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY (logo_MULL logo_epsL 3) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) logo_epsA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) (logo_ADDA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL (logo_MULL logo_epsL 1) 3) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 5) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_UL 4) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY (logo_MULL logo_epsL 5) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 5) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 5) logo_epsA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 5 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 5) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 6) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL (logo_MULL logo_epsL 2) 3) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL $2) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle flower l=4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 6 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 8 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 9 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 logo_IFTY (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle flower l=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 3 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 5 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 6 (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 3 (lambda (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2-semicircle sequence L=2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=3",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) (logo_ADDA logo_UA logo_epsA) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 circles",
            "programs": [
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 lines",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_ZA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_ZA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 dashed lines of size (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_epsL 2) logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_epsL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_epsL 2) logo_ZA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_epsL 2) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT (logo_DIVL logo_UL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "broken circle",
            "programs": [
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to line",
            "programs": [
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to circle",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_ZA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 4 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0)) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 semicircles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_GETSET (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-spiral snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 3 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 5 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 6 (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 3 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 5 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 6 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 3 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 5 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 6 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 3 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 4 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 5 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 7 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 3 6 (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 6 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 8 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 9 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 6 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 8 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 6 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 8 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 9 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 2) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 7 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 6 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 5 (lambda (logo_FWRT logo_UL logo_ZA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 5 8 (lambda (logo_FWRT logo_UL logo_UA (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 6 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 8 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 9 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 logo_IFTY (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 6 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 8 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 9 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 logo_IFTY (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 6 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 8 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 9 (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 logo_IFTY (lambda (#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 6 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 8 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 logo_IFTY (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 6 7 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 8 (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 9 (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 logo_IFTY (lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 8 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 9 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 logo_IFTY (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 7 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 8 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 9 (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 logo_IFTY (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0)))))))) 7 logo_IFTY (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-row of squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 1 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 4 (lambda (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0))) 4 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 2 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) 3 (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) $1 $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) $1 $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) $1 $0))) (#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0))))) $1 $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ]
}