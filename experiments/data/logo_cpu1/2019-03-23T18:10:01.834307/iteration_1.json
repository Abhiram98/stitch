{
    "verbose": true,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 1,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.527572552882253,
        "productions": [
            {
                "expression": "#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5))",
                "logProbability": -1.3492260395906666
            },
            {
                "expression": "#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1)))))))",
                "logProbability": -1.362835831452088
            },
            {
                "expression": "#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0))))))",
                "logProbability": -1.3628361431983933
            },
            {
                "expression": "#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA))",
                "logProbability": -1.3323118348771645
            },
            {
                "expression": "#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0))))",
                "logProbability": -1.3320641727853197
            },
            {
                "expression": "#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0)))))",
                "logProbability": -1.3022112175150373
            },
            {
                "expression": "#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0)))))",
                "logProbability": -1.3320641736502967
            },
            {
                "expression": "#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0)))))",
                "logProbability": -1.3022115639903555
            },
            {
                "expression": "#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4)))",
                "logProbability": -1.2450556125177785
            },
            {
                "expression": "#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0))))))",
                "logProbability": -1.2023927717583476
            },
            {
                "expression": "logo_UA",
                "logProbability": -0.39909563792091296
            },
            {
                "expression": "logo_UL",
                "logProbability": -0.39007180888780146
            },
            {
                "expression": "logo_ZA",
                "logProbability": -0.36440649138447423
            },
            {
                "expression": "logo_ZL",
                "logProbability": -0.699172175667143
            },
            {
                "expression": "logo_DIVA",
                "logProbability": -0.4542199989543825
            },
            {
                "expression": "logo_MULA",
                "logProbability": -0.4961046247156671
            },
            {
                "expression": "logo_DIVL",
                "logProbability": -0.6548101340738364
            },
            {
                "expression": "logo_MULL",
                "logProbability": -0.5400288192977611
            },
            {
                "expression": "logo_ADDA",
                "logProbability": -0.5326089583851576
            },
            {
                "expression": "logo_SUBA",
                "logProbability": -0.5321757883291363
            },
            {
                "expression": "logo_PT",
                "logProbability": -1.393916723678673
            },
            {
                "expression": "logo_FWRT",
                "logProbability": -1.2191557788542395
            },
            {
                "expression": "logo_GETSET",
                "logProbability": -1.393695594040222
            },
            {
                "expression": "logo_IFTY",
                "logProbability": -0.7205701991219269
            },
            {
                "expression": "logo_epsA",
                "logProbability": -0.30292476879479224
            },
            {
                "expression": "logo_epsL",
                "logProbability": -0.4888491717829533
            },
            {
                "expression": "logo_forLoop",
                "logProbability": -1.259150822490811
            },
            {
                "expression": "0",
                "logProbability": -0.7585867589070143
            },
            {
                "expression": "1",
                "logProbability": -0.7585867589070143
            },
            {
                "expression": "2",
                "logProbability": -0.6615596623154705
            },
            {
                "expression": "3",
                "logProbability": -0.4496087945137379
            },
            {
                "expression": "4",
                "logProbability": -0.6421013663173691
            },
            {
                "expression": "5",
                "logProbability": -0.6108495396409679
            },
            {
                "expression": "6",
                "logProbability": -0.6498349835304689
            },
            {
                "expression": "7",
                "logProbability": -0.6722541802639261
            },
            {
                "expression": "8",
                "logProbability": -0.6902157741688835
            },
            {
                "expression": "9",
                "logProbability": -0.7512614481166913
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon (*d 1l 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 4)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon (*d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_UL 2) (logo_DIVA logo_UA 5) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon 1l",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 6) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 6) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL logo_IFTY) (logo_DIVA logo_UA 6) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 6) $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 6) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 3) (logo_DIVA logo_UA 7) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 3) (logo_DIVA logo_UA 7) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 3) (logo_DIVA logo_UA 7) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_UL 3) (logo_DIVA logo_UA 7) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 3) (logo_DIVA logo_UA 7) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 6",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_MULA (logo_ADDA logo_epsA logo_epsA) 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_UL $2) logo_epsA $0)) (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_MULA (logo_DIVA logo_UA 4) 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_SUBA (logo_DIVA logo_UA 4) logo_UA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 9",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_SUBA (logo_DIVA logo_UA 4) logo_UA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT logo_ZL logo_ZA (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_MULA (logo_DIVA logo_UA 4) 9) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_ADDA (logo_MULA logo_epsA 9) logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) logo_epsA (logo_FWRT logo_ZL logo_epsA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_ADDA logo_epsA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_DIVA logo_UA logo_IFTY) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_SUBA (logo_DIVA logo_UA 4) (logo_MULA logo_epsA 6)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_ADDA (logo_MULA logo_epsA 3) logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_SUBA (logo_DIVA logo_UA 8) logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_SUBA (logo_MULA logo_epsA 5) logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 3",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 3) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 7",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 7) 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 7) 3) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL logo_IFTY) (logo_SUBA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_epsL (logo_SUBA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_epsL (logo_DIVA (logo_SUBA logo_epsA (logo_MULA logo_epsA 3)) 2) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_epsL (logo_SUBA logo_epsA (logo_ADDA logo_epsA logo_epsA)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL (logo_DIVL logo_UL 4) 5) (logo_SUBA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) (logo_ADDA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL (logo_DIVL logo_UL 2) 5) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) (logo_SUBA logo_epsA logo_UA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL (logo_DIVL logo_UL 5) 2) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) (logo_SUBA logo_UA logo_epsA) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) (logo_SUBA logo_epsA logo_UA) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 2) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) (logo_SUBA logo_UA (logo_ADDA logo_UA logo_epsA)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) (logo_SUBA (logo_DIVA (logo_SUBA logo_epsA logo_epsA) 2) logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) (logo_SUBA logo_ZA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0)) (logo_FWRT (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 5) (logo_SUBA logo_epsA logo_UA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 5) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 5) (logo_SUBA logo_UA (logo_SUBA logo_UA logo_epsA)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 4) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 5) (logo_ADDA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 5) (logo_SUBA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 4) (logo_SUBA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_GETSET (lambda (logo_FWRT (logo_DIVL logo_UL 4) logo_epsA $0)) (logo_FWRT (logo_DIVL logo_UL 4) (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 4) (logo_SUBA logo_UA (logo_ADDA logo_UA logo_epsA)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 4) (logo_SUBA logo_ZA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) (logo_ADDA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) (logo_SUBA logo_UA (logo_SUBA logo_UA logo_epsA)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) (logo_SUBA (logo_DIVA logo_UA logo_IFTY) logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) (logo_ADDA logo_epsA logo_UA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop 4 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $5) logo_epsA $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $5) logo_epsA $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $5) logo_epsA $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $5) logo_epsA $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $5) logo_epsA $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 lines",
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_epsA $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0)))) $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_ZA $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 dashed lines of size (/d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT (logo_DIVL (logo_MULL (logo_DIVL logo_UL 2) 6) 9) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT (logo_DIVL logo_UL 3) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT (logo_MULL (logo_DIVL logo_UL 6) 2) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT (logo_DIVL (logo_MULL logo_UL 2) 6) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT (logo_DIVL (logo_MULL (logo_DIVL logo_UL 9) 6) 2) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_DIVA logo_UA 6) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) (logo_GETSET (lambda (logo_FWRT logo_UL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_epsA $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_DIVA logo_UA 6) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_DIVA logo_UA 6) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_MULA logo_epsA 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_MULA logo_epsA 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_MULA logo_epsA 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_MULA logo_epsA 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_MULA logo_epsA 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 3) (logo_FWRT logo_UL (logo_DIVA logo_UA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_DIVA logo_UA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_DIVA logo_UA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 3) (logo_FWRT logo_UL (logo_DIVA logo_UA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL (logo_DIVA logo_UA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-row of squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) (logo_forLoop 9 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL (logo_MULA logo_epsA 5) $0)) (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0)) (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 5) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0)) (logo_FWRT (logo_MULL logo_UL $1) (logo_MULA logo_epsA 5) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_MULA logo_epsA 5) (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0)) (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 5) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 4) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 5) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 5) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 5) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 5) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL 5) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $5) (logo_DIVA logo_UA 4) $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon 1l slanted 8",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT logo_UL (logo_SUBA (logo_DIVA logo_UA 3) (logo_MULA logo_epsA 5)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT logo_UL (logo_SUBA (logo_DIVA logo_UA 3) (logo_MULA logo_epsA 5)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT logo_UL (logo_SUBA (logo_DIVA logo_UA 3) (logo_MULA logo_epsA 5)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT logo_UL (logo_SUBA (logo_DIVA logo_UA 3) (logo_MULA logo_epsA 5)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 ($0 2))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 8) logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) logo_UL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 8) logo_UL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_FWRT logo_UL logo_ZA ($0 5))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon (*d 1d 2) slanted 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 5) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 6) (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 7) logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 7) logo_UL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_FWRT logo_UL logo_ZA ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_FWRT logo_UL logo_UA ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_SUBA logo_UA logo_ZA) 7) logo_UL $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 5) (logo_DIVL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 8) (logo_DIVL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 5) (logo_DIVL logo_UL 2) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 5) (logo_DIVL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 8) (logo_DIVL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "upwards",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (logo_FWRT logo_UL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (logo_FWRT logo_UL logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (logo_FWRT logo_UL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (logo_PT (lambda $0) (logo_FWRT logo_UL logo_UA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (logo_PT (lambda $0) (logo_FWRT logo_UL logo_ZA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (logo_FWRT logo_UL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (logo_FWRT logo_UL logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (logo_FWRT logo_UL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_ZA logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle epsilon",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (logo_FWRT logo_epsL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (logo_FWRT logo_epsL logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (logo_FWRT logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (logo_PT (lambda $0) (logo_FWRT logo_epsL logo_UA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line segment",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_epsA (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square slanted by 2pi/3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 3)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 3)) (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 3)) (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 3)) (logo_forLoop 6 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 3)) (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle slanted by 2pi/5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_MULA logo_epsA 7) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL logo_UL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_MULA logo_epsA 7) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 7) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL logo_UL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 7) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 5) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL logo_UL 5) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral slanted by 2pi/6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 6)) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)) (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA (logo_DIVA logo_UA 3) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) (logo_FWRT (logo_MULL logo_UL $1) (logo_SUBA (logo_DIVA logo_UA 4) (logo_DIVA logo_UA 6)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)) (logo_FWRT (logo_MULL logo_UL $1) (logo_SUBA (logo_DIVA logo_UA 3) (logo_DIVA logo_UA 4)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)) (logo_FWRT (logo_MULL logo_UL $1) (logo_SUBA (logo_DIVA logo_UA 4) (logo_DIVA logo_UA 6)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted line",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT (logo_MULL logo_UL 3) logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT (logo_MULL logo_UL 3) logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 8",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 8 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) (logo_GETSET (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) (logo_PT (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda $0) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (logo_PT (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 3) (logo_GETSET (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 3) (logo_PT (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_DIVA logo_UA 8) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_DIVA logo_UA 8) $0))) (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_DIVA logo_UA 8) $0))) (logo_PT (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_DIVA logo_UA 8) (logo_PT (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4 slanted by 2pi/2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 3) logo_ZL (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))) (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_epsL $2) (logo_MULA logo_epsA 5) $0)) $0))) (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_ADDA logo_epsA logo_epsA) 8) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_ADDA logo_UA logo_UA) 5) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_MULA logo_epsA 4) 4) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_MULA logo_UA 2) 5) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 5) 2) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 9",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_MULA logo_UA 4) 9) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 9) 4) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_MULA logo_UA 4) 9) (logo_MULL logo_UL 4) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 9) 4) (logo_MULL logo_UL 4) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 9) 4) (logo_MULL logo_UL 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_ADDA logo_epsA logo_epsA) 4) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_epsA (logo_DIVA logo_epsA 2)) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_SUBA logo_epsA logo_ZA) 2) logo_epsL $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_ZL (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 2)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_UL 0) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL ($0 4))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) ($0 8)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_ADDA logo_epsA logo_epsA) 4) logo_epsL ($0 4))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_ZL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 1 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "diagonal zigzag 4",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_epsA logo_ZA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_ZA logo_epsA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_epsA logo_ZA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL (logo_MULL logo_epsL 6) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL (logo_DIVL logo_epsL 3) 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL (logo_DIVL logo_UL logo_IFTY) 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (logo_PT (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA (logo_GETSET (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA (logo_PT (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 3",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_ZA logo_epsA) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_ZL logo_epsA (logo_FWRT (logo_DIVL logo_UL 5) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL logo_UL 4) (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL logo_UL 4) (logo_PT (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 4) logo_epsA (logo_PT (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_ZL logo_epsA (logo_FWRT (logo_MULL logo_epsL 6) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_ZL logo_epsA (logo_FWRT (logo_MULL logo_epsL 6) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 6",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 6) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle flower l=4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 ($0 6))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 ($0 6))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 ($0 3)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL ($0 3)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle flower l=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 ($0 3))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 ($0 3))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 ($0 3))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 ($0 3))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_epsA logo_ZA) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_ZA logo_epsA) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_epsA logo_ZA) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (logo_GETSET (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (logo_GETSET (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) $0)) (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (logo_GETSET (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) $0)) (logo_FWRT (logo_MULL logo_epsL 3) (logo_MULA logo_epsA 5) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 circles",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 lines",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_ZA logo_epsL (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to semicircle",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_ZA logo_epsL (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 dashed lines of size (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_FWRT (logo_DIVL logo_UL 2) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "broken circle",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_SUBA logo_epsA logo_epsA) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to line",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_FWRT logo_UL logo_ZA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to circle",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_ZA logo_epsL (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 4 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) $0)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) $0)) (logo_FWRT logo_UL (logo_SUBA (logo_DIVA logo_UA 4) logo_UA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (logo_SUBA (logo_DIVA logo_UA 4) logo_UA) $0)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) $0)) (logo_FWRT logo_UL (logo_MULA (logo_DIVA logo_UA 4) 5) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (logo_MULA (logo_DIVA logo_UA 4) 5) $0)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) ($0 3))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) ($0 3))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) ($0 3))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_FWRT logo_UL logo_ZA $0))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0)))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 5))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 5))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 5))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))) ($0 6))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 6))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_epsA logo_ZA) logo_epsL $0)) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_epsA logo_ZA) logo_epsL $0)) ($0 6))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)) ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA logo_IFTY) logo_UL ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_epsA $0)) ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) ($0 7))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-row of squares",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))) logo_IFTY $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 ($0 2))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-concentric squares",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 $0)))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 $0)))) 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) (logo_MULL logo_UL $1) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 $0)))) 8 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $3) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ]
}