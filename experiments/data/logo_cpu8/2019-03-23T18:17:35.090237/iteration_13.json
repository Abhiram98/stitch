{
    "verbose": true,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 16,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.768485580645307,
        "productions": [
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL))",
                "logProbability": -2.114653617616439
            },
            {
                "expression": "#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0)))",
                "logProbability": -2.0848236356952916
            },
            {
                "expression": "#(logo_FWRT logo_UL logo_UA)",
                "logProbability": -1.937355393279676
            },
            {
                "expression": "#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA)",
                "logProbability": -1.8982650396599317
            },
            {
                "expression": "#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA))",
                "logProbability": -2.0004747118283897
            },
            {
                "expression": "#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA)))",
                "logProbability": -2.0558914605993674
            },
            {
                "expression": "#(#(logo_DIVA logo_UA) 4)",
                "logProbability": -0.5417695656715256
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0)))))))",
                "logProbability": -2.114556678517972
            },
            {
                "expression": "#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2))",
                "logProbability": -2.084699443332128
            },
            {
                "expression": "#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)))",
                "logProbability": -1.8740746358986473
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0))))))))",
                "logProbability": -1.9222334124517952
            },
            {
                "expression": "#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0)))))",
                "logProbability": -1.8216521786807096
            },
            {
                "expression": "#(logo_DIVA logo_UA)",
                "logProbability": -0.5929924635023598
            },
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY))",
                "logProbability": -1.6718771285731453
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0)))))))",
                "logProbability": -1.9507888387700785
            },
            {
                "expression": "logo_UA",
                "logProbability": -0.8524017293840824
            },
            {
                "expression": "logo_UL",
                "logProbability": -0.5949533003427501
            },
            {
                "expression": "logo_ZA",
                "logProbability": -0.989269666233445
            },
            {
                "expression": "logo_ZL",
                "logProbability": -0.9479084384253542
            },
            {
                "expression": "logo_DIVA",
                "logProbability": -1.0025369665993584
            },
            {
                "expression": "logo_MULA",
                "logProbability": -0.9399995173554587
            },
            {
                "expression": "logo_DIVL",
                "logProbability": -1.1513567567106362
            },
            {
                "expression": "logo_MULL",
                "logProbability": -0.9252543097834871
            },
            {
                "expression": "logo_ADDA",
                "logProbability": -1.009978621665418
            },
            {
                "expression": "logo_SUBA",
                "logProbability": -0.9841919743684548
            },
            {
                "expression": "logo_PT",
                "logProbability": -2.1762698867208234
            },
            {
                "expression": "logo_FWRT",
                "logProbability": -1.8177345083830567
            },
            {
                "expression": "logo_GETSET",
                "logProbability": -2.0832957961852836
            },
            {
                "expression": "logo_IFTY",
                "logProbability": -1.4053884519271382
            },
            {
                "expression": "logo_epsA",
                "logProbability": -0.7665920079770556
            },
            {
                "expression": "logo_epsL",
                "logProbability": -0.8452981684261411
            },
            {
                "expression": "logo_forLoop",
                "logProbability": -1.8490252323351735
            },
            {
                "expression": "0",
                "logProbability": -1.4478376352071263
            },
            {
                "expression": "1",
                "logProbability": -1.447028754388469
            },
            {
                "expression": "2",
                "logProbability": -1.059775406592971
            },
            {
                "expression": "3",
                "logProbability": -1.008353104632489
            },
            {
                "expression": "4",
                "logProbability": -1.0167390207874476
            },
            {
                "expression": "5",
                "logProbability": -0.9603507759242857
            },
            {
                "expression": "6",
                "logProbability": -1.1794463960674109
            },
            {
                "expression": "7",
                "logProbability": -1.1402725025813996
            },
            {
                "expression": "8",
                "logProbability": -1.2643487782532614
            },
            {
                "expression": "9",
                "logProbability": -1.4076227593299073
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon (*d 1l 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (logo_MULA (#(logo_DIVA logo_UA) 6) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (logo_MULA (#(logo_DIVA logo_UA) 9) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 4)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) #(#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 8) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_UL 2) 2) #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon (*d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (logo_MULA (#(logo_DIVA logo_UA) 5) 6) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 6 (#(logo_DIVA logo_UA) 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 7 (#(logo_DIVA logo_UA) 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon 1l slanted 3",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA #(#(logo_DIVA logo_UA) 4) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)) 1 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (logo_MULA (#(logo_DIVA logo_UA) 9) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 6 logo_UL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 6 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA #(#(logo_DIVA logo_UA) 4) 5) 6 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA (#(logo_DIVA logo_UA) 8) 2) 6 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 6 logo_UL $0)) 1 1 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 9",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 9 logo_UL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 9 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA (#(logo_DIVA logo_UA) 8) 2) 9 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 9 logo_UL $0)) 1 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 9 logo_UL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 6) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_UL 2) 2) (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_UL 2) 2) (logo_MULA (#(logo_DIVA logo_UA) 6) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 9) 3) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 7) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (logo_MULA (#(logo_DIVA logo_UA) 7) 4) 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 7) 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (logo_MULA (#(logo_DIVA logo_UA) 7) 2) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (logo_MULA (#(logo_DIVA logo_UA) 7) 5) 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 8 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 6 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 7 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 8 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 7 7 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 9 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 8 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 6",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 5) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 5 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 5 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 6 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 6 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 6 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) $1 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) $1 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-circle flower l=2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 2) $0)) 7 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-circle flower l=3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0)) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 $0))) $0)) 7 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 circles",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 lines",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (logo_forLoop 2 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle next to square",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) (#(logo_FWRT logo_UL logo_UA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to square",
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) (#(logo_FWRT logo_UL logo_UA) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) #(#(logo_DIVA logo_UA) 4) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 6 semicircles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) $0)))) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) $0)))) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) logo_IFTY 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 4 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) logo_IFTY 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 3 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) $0))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0))))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(logo_FWRT logo_UL logo_UA) $0))))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 5 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) logo_IFTY 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 7 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) logo_IFTY 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 5 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) logo_IFTY 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 4 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) logo_IFTY 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 6 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 5 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 6 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 5 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) logo_IFTY 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 5 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 5 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 8 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 4 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 5 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) logo_IFTY 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 8 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 6 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 5 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 4 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 6 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 4 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 5 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) logo_IFTY 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 5 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 6 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 8 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-spiral snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 6 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 8 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 5 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL logo_IFTY) $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 8 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) 7 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 6 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 8 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 9 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 8 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 8 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 9 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 9 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 8 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 8 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 9 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 8 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL logo_IFTY) $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) logo_IFTY 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_MULA (#(logo_DIVA logo_UA) 8) 2) $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 8 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) logo_IFTY 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 8 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 9 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 7 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) logo_IFTY 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 8 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 7 7 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 9 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-row of squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) #(#(logo_DIVA logo_UA) 4) (#(logo_FWRT logo_UL logo_UA) $0))) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2x2 grid",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)) 5 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)) 7 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) #(#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 8) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_UL 2) 2) #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 5",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 5) #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 5) #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 5) #(#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 5) #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 5) #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (logo_MULA (#(logo_DIVA logo_UA) 8) 2) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon 1l slanted 8",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) logo_epsA 5 logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 9 8 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)) 1 8 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 5 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 4 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 7 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 5 (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 7 (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_DIVA logo_UA 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 6 (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon (*d 1d 2) slanted 5",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 8 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 6 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) logo_epsA 8 logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 7 (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_DIVA logo_UA 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 8 (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL logo_IFTY (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (#(logo_DIVA logo_UA) 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (logo_DIVA #(#(logo_DIVA logo_UA) 4) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (logo_MULA logo_epsA 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (logo_DIVA logo_UA 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_DIVL logo_UL 2) 8 (#(logo_DIVA logo_UA) 8) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "upwards",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 2 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(logo_FWRT logo_UL logo_UA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (#(logo_DIVA logo_UA) 4) 2 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_PT (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)) (#(logo_FWRT logo_UL logo_UA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 2 logo_UL (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(logo_FWRT logo_UL logo_UA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT (logo_MULL logo_UL 2) #(#(logo_DIVA logo_UA) 4) (#(logo_FWRT logo_UL logo_UA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA #(#(logo_DIVA logo_UA) 4) 3) 3 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_SUBA logo_UA #(#(logo_DIVA logo_UA) 4)) 3 logo_UL $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle epsilon",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL 2 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL 2 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL 2 #(#(logo_DIVA logo_UA) 4) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL 2 #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL #(#(logo_DIVA logo_UA) 4) (logo_FWRT logo_epsL #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line segment",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_epsA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square slanted by 2pi/3",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 6) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 4 3 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 5 6 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle slanted by 2pi/5",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 7 logo_epsA (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 8 logo_epsA (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 6 5 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) logo_epsA 7 logo_ZL (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral slanted by 2pi/6",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 7 6 (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 1 6 (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 logo_UL $0)) 1 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 3) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 logo_UL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Hook slanted by 2pi/7",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 8 7 (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 1 7 (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0))) 1 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (#(logo_DIVA logo_UA) 7) 1 logo_UL (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted line",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (#(logo_DIVA logo_UA) 8) 2 (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_DIVA #(#(logo_DIVA logo_UA) 4) 2) 2 (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA 5) 2 (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_DIVA logo_UA 8) 2 (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (#(logo_DIVA logo_UA) 8) 2 (logo_MULL logo_UL 3) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (#(logo_DIVA logo_UA) 4) 7 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 logo_UL (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 7 (logo_MULL logo_UL 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 8",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 8 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (#(logo_DIVA logo_UA) 4) 8 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 8 logo_UL (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 8 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 8 (logo_MULL logo_UL 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 3 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 3 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 3 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 5 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 5 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 5 (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4 slanted by 2pi/2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 0 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_PT (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_PT (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 5) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 5) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) logo_IFTY) 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_ADDA (#(logo_DIVA logo_UA) 5) (#(logo_DIVA logo_UA) 5)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_ADDA #(#(logo_DIVA logo_UA) 4) (logo_MULA logo_epsA 6)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 9",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 9) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_ADDA (#(logo_DIVA logo_UA) 3) (#(logo_DIVA logo_UA) 9)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_ADDA (#(logo_DIVA logo_UA) 9) (#(logo_DIVA logo_UA) 3)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_DIVA (logo_MULA logo_UA 4) 9) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 9) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.1",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 0 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 0 (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0))) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0))) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0))) 4 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL (logo_MULA #(#(logo_DIVA logo_UA) 4) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL (logo_MULA #(#(logo_DIVA logo_UA) 4) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(logo_FWRT logo_UL logo_UA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 0 (#(logo_FWRT logo_UL logo_UA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(logo_FWRT logo_UL logo_UA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (logo_MULA #(#(logo_DIVA logo_UA) 4) 3) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (logo_SUBA logo_UA #(#(logo_DIVA logo_UA) 4)) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) $0))))))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 3",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0))))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 0 $0)))))))))))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) logo_epsA 5 logo_ZL (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 9 8 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda $0) 1 8 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 5 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 5 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda $0) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 5 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 5 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 5 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 6 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 6 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 6 (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 6 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 6 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 6) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 6) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) $1 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) $1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) $3 $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) $3 $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 6 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) $3 $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) $3 $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle flower l=4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0)) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0)) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0)) 8 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle flower l=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) 6 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_forLoop 3 (lambda (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2-semicircle sequence L=2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)))) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 2 $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 3 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA))) 3 (logo_GETSET (lambda $0) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 circles",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 lines",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 dashed lines of size (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) logo_UA 5 logo_epsL (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) logo_UA 5 logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) logo_ZA 5 logo_epsL (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) logo_ZA 5 logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_FWRT (logo_DIVL logo_UL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "broken circle",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to line",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to circle",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_FWRT logo_UL logo_UA) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(logo_FWRT logo_UL logo_UA) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_FWRT logo_UL logo_UA) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_FWRT logo_UL logo_UA) $0)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 4 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $3) #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL #(#(logo_DIVA logo_UA) 4) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $3) #(#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 semicircles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 1 $0)) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (logo_GETSET (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-spiral snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL)) 2 $0)) 6 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 6 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 6 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 5 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 3 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(#(logo_DIVA logo_UA) 4) 3 logo_UL $0)) 6 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 6 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) 8 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 6 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 8 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 6 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) 8 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA)) 2 $0)) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 5 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 7 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 6 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) 8 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0))) logo_IFTY 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 8 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 9 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 8 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 9 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 8 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)) 9 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 7 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 8 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) logo_IFTY 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(logo_FWRT logo_UL logo_UA) $0))))) 9 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 8 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) logo_IFTY 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 9 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) $0)) 7 7 (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 8 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) logo_IFTY 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) 9 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA) $0)))) 7 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 8 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) logo_IFTY 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))) 9 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0)))))))) (lambda (#(logo_FWRT logo_UL logo_UA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))) 7 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-row of squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) (#(logo_FWRT logo_UL logo_UA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 5 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 4 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 7 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 5 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 4 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 7 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 5 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 4 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 7 #(#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL $1) 4 #(#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL $1) 8 #(#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) #(#(logo_DIVA logo_UA) 4) $0))) (#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ]
}