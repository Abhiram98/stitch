{
    "verbose": true,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 16,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.5166078199382511,
        "productions": [
            {
                "expression": "#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0)))))",
                "logProbability": -1.0813674378308762
            },
            {
                "expression": "#(logo_DIVA logo_UA)",
                "logProbability": -0.4284435632997554
            },
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY))",
                "logProbability": -0.8287329322053645
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0)))))))",
                "logProbability": -1.0239590569147334
            },
            {
                "expression": "logo_UA",
                "logProbability": -0.7110931729938907
            },
            {
                "expression": "logo_UL",
                "logProbability": -0.5282991845571385
            },
            {
                "expression": "logo_ZA",
                "logProbability": -0.7450136607308484
            },
            {
                "expression": "logo_ZL",
                "logProbability": -0.7735200567167517
            },
            {
                "expression": "logo_DIVA",
                "logProbability": -0.7492374366644516
            },
            {
                "expression": "logo_MULA",
                "logProbability": -0.7260225490046324
            },
            {
                "expression": "logo_DIVL",
                "logProbability": -0.8702976535292937
            },
            {
                "expression": "logo_MULL",
                "logProbability": -0.5454529392883645
            },
            {
                "expression": "logo_ADDA",
                "logProbability": -0.759840028561019
            },
            {
                "expression": "logo_SUBA",
                "logProbability": -0.7318899360122986
            },
            {
                "expression": "logo_PT",
                "logProbability": -1.1424131509062314
            },
            {
                "expression": "logo_FWRT",
                "logProbability": -0.8967899089050806
            },
            {
                "expression": "logo_GETSET",
                "logProbability": -1.1423977025260967
            },
            {
                "expression": "logo_IFTY",
                "logProbability": -0.8499563747388228
            },
            {
                "expression": "logo_epsA",
                "logProbability": -0.43708624123727224
            },
            {
                "expression": "logo_epsL",
                "logProbability": -0.6404949171371128
            },
            {
                "expression": "logo_forLoop",
                "logProbability": -1.0224724431257313
            },
            {
                "expression": "0",
                "logProbability": -0.8827692496617723
            },
            {
                "expression": "1",
                "logProbability": -0.8827692496617723
            },
            {
                "expression": "2",
                "logProbability": -0.8182307276242611
            },
            {
                "expression": "3",
                "logProbability": -0.7004476928678178
            },
            {
                "expression": "4",
                "logProbability": -0.5538870273002061
            },
            {
                "expression": "5",
                "logProbability": -0.7433523725075033
            },
            {
                "expression": "6",
                "logProbability": -0.7956924467173065
            },
            {
                "expression": "7",
                "logProbability": -0.7325336409369729
            },
            {
                "expression": "8",
                "logProbability": -0.7461637558949774
            },
            {
                "expression": "9",
                "logProbability": -0.8380383341854021
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon (*d 1l 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 4 (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 6 (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 7 (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 3 (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 4)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 4) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_UL 2) 2) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 4) 7 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_SUBA logo_UA (#(logo_DIVA logo_UA) 4)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon (*d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (logo_MULA logo_epsA 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_epsL 8) 5) (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_epsL 5) 8) (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 6) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_SUBA logo_UA (#(logo_DIVA logo_UA) 6)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 6) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 6) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 7 (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 9 (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 8 (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon 1l slanted 3",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT (logo_DIVL logo_UL 8) (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT (logo_DIVL logo_UL 9) (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT (logo_DIVL logo_epsL 7) (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 8) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 6",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)) (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 9",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)) (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (#(logo_DIVA logo_UA) logo_IFTY) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 4) 4 (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 4) 6 (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 4) 8 (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 4) 7 (#(logo_DIVA logo_UA) 3) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 4) 7 (logo_MULA (#(logo_DIVA logo_UA) 7) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 7) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 4) 8 (logo_MULA (#(logo_DIVA logo_UA) 7) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 7) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (logo_SUBA logo_UA (#(logo_DIVA logo_UA) 7)) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 6",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_SUBA (#(logo_DIVA logo_UA) 4) logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 8) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_MULA logo_epsA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_epsA (#(logo_DIVA logo_UA) logo_IFTY)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) (logo_SUBA (#(logo_DIVA logo_UA) logo_IFTY) logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 2) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL (logo_DIVL logo_UL 2) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL (logo_MULL logo_epsL 4) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_ZA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) (logo_SUBA logo_ZA (logo_SUBA logo_ZA logo_epsA)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 5) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) (logo_SUBA (#(logo_DIVA logo_UA) logo_IFTY) logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 4) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 5) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 5) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 5) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 5) (logo_SUBA logo_ZA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (logo_FWRT logo_ZL logo_UA (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) logo_epsA $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) (logo_SUBA logo_ZA (logo_SUBA logo_ZA logo_epsA)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) logo_epsA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_ZA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_epsA (#(logo_DIVA logo_UA) logo_IFTY)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_ZA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 lines",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL logo_IFTY) logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_FWRT logo_UL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL logo_IFTY) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_FWRT logo_UL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 dashed lines of size (/d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL (logo_MULL logo_epsL 2) 6) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_epsL 3) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_epsL 3) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL (logo_MULL logo_epsL 3) 9) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL logo_IFTY) logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_epsL 3) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (#(logo_DIVA logo_UA) 4) $0))) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) (logo_PT (lambda (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0))) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-row of squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 4) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2x2 grid",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 4) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_UL 2) 2) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 4) 7 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_SUBA logo_UA (#(logo_DIVA logo_UA) 4)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 5) 9 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 5) 8 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 5) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 5) 7 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 5) 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 8 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (#(logo_DIVA logo_UA) 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon 1l slanted 8",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 7 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 5 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_MULA logo_epsA 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_DIVA logo_UA 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 7 (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 5 (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon (*d 1d 2) slanted 5",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 8 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (logo_MULA logo_epsA 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_DIVA logo_UA 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 7 (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 8 (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 9 (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (#(logo_DIVA logo_UA) 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (logo_MULA logo_epsA 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (logo_DIVA logo_UA 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_DIVL logo_UL 2) 8 (#(logo_DIVA logo_UA) 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_DIVL logo_UL 2) 9 (#(logo_DIVA logo_UA) 8) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "upwards",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_ZA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_ZA (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle epsilon",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL 2 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL 2 (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_epsL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_epsL logo_ZA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line segment",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_ZA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square slanted by 2pi/3",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 6) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 6) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 3) (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 4 (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle slanted by 2pi/5",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 8 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 5) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 8 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 5) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral slanted by 2pi/6",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT (logo_MULL logo_UL 0) (#(logo_DIVA logo_UA) 6) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) (logo_forLoop 8 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0))) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) $0))) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0))) $0)))) $0)))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Hook slanted by 2pi/7",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (logo_FWRT logo_UL logo_UA (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL (logo_MULL logo_epsL 2) 2) logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (logo_FWRT logo_UL logo_UA (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (logo_FWRT logo_ZL logo_UA (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted line",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (logo_FWRT (logo_MULL logo_UL 3) logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (logo_FWRT (logo_MULL logo_UL 3) logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (logo_FWRT (logo_MULL logo_UL 3) logo_UA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 7",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL $1) 1 (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 8",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL $1) 1 (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 3",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_ADDA (#(logo_DIVA logo_UA) logo_IFTY) logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_ADDA logo_epsA (#(logo_DIVA logo_UA) logo_IFTY)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_epsL $1) 1 (logo_MULA logo_epsA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_ADDA logo_epsA (logo_ADDA logo_epsA logo_epsA)) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (#(logo_DIVA logo_UA) 8) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_DIVA logo_UA 8) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_epsL $1) 1 (#(logo_DIVA logo_UA) 8) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (#(logo_DIVA logo_UA) 8) $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 5) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 5) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) logo_IFTY) 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (logo_ADDA logo_epsA logo_epsA) 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (logo_MULA logo_epsA 4) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 9",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 9) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_ADDA (#(logo_DIVA logo_UA) 3) (#(logo_DIVA logo_UA) 9)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_ADDA (#(logo_DIVA logo_UA) 9) (#(logo_DIVA logo_UA) 3)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_DIVA (logo_MULA logo_UA 4) 9) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 9) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA (#(logo_DIVA logo_UA) 4) logo_IFTY) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA (#(logo_DIVA logo_UA) logo_IFTY) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL logo_IFTY (logo_DIVA logo_epsA 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA (logo_ADDA logo_epsA logo_epsA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA (#(logo_DIVA logo_UA) 4) logo_IFTY) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA (#(logo_DIVA logo_UA) logo_IFTY) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (logo_FWRT logo_ZL logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_MULA logo_epsA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_UA $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (logo_FWRT logo_UL logo_UA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (logo_FWRT logo_UL logo_ZA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_ZA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (logo_DIVA logo_epsA 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) (logo_SUBA logo_epsA (#(logo_DIVA logo_UA) logo_IFTY)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) (logo_SUBA (#(logo_DIVA logo_UA) 1) logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_epsL 3) logo_IFTY logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda $0) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 5) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 5) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda $0) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 5) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 4) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_epsL 5) logo_IFTY logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_DIVL logo_UL 4) logo_IFTY logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 5) logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 5) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda $0) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) (logo_SUBA logo_epsA (#(logo_DIVA logo_UA) logo_IFTY)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) (logo_SUBA (#(logo_DIVA logo_UA) 1) logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL (logo_MULL logo_epsL 2) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL (logo_MULL logo_epsL 3) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 6) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 6) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) (logo_GETSET (lambda $0) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle flower l=4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) $0)) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle flower l=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 3) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_ZA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_epsA (#(logo_DIVA logo_UA) logo_IFTY)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA (#(logo_DIVA logo_UA) 1) logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA (#(logo_DIVA logo_UA) logo_IFTY) logo_epsA) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_ZA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 circles",
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 lines",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to semicircle",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 dashed lines of size (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_FWRT (logo_DIVL logo_UL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_epsL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_epsL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_epsL 2) logo_UA $0)))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL logo_IFTY) logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_epsL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "broken circle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_ZA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_ZA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 1) $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to line",
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_epsA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to circle",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 4 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $3) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $3) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (#(logo_DIVA logo_UA) 4) $0))) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 semicircles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 7) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 2) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 2) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 2) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-row of squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 1) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 7 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 5 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 7 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 5 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 7 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 5 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL $1) 4 (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL $1) 8 (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL $1) logo_IFTY (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ]
}