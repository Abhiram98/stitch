{
    "verbose": true,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 16,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.7006066841814249,
        "productions": [
            {
                "expression": "#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL)",
                "logProbability": -1.6550572315370946
            },
            {
                "expression": "#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL)",
                "logProbability": -1.889979054001559
            },
            {
                "expression": "#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL)",
                "logProbability": -1.976867123712719
            },
            {
                "expression": "#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))",
                "logProbability": -1.8360768052149146
            },
            {
                "expression": "#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1))))",
                "logProbability": -1.9184631069874154
            },
            {
                "expression": "#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0)))",
                "logProbability": -1.8138733084402916
            },
            {
                "expression": "#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1))))))",
                "logProbability": -1.86295150929261
            },
            {
                "expression": "#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5))",
                "logProbability": -1.9095802825596437
            },
            {
                "expression": "#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1)))))))",
                "logProbability": -1.9149417740524095
            },
            {
                "expression": "#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0))))))",
                "logProbability": -2.007655387046991
            },
            {
                "expression": "#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA))",
                "logProbability": -1.814543979288902
            },
            {
                "expression": "#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0))))",
                "logProbability": -1.811992413531359
            },
            {
                "expression": "#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0)))))",
                "logProbability": -1.9445665932238554
            },
            {
                "expression": "#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0)))))",
                "logProbability": -1.976865963883403
            },
            {
                "expression": "#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0)))))",
                "logProbability": -1.8898546800365024
            },
            {
                "expression": "#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4)))",
                "logProbability": -1.9224398825132236
            },
            {
                "expression": "#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0))))))",
                "logProbability": -1.86410488603617
            },
            {
                "expression": "logo_UA",
                "logProbability": -0.43482583304721656
            },
            {
                "expression": "logo_UL",
                "logProbability": -0.5148346995873108
            },
            {
                "expression": "logo_ZA",
                "logProbability": -0.4655106785383407
            },
            {
                "expression": "logo_ZL",
                "logProbability": -0.9264799351531448
            },
            {
                "expression": "logo_DIVA",
                "logProbability": -0.5506631868747749
            },
            {
                "expression": "logo_MULA",
                "logProbability": -0.5203763012274374
            },
            {
                "expression": "logo_DIVL",
                "logProbability": -0.9655046945260777
            },
            {
                "expression": "logo_MULL",
                "logProbability": -0.6373937053450729
            },
            {
                "expression": "logo_ADDA",
                "logProbability": -0.619405310981255
            },
            {
                "expression": "logo_SUBA",
                "logProbability": -0.6341395445482871
            },
            {
                "expression": "logo_PT",
                "logProbability": -2.039111781193409
            },
            {
                "expression": "logo_FWRT",
                "logProbability": -1.960713807926544
            },
            {
                "expression": "logo_GETSET",
                "logProbability": -2.0717696119002262
            },
            {
                "expression": "logo_IFTY",
                "logProbability": -1.1691949291618924
            },
            {
                "expression": "logo_epsA",
                "logProbability": -0.4059658069798906
            },
            {
                "expression": "logo_epsL",
                "logProbability": -0.7740923521832697
            },
            {
                "expression": "logo_forLoop",
                "logProbability": -1.8454182943626933
            },
            {
                "expression": "0",
                "logProbability": -1.2023649651786212
            },
            {
                "expression": "1",
                "logProbability": -1.2029379089630479
            },
            {
                "expression": "2",
                "logProbability": -0.9801369678210015
            },
            {
                "expression": "3",
                "logProbability": -0.7501108702946406
            },
            {
                "expression": "4",
                "logProbability": -0.7813597764132321
            },
            {
                "expression": "5",
                "logProbability": -0.9339535416132412
            },
            {
                "expression": "6",
                "logProbability": -0.980320304223012
            },
            {
                "expression": "7",
                "logProbability": -1.0299236865957448
            },
            {
                "expression": "8",
                "logProbability": -1.1135897106468127
            },
            {
                "expression": "9",
                "logProbability": -1.1635091225585423
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon (*d 1l 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 3) 4) (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) (logo_MULL logo_UL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) (logo_MULL logo_UL 2) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) (logo_MULL logo_UL 2) $0)) $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 4)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon (*d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) (logo_MULL logo_UL 2) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 5) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA logo_IFTY) 4) (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 6) logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 6) 7) logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 6) logo_UL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 6) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 6) logo_UL $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 7) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 7) (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 7) (logo_MULL logo_UL 3) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) logo_IFTY (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 7) (logo_MULL logo_UL 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon 1l slanted 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 3) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 8) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 3) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 5) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 3) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 8) logo_UL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 6 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 6 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 6 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 9",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 9 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 7)) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 9 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 9 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 9 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 9 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 2 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) (logo_MULL logo_UL 4) $0)) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 3) 4) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) (logo_MULL logo_UL 4) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 9) 3) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 7",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 7) 4) (logo_MULL logo_UL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 7) 3) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "diagonal zigzag 3",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_epsA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_epsA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_epsA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 4) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL logo_UL 5) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL (logo_MULL logo_epsL 2) 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_epsA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 5) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 5) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL (logo_MULL logo_epsL 2) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 6) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 6) $0)) $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-circle flower l=2",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 ($0 4)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 2 ($0 4))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-circle flower l=3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 ($0 5))) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 ($0 5)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 ($0 5))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 ($0 5))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) $1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) $0))) $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0))) $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 circles",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $0)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 lines",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_ZA logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda $0))) logo_IFTY $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4 dashed lines of size (/d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 3) logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to square",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_UL $1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_UL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_UL $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) $0)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) $0)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($1 3))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($1 3))) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL $0)) ($0 3))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0)))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL $0))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_MULA (logo_DIVA logo_UA 4) 4) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_SUBA logo_epsA logo_epsA) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL (logo_DIVL logo_UL 5) 2) $0)) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL (logo_DIVL logo_UL 2) 5) $0)) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 3))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 3))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 3))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 3))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL $0)) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0)) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($1 4))) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)) ($0 4))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) ($0 4))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_SUBA logo_epsA logo_epsA) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)))) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))) ($0 4))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL (logo_DIVL logo_UL 5) 2) $0)) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL (logo_DIVL logo_UL 2) 5) $0)) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 4))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 4))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 4))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 4))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 4))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 4))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL $0)) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($1 5))) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($1 5))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)) ($0 5))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 5))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 5))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 5))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 5))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) ($0 5))) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) ($0 5))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) ($0 5))) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL $0)) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($1 6))) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($1 6))) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_UL ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)) ($0 6))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) ($0 6))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL (logo_DIVL logo_UL 2) 5) $0)) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL (logo_DIVL logo_UL 5) 2) $0)) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))) ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 6))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 6))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) ($0 7))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) ($0 7))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL (logo_DIVL logo_UL 5) 2) $0)) ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL (logo_DIVL logo_UL 2) 5) $0)) ($0 7))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 7))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))) ($0 7))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 7))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) ($0 7))) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 2) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-row of squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) logo_ZA (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2x2 grid",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 4",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 4) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 5) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 5) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon 1l slanted 8",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 3 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 3 logo_UL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 3 logo_UL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 3) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 3 (logo_MULL logo_UL 1) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 ($0 2))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 5 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 5 logo_UL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 5 logo_UL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 5) logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 8) logo_UL $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon (*d 1d 2) slanted 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 5) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 6 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 7 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 7 logo_UL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 7 logo_UL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 7) logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 7 (logo_MULL logo_UL 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 5) (logo_DIVL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 8 (logo_DIVL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 5) (logo_DIVL logo_UL 2) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA logo_epsA 5) (logo_DIVL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 8 (logo_DIVL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "upwards",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 1 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 2 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (logo_FWRT logo_UL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (logo_FWRT logo_UL logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (logo_FWRT logo_UL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 2) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_ZA logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle epsilon",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (logo_FWRT logo_epsL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (logo_FWRT logo_epsL logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (logo_FWRT logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (logo_PT (lambda $0) (logo_FWRT logo_epsL logo_UA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line segment",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_UL))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_epsA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square slanted by 2pi/3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 6 logo_ZL (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda $0) 3 (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 3)) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 3) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 6 logo_ZL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle slanted by 2pi/5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_MULA logo_epsA 7) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_MULA logo_epsA 7) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL logo_UL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 5) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 7) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_MULA logo_epsA 8) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral slanted by 2pi/6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda $0) 6 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda ($0 6)) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) (logo_DIVA logo_UA 6) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda $0) 6 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)) 6 (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted line",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT (logo_MULL logo_UL 3) logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_FWRT (logo_MULL logo_UL 3) logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL 3) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 7 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 8",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 8 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) (logo_GETSET (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) (logo_PT (lambda $0) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_GETSET (lambda $0) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4 slanted by 2pi/2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_ZL (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 8 logo_ZL (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda $0) 2 (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_MULA logo_epsA 4) 4) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_ADDA logo_UA logo_UA) 5) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_ADDA logo_epsA logo_epsA) 8) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 5) 2) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_MULA logo_UA 2) 5) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 9",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_MULA logo_UA 4) 9) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 9) 4) (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_MULA logo_UA 4) 9) (logo_MULL logo_UL 4) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_MULA (logo_DIVA logo_UA 9) 4) (logo_MULL logo_UL 4) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_MULA logo_UA 4) 9) (logo_MULL logo_UL 4) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.1",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_ADDA logo_epsA logo_epsA) 4) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_epsA (logo_DIVA logo_epsA 2)) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA (logo_SUBA logo_epsA logo_ZA) 2) logo_epsL $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_ZL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 8 logo_ZL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda $0) 2 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 1 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) ($0 4))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) ($0 4))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 1 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) ($0 4))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) ($0 4)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) $1 $0))))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) $1 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0))))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) ($0 4)))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) ($0 4)))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_ZL $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 1",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_UL))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "diagonal zigzag 4",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 8 logo_ZL $0))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda $0) 2 $0))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (logo_forLoop 4 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_epsA logo_ZA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_ZA logo_epsA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_epsA logo_ZA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 2) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL (logo_MULL logo_epsL 6) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL (logo_DIVL logo_epsL 3) 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL (logo_DIVL logo_UL logo_IFTY) 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_UA logo_epsA) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_epsA logo_UA) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_epsA logo_UA) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_epsL)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 4) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL logo_UL 5) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL (logo_MULL logo_epsL 2) 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_DIVL logo_UL 4) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 5) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_epsA logo_UA) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 5 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 6) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL (logo_MULL logo_epsL 2) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL (logo_MULL logo_epsL 3) 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL (logo_MULL logo_epsL 1) 6) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 6 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 6 (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_epsL)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 6 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $1 $0))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle flower l=4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 ($0 6))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 ($0 6))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 ($0 6))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 ($0 3)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 4 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL ($0 3)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle flower l=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) ($0 3))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) ($0 3))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) ($0 3))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) ($0 3))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) ($0 3))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_epsA logo_ZA) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_ZA logo_epsA) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_ADDA logo_epsA logo_ZA) logo_epsL (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_DIVL (logo_MULL logo_epsL 6) 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 3) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) (logo_MULL logo_epsL 3) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 circles",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0) logo_ZL)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 lines",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0) logo_UL))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_ZA logo_epsL (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0) logo_UL))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_ZA logo_epsL (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 dashed lines of size (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 (logo_DIVL logo_UL 2)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 (logo_DIVL (logo_MULL logo_UL 3) 6)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 (logo_MULL (logo_DIVL logo_UL 6) 3)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 (logo_MULL (logo_DIVL logo_UL 4) 2)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 (logo_DIVL (logo_MULL logo_UL 2) 4)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "broken circle",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0) logo_ZL)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)) logo_ZL)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0) logo_ZL)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0) logo_ZL)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to line",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_FWRT logo_UL logo_ZA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to circle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)) logo_UL))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_UL)) logo_UL))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)) logo_UL))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)) logo_UL))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))) logo_UL))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 4 dashes",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) $0)) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) $2 $0))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $2) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 semicircles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (logo_GETSET (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_ZL)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (logo_GETSET (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)) (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0) logo_ZL)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0)))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0) logo_UL))) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) 3 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) 3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 $0)) 3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0) logo_ZL)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_UL))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0))) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) ($0 2))) $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0)))) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) 5 (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) 5 (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 5 logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL 2) $0)) 5 (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 2 logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))) 5 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))) 5 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0))) 5 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 6 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_epsL $0)))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_ZL $0)))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA)) logo_ZL $0)))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)) 6 (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) $0)) 6 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA logo_epsL $0)) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0) logo_UL))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0) logo_UL) logo_ZL)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0) logo_UL))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_UL) logo_UL))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_UA (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0) logo_UL))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (lambda (logo_FWRT $0 logo_ZA (#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0)))) logo_ZA $1)))) $0 logo_UL)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL $0)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)) 7 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)) 7 (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 7 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (logo_GETSET $2 ($0 $1)))))) (lambda (logo_FWRT logo_UL logo_ZA (#(lambda (#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0))))) 1 $0)) $0))) 7 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-row of squares",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))))) logo_IFTY $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 logo_UL (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 2) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 2) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA 4) (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 3) (#(#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) logo_UL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_DIVA logo_UA $0))) 4 (logo_MULL logo_UL 3) (#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1))))))) (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0))))) 3 ($0 2))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-concentric squares",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 $0)))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 $0)))) 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 $0)))) logo_IFTY $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 ($2 $0))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0)))))) (lambda (lambda (lambda ($2 ($2 $0))))) 2 $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ]
}