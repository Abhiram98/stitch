{
    "verbose": true,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 200,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.7298972189096036,
        "productions": [
            {
                "expression": "#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA)",
                "logProbability": -2.0527292323789945
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0))))",
                "logProbability": -2.110059721411722
            },
            {
                "expression": "#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0)))",
                "logProbability": -2.11005875995008
            },
            {
                "expression": "#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0)))",
                "logProbability": -2.006549687062894
            },
            {
                "expression": "#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))",
                "logProbability": -2.0703078215690036
            },
            {
                "expression": "#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0)))",
                "logProbability": -2.110057615570716
            },
            {
                "expression": "#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))))",
                "logProbability": -2.1100575194955975
            },
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))",
                "logProbability": -2.1011267077165483
            },
            {
                "expression": "#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4))))",
                "logProbability": -2.1100575185202675
            },
            {
                "expression": "#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4))",
                "logProbability": -1.9664987854202929
            },
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY))",
                "logProbability": -2.0494328967038324
            },
            {
                "expression": "#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0)))))))",
                "logProbability": -2.109821226343517
            },
            {
                "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0))))",
                "logProbability": -2.0437124024162103
            },
            {
                "expression": "#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0)))))))",
                "logProbability": -1.8746017254213996
            },
            {
                "expression": "#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0))))",
                "logProbability": -2.049294311824652
            },
            {
                "expression": "#(lambda (logo_FWRT logo_UL logo_UA $0))",
                "logProbability": -1.8078889884129317
            },
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0)))",
                "logProbability": -1.95466837548196
            },
            {
                "expression": "#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)))",
                "logProbability": -1.8609650641386057
            },
            {
                "expression": "#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0)))",
                "logProbability": -2.014816864849543
            },
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0)))",
                "logProbability": -2.0034379579676864
            },
            {
                "expression": "#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA)",
                "logProbability": -1.7842913460455896
            },
            {
                "expression": "#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL)",
                "logProbability": -2.1100575185202675
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0)))))))",
                "logProbability": -2.097788835776624
            },
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0)))",
                "logProbability": -2.0249713467432287
            },
            {
                "expression": "#(logo_DIVA logo_UA 4)",
                "logProbability": -0.23399988018716744
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0)))))))",
                "logProbability": -2.111723532713359
            },
            {
                "expression": "#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0)))))",
                "logProbability": -2.1309736496892424
            },
            {
                "expression": "logo_UA",
                "logProbability": -0.22637470595090914
            },
            {
                "expression": "logo_UL",
                "logProbability": -0.5681930634065635
            },
            {
                "expression": "logo_ZA",
                "logProbability": -0.3150676220541646
            },
            {
                "expression": "logo_ZL",
                "logProbability": -0.6726922718995163
            },
            {
                "expression": "logo_DIVA",
                "logProbability": -0.21896907356576634
            },
            {
                "expression": "logo_MULA",
                "logProbability": -0.32307050845020546
            },
            {
                "expression": "logo_DIVL",
                "logProbability": -0.7585770885817924
            },
            {
                "expression": "logo_MULL",
                "logProbability": -0.6498441710127776
            },
            {
                "expression": "logo_ADDA",
                "logProbability": -0.33361209480941323
            },
            {
                "expression": "logo_SUBA",
                "logProbability": -0.3260210795224556
            },
            {
                "expression": "logo_PT",
                "logProbability": -2.1745960396578385
            },
            {
                "expression": "logo_FWRT",
                "logProbability": -2.0777943095092257
            },
            {
                "expression": "logo_GETSET",
                "logProbability": -2.1745936899123026
            },
            {
                "expression": "logo_IFTY",
                "logProbability": -1.3842991944228173
            },
            {
                "expression": "logo_epsA",
                "logProbability": -0.31751249110835555
            },
            {
                "expression": "logo_epsL",
                "logProbability": -0.4024674701637063
            },
            {
                "expression": "logo_forLoop",
                "logProbability": -1.9723871162567383
            },
            {
                "expression": "0",
                "logProbability": -1.3638228711640132
            },
            {
                "expression": "1",
                "logProbability": -1.2255053513189877
            },
            {
                "expression": "2",
                "logProbability": -0.9841594896454846
            },
            {
                "expression": "3",
                "logProbability": -0.9028598300010788
            },
            {
                "expression": "4",
                "logProbability": -1.0892470669612377
            },
            {
                "expression": "5",
                "logProbability": -0.9420195688724231
            },
            {
                "expression": "6",
                "logProbability": -1.1274770652946446
            },
            {
                "expression": "7",
                "logProbability": -1.1375002130885234
            },
            {
                "expression": "8",
                "logProbability": -1.2818180545188436
            },
            {
                "expression": "9",
                "logProbability": -1.3524882436830952
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon (*d 1l 2)",
            "programs": [
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 (logo_MULL (logo_DIVL logo_UL 2) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 4)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 4 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 4 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon (*d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 0 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 (logo_MULL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 (logo_MULL (logo_DIVL logo_UL 2) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 (logo_MULL logo_UL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 (logo_MULL logo_UL 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon 1l slanted 3",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 8 logo_UL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 6",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_ZA (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 9",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 9 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4) 9 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 8 (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 7 logo_UA logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 9 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 9 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 3 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 3 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 (logo_MULL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 3 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 3 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 7 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 7 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 7 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 1 logo_epsL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 logo_UA logo_epsL $0))) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_epsL $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 logo_epsA logo_epsL $0))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 7",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_epsL $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 logo_epsA logo_epsL $0))) 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 6",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_DIVL logo_epsL 2) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 7 (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 2 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 2 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 0 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_epsA (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 5) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_MULL logo_epsL 2) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 6) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_MULL logo_epsL 3) 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) $1 $0))) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 5 (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) $1 $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-circle flower l=2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 2 $0)) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_DIVL (logo_MULL logo_epsL 4) 2) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_MULL logo_epsL 2) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_MULL logo_epsL 2) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_MULL logo_epsL 2) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-circle flower l=3",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 3 $0)) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_MULL logo_epsL 3) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 3 $0)) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 1 (lambda (lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 1 (lambda (lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 1 (lambda (lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 circles",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 3 (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 3 lines",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 1 logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle next to square",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to square",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 dashes",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 6 semicircles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 2 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 6 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 6 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 6 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 1 logo_UL $0))) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 1 $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) logo_epsL 1 $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_DIVL logo_epsL 2) 4) $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL (logo_MULL logo_epsL 4) 2) $0)) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_DIVL logo_epsL 2) 2) $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL logo_IFTY) $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 1) $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL logo_IFTY) $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 1 logo_UL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 4 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 4 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 4 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 4 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 4 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0))) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-spiral snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 $0)) 5 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 1 $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) logo_epsL 1 $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 0 $0))) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL logo_IFTY) $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_DIVL logo_epsL 2) 2) $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 1) $0)) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 $0)) 5 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 1 logo_UL $0))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 6 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 6 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 1) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL logo_IFTY) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 1 logo_UL $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 $0)))) 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 0 $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)) 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)) 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 1) $0)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_DIVL logo_epsL 2) 2) $0)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL logo_IFTY) $0)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))) 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-row of squares",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 3 (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 3 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 3 (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2x2 grid",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted squares",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 4 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 4 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 5 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-gon 1l slanted 8",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 logo_UL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 logo_UL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 logo_epsA logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 3 logo_UL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-gon (*d 1d 3)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 logo_UL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 (logo_MULL logo_epsL logo_IFTY) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 5 (logo_MULL logo_UL 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-gon (*d 1d 2) slanted 5",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 (logo_MULL logo_UL 2) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 (logo_MULL logo_UL 2) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA 8 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 8 logo_epsA logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 6 (logo_MULL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-gon 1l",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 logo_UL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 (logo_MULL logo_epsL logo_IFTY) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 7 (logo_MULL logo_UL 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "8-gon (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 8 (logo_DIVL logo_UL 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 8 (logo_DIVL logo_UL 2) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 8 (logo_DIVL logo_UL 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 8 (logo_MULL (logo_MULL logo_epsL 2) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 8 (logo_MULL (logo_MULL logo_epsL 5) 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "upwards",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4) 2 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL (logo_SUBA logo_UA #(logo_DIVA logo_UA 4)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL (logo_SUBA logo_ZA #(logo_DIVA logo_UA 4)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL (logo_MULA #(logo_DIVA logo_UA 4) 3) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right angle epsilon",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) (logo_MULL logo_epsL 1) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 (logo_SUBA #(logo_DIVA logo_UA 4) logo_UA) logo_epsL $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line segment",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL #(logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square slanted by 2pi/3",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (logo_DIVA logo_UA 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA #(logo_DIVA logo_UA 4) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (logo_DIVA logo_UA 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "semicircle slanted by 2pi/5",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 7 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 8 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 7 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 7 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 4 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral slanted by 2pi/6",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL (logo_DIVA #(logo_DIVA logo_UA 4) 3) 2 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 (logo_DIVA #(logo_DIVA logo_UA 4) 3) logo_ZL (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_DIVA logo_UA 6) 1 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL (logo_DIVA #(logo_DIVA logo_UA 4) 6) 4 (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Hook slanted by 2pi/7",
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 4) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL 5) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 4) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_MULL logo_epsL 2) 2) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT (logo_MULL logo_epsL 0) (logo_DIVA logo_UA 7) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 4) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "slanted line",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (logo_FWRT (logo_MULL logo_UL 3) logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (logo_FWRT (logo_MULL logo_UL 3) #(logo_DIVA logo_UA 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (logo_FWRT (logo_MULL logo_UL 3) logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 1 (logo_MULL logo_UL 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 7",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 7 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "Greek spiral 8",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 8 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 8 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4) 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 8 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 3 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 5 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "smooth spiral 4 slanted by 2pi/2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 0 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 4 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 5 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 5 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 5 2 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 5 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 5 2 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "star 9",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 9 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 9 4 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 9 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 9 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $1 (logo_MULA (logo_DIVA logo_UA $1) $0) (logo_MULL logo_UL 4)))) 9 5 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.1",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 1.2",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 0 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) logo_IFTY (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "leaf iteration 2.2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "flower 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) $0)) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL) $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) 4 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "staircase 5",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 0 $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 0 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 2 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "blocks zigzag 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) (#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 3 #(logo_DIVA logo_UA 4) logo_UL (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 1 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 4 (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_ZL logo_epsA 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 2 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 3) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_MULL logo_epsL 1) 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL (logo_MULL logo_epsL 3) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 4 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 4 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "left semicircle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 5) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 5) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL logo_UL 4) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 5",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "right semicircle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 6 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 6 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle of size 6",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5 enclosed circles",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $1) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) $1 $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) $1 $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) $1 $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle flower l=4",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_MULL logo_epsL 4) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_DIVL logo_UL 5) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 4 $0)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_MULL logo_epsL 4) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_MULL logo_epsL 4) 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-circle flower l=1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) logo_epsL 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) logo_epsL 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) logo_epsL 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_MULL logo_epsL 1) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (logo_DIVL logo_epsL 1) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-semicircle sequence L=1",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "2-semicircle sequence L=2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "1-semicircle sequence L=3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL $1) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_MULL logo_epsL $0))) $1 $0)))) 3 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 circles",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 2 lines",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_FWRT logo_UL logo_UA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3 dashed lines of size (/d 1d 2)",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL logo_UA 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL logo_UA 5 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL logo_ZA 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL logo_ZA 5 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_FWRT (logo_DIVL logo_UL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "broken circle",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to semicircle",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 1) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "circle next to line",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "line next to circle",
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (logo_FWRT logo_UL logo_UA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 4 dashes",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 2 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "row of 5 semicircles",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 5 (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-spiral snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 $0)) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 $0)) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_epsL (logo_MULA logo_epsA $0) logo_IFTY)) 2 $0)) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-square dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 3 (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "3-Greek snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 $0)) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 $0)) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4)) 3 $0)) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_FWRT (logo_MULL $4 $1) $3 $0))))))) logo_UL #(logo_DIVA logo_UA 4) 3 $0)) 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_FWRT logo_UL logo_UA $0))) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 5 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 5 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-close large semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 2) $0)) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_DIVL (logo_MULL logo_epsL 6) 3) $0)) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) 5 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) 5 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (logo_FWRT logo_UL logo_UA (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0))) 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 6 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-lonely circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) $0)) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) logo_epsL $0))) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-close semicircle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_epsL $0)) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) (logo_MULL logo_epsL 1) $0)) 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "6-double dashed snowflake",
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 6 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))))) 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-empty snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)) 7 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (logo_FWRT logo_UL logo_UA $0)) 7 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-circle snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 7 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 7 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT $4 logo_epsA $0))) $0))))) (logo_MULL logo_epsL $0))) 1 $0))) $1 $0))) 7 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "7-square snowflake",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 7 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 7 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (logo_forLoop $0 (lambda (lambda (logo_GETSET $3 (logo_FWRT logo_ZL (logo_DIVA logo_UA $2) $0))))))) (lambda (#(lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))) $1 $0))) 7 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "4-row of squares",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_GETSET $3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0)))) 4 (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 1",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $0 (logo_DIVA logo_UA $0))) 4 logo_UL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) logo_UL $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 2",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 2 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "square of size 3",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) 3 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "task": "5-concentric squares",
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) (#(lambda (logo_FWRT logo_UL logo_UA $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) (#(logo_PT (lambda (logo_FWRT logo_UL logo_UA $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $0))) $1 $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ]
}