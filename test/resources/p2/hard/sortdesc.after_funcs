def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

lessthan = [0]
lessthan[0] = inject_big(create_closure(def __func1(a,b,free_vars_1):
	return a == 0Trueb == 0Falseget_fun_ptr(free_vars_1[0][0])(a + (- 1),b + (- 1),get_free_vars(free_vars_1[0][0]))
,[lessthan]))
sort = inject_big(create_closure(def __func2(l,len,free_vars_2):
	j = 0
	while (j != len + (- 1)):
		if get_fun_ptr(free_vars_2[0][0])(l[j],l[j + 1],get_free_vars(free_vars_2[0][0])):
			tmp = l[j]
			l[j] = l[j + 1]
			l[j + 1] = tmp
			j = - 1
		else:
			x = 0
		
		j = j + 1
	
	return l
,[lessthan]))
x = [10, 11, 8, 9, 5, 4]
len = 6
print(get_fun_ptr(sort)(x,len,get_free_vars(sort)))