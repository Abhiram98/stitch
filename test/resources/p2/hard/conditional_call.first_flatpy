def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_x,free_vars_1):
	temp_6 = inject_bool(1)
	_temp_0 = _x == temp_6
	return _temp_0

temp_7 = []
temp_8 = create_closure(__func1,temp_7)
is_true = inject_big(temp_8)
def __func2(free_vars_2):
	temp_9 = inject_bool(1)
	return temp_9

temp_10 = []
temp_11 = create_closure(__func2,temp_10)
_true_fun = inject_big(temp_11)
temp_12 = eval(input())
_temp_1 = temp_12
_temp_5 = is_true(_temp_1)
temp_21 = is_true(_temp_5)
if temp_21:
	temp_13 = get_fun_ptr(_true_fun)
	temp_14 = get_free_vars(_true_fun)
	_temp_2 = temp_13(temp_14)
	print(_temp_2)
else:
	temp_15 = get_fun_ptr(_true_fun)
	temp_16 = get_free_vars(_true_fun)
	_temp_3 = temp_15(temp_16)
	temp_17 = is_true(_temp_3)
	temp_20 = is_true(temp_17)
	if temp_20:
		temp_18 = inject_int(0)
		_temp_4 = inject_bool(temp_18)
	else:
		temp_19 = inject_int(1)
		_temp_4 = inject_bool(temp_19)
	
	print(_temp_4)
