def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func2(_f1,_g1,free_vars_2):
	temp_42 = inject_big(create_list(inject_int(1)))
	set_subscript(temp_42,inject_int(0),_g1)
	_g1 = temp_42
	def __func1(_x3,free_vars_1):
		temp_7 = inject_int(1)
		temp_8 = inject_int(0)
		temp_9 = get_subscript(free_vars_1,temp_7)
		temp_10 = get_subscript(temp_9,temp_8)
		temp_11 = inject_int(1)
		temp_12 = inject_int(0)
		temp_13 = get_subscript(free_vars_1,temp_11)
		temp_14 = get_subscript(temp_13,temp_12)
		temp_15 = get_fun_ptr(temp_10)
		temp_16 = get_free_vars(temp_14)
		_temp_0 = temp_15(_x3,temp_16)
		temp_17 = inject_int(0)
		temp_18 = inject_int(0)
		temp_19 = get_subscript(free_vars_1,temp_17)
		temp_20 = get_subscript(temp_19,temp_18)
		temp_21 = inject_int(0)
		temp_22 = inject_int(0)
		temp_23 = get_subscript(free_vars_1,temp_21)
		temp_24 = get_subscript(temp_23,temp_22)
		temp_25 = get_fun_ptr(temp_20)
		temp_26 = get_free_vars(temp_24)
		_temp_1 = temp_25(_temp_0,temp_26)
		return _temp_1
	
	temp_43 = inject_big(create_list(inject_int(2)))
	set_subscript(temp_43,inject_int(0),_f1)
	set_subscript(temp_43,inject_int(1),_g1)
	temp_27 = temp_43
	temp_28 = create_closure(__func1,temp_27)
	__compose = inject_big(temp_28)
	return __compose

temp_44 = inject_big(create_list(inject_int(0)))
temp_29 = temp_44
temp_30 = create_closure(__func2,temp_29)
_compose = inject_big(temp_30)
def __func3(_x1,free_vars_3):
	temp_31 = inject_int(1)
	if is_int(_x1):
		if is_int(temp_31):
			_temp_2 = inject_int((project_int(_x1)) + (project_int(temp_31)))
		else:
			if is_big(temp_31):
				error_pyobj()
			else:
				if is_bool(temp_31):
					_temp_2 = inject_int((project_int(_x1)) + (project_bool(temp_31)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(_x1):
			if is_int(temp_31):
				error_pyobj()
			else:
				if is_big(temp_31):
					_temp_2 = inject_big(add(project_big(_x1),project_big(temp_31)))
				else:
					if is_bool(temp_31):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(_x1):
				if is_int(temp_31):
					_temp_2 = inject_int((project_bool(_x1)) + (project_int(temp_31)))
				else:
					if is_big(temp_31):
						error_pyobj()
					else:
						if is_bool(temp_31):
							_temp_2 = inject_bool((project_bool(_x1)) + (project_bool(temp_31)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	_temp_2 = _temp_2
	return _temp_2

temp_45 = inject_big(create_list(inject_int(0)))
temp_32 = temp_45
temp_33 = create_closure(__func3,temp_32)
_f = inject_big(temp_33)
def __func4(_x2,free_vars_4):
	temp_34 = inject_int(1)
	_temp_3 = - temp_34
	if is_int(_x2):
		if is_int(_temp_3):
			_temp_4 = inject_int((project_int(_x2)) + (project_int(_temp_3)))
		else:
			if is_big(_temp_3):
				error_pyobj()
			else:
				if is_bool(_temp_3):
					_temp_4 = inject_int((project_int(_x2)) + (project_bool(_temp_3)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(_x2):
			if is_int(_temp_3):
				error_pyobj()
			else:
				if is_big(_temp_3):
					_temp_4 = inject_big(add(project_big(_x2),project_big(_temp_3)))
				else:
					if is_bool(_temp_3):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(_x2):
				if is_int(_temp_3):
					_temp_4 = inject_int((project_bool(_x2)) + (project_int(_temp_3)))
				else:
					if is_big(_temp_3):
						error_pyobj()
					else:
						if is_bool(_temp_3):
							_temp_4 = inject_bool((project_bool(_x2)) + (project_bool(_temp_3)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	_temp_4 = _temp_4
	return _temp_4

temp_46 = inject_big(create_list(inject_int(0)))
temp_35 = temp_46
temp_36 = create_closure(__func4,temp_35)
_g = inject_big(temp_36)
temp_37 = get_fun_ptr(_compose)
temp_38 = get_free_vars(_compose)
_temp_5 = temp_37(_f,_g,temp_38)
temp_39 = get_fun_ptr(_temp_5)
temp_40 = inject_int(23)
temp_41 = get_free_vars(_temp_5)
_temp_6 = temp_39(temp_40,temp_41)
print(_temp_6)