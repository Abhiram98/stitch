compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/hard/nested_lambda_call.py
valid p0
IN UNPARSE
<ast.Lambda object at 0x7f748579a230>
IN UNPARSE
<ast.arguments object at 0x7f748579a200>
IN UNPARSE
<ast.Lambda object at 0x7f748579a140>
IN UNPARSE
<ast.arguments object at 0x7f748579a110>
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  arg_i
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_2': set(), 'lambda_1': {'x'}}
fba.bound_vars={'__main__': {'lambda_2', 'nl', 'temp_0'}, 'lambda_2': {'x', 'lambda_1'}, 'lambda_1': {'y'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_2': set(), 'lambda_1': {'x'}}
fba.bound_vars={'__main__': {'lambda_2', 'nl', 'temp_0'}, 'lambda_2': {'x', 'lambda_1'}, 'lambda_1': {'y'}}
all_free=['x']
Before FLATTENING STAGE 1
lambda_2
inject_big
create_closure
x
x
lambda_1
inject_big
create_closure
free_vars_1
y
x
get_fun_ptr
lambda_1
get_free_vars
lambda_1
nl
lambda_2
temp_0
get_fun_ptr
nl
get_free_vars
nl
print
temp_0
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  left
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
collecting functiondef
collecting functiondef
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f748579a3b0>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f74855c1570>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74855c1390>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f748579a8c0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74855c1420>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f7485611630>
From visit_Module, node in node.body
<ast.Assign object at 0x7f748579ab60>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f7485611cc0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f748579a2c0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f7485611570>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74855c14e0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f7485611240>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74855c1600>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f7485611660>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74855c16f0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f7485611c90>
From visit_Module, node in node.body
<ast.Assign object at 0x7f7485799d20>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f7485611cf0>
From visit_Module, node in node.body
<ast.Expr object at 0x7f748579a260>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f7485611d20>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_1)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_20)))], BB335:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_53)))], BB2:
)
dict_keys(['__func1', '__func2', 'module']) = 
Liveness took 3 loops
total_loop_time=0.00019884109497070312
per_basic_block_time=0.00019431114196777344
update_parent_time=9.5367431640625e-07
Liveness time taken: 0.00023293495178222656
Int graph time taken: 0.0001399517059326172
coloring done
Coloring time taken: 0.0003178119659423828
stack_size=0
done compiling
liveness_time=0.00023293495178222656
interference_time=0.0001399517059326172
coloring_time=0.0003178119659423828
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func2 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %ebx \npushl %ebx \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl $23 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %ebx \ncall get_free_vars\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %esi \ncall *%edi\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_1))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_2))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_1), Variable(temp_3))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_3), Variable(temp_2), Variable(temp_4))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_4), Variable(temp_49))), IrStat((Instruction(if), Variable(temp_49), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_31))), IrStat((Instruction(if), Variable(temp_31), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_4), Variable(temp_23))), IrStat((Instruction(call), Keyword(project_int), Variable(_y), Variable(temp_24))), IrStat((Instruction(movl), Variable(temp_24), Variable(temp_64))), IrStat((Instruction(addl), Variable(temp_23), Variable(temp_64))), IrStat((Instruction(movl), Variable(temp_64), Variable(temp_25))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_25), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_30))), IrStat((Instruction(if), Variable(temp_30), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_67))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_29))), IrStat((Instruction(if), Variable(temp_29), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_4), Variable(temp_26))), IrStat((Instruction(call), Keyword(project_bool), Variable(_y), Variable(temp_27))), IrStat((Instruction(movl), Variable(temp_27), Variable(temp_71))), IrStat((Instruction(addl), Variable(temp_26), Variable(temp_71))), IrStat((Instruction(movl), Variable(temp_71), Variable(temp_28))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_28), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_73))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_4), Variable(temp_48))), IrStat((Instruction(if), Variable(temp_48), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_37))), IrStat((Instruction(if), Variable(temp_37), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_76))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_36))), IrStat((Instruction(if), Variable(temp_36), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_4), Variable(temp_32))), IrStat((Instruction(call), Keyword(project_big), Variable(_y), Variable(temp_33))), IrStat((Instruction(call), Keyword(add), Variable(temp_32), Variable(temp_33), Variable(temp_34))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_34), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_35))), IrStat((Instruction(if), Variable(temp_35), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_83))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_84))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_4), Variable(temp_47))), IrStat((Instruction(if), Variable(temp_47), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_46))), IrStat((Instruction(if), Variable(temp_46), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_4), Variable(temp_38))), IrStat((Instruction(call), Keyword(project_int), Variable(_y), Variable(temp_39))), IrStat((Instruction(movl), Variable(temp_39), Variable(temp_89))), IrStat((Instruction(addl), Variable(temp_38), Variable(temp_89))), IrStat((Instruction(movl), Variable(temp_89), Variable(temp_40))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_40), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_45))), IrStat((Instruction(if), Variable(temp_45), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_92))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_44))), IrStat((Instruction(if), Variable(temp_44), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_4), Variable(temp_41))), IrStat((Instruction(call), Keyword(project_bool), Variable(_y), Variable(temp_42))), IrStat((Instruction(movl), Variable(temp_42), Variable(temp_96))), IrStat((Instruction(addl), Variable(temp_41), Variable(temp_96))), IrStat((Instruction(movl), Variable(temp_96), Variable(temp_43))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_43), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_98))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_99))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(temp_5), Variable(temp_5))), IrStat((Instruction(return), Variable(temp_5)))]
compression possible BB104 & BB114
compression possible BB136 & BB140
compression possible BB129 & BB133
compression possible BB115 & BB119
compression possible BB178 & BB182
compression possible BB164 & BB168
compression possible BB157 & BB161
compression possible BB213 & BB217
compression possible BB206 & BB210
compression possible BB192 & BB196
compression possible BB187 & BB191
compression possible BB152 & BB156
compressing 0
Liveness took 5 loops
total_loop_time=0.0030596256256103516
per_basic_block_time=0.002860546112060547
update_parent_time=0.00011444091796875
Liveness time taken: 0.0034804344177246094
unknown instruction->113:return,temp_5
Int graph time taken: 0.0008823871612548828
coloring done
Coloring time taken: 0.0022957324981689453
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%edi %edi
done compiling
liveness_time=0.0034804344177246094
interference_time=0.0008823871612548828
coloring_time=0.0022957324981689453
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %esi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl %ebx \npushl %esi \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl %esi \ncall is_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl 8(%ebp) \ncall is_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else101 \nif101: \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \naddl %ebx, %eax \npushl %eax \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \njmp endif101 \nelse101: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else102 \nif102: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif102 \nelse102: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl %esi \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \njmp endif103 \nelse103: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif103: \nendif102: \nendif101: \njmp endif100 \nelse100: \npushl %esi \ncall is_big\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl 8(%ebp) \ncall is_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else105 \nif105: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif105 \nelse105: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else106 \nif106: \npushl %esi \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \njmp endif106 \nelse106: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else107 \nif107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif107 \nelse107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif107: \nendif106: \nendif105: \njmp endif104 \nelse104: \npushl %esi \ncall is_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl 8(%ebp) \ncall is_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl %esi \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \njmp endif109 \nelse109: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else110 \nif110: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif110 \nelse110: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl %esi \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %edi \naddl $4, %esp \njmp endif111 \nelse111: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif111: \nendif110: \nendif109: \njmp endif108 \nelse108: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif108: \nendif104: \nendif100: \nmovl %edi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func2
[IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_20))), IrStat((Instruction(call), Keyword(create_list), Variable(temp_20), Variable(temp_21))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_21), Variable(temp_17))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_22))), IrStat((Instruction(call), Keyword(set_subscript), Variable(temp_17), Variable(temp_22), Variable(_x), Variable(temp_60))), IrStat((Instruction(movl), Variable(temp_17), Variable(_x))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_50))), IrStat((Instruction(call), Keyword(create_list), Variable(temp_50), Variable(temp_51))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_51), Variable(temp_18))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_52))), IrStat((Instruction(call), Keyword(set_subscript), Variable(temp_18), Variable(temp_52), Variable(_x), Variable(temp_65))), IrStat((Instruction(movl), Variable(temp_18), Variable(temp_6))), IrStat((Instruction(call), Keyword(create_closure), Immediate($__func1), Variable(temp_6), Variable(temp_7))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_7), Variable(_lambda_1))), IrStat((Instruction(call), Keyword(get_fun_ptr), Variable(_lambda_1), Variable(temp_8))), IrStat((Instruction(call), Keyword(inject_int), Immediate($2), Variable(temp_9))), IrStat((Instruction(call), Keyword(get_free_vars), Variable(_lambda_1), Variable(temp_10))), IrStat((Instruction(call), Variable(temp_8), Variable(temp_9), Variable(temp_10), Variable(temp_11))), IrStat((Instruction(return), Variable(temp_11)))]
Liveness took 3 loops
total_loop_time=0.0002772808074951172
per_basic_block_time=0.00027370452880859375
update_parent_time=7.152557373046875e-07
Liveness time taken: 0.00029468536376953125
unknown instruction->18:return,temp_11
Int graph time taken: 0.00021195411682128906
coloring done
Coloring time taken: 0.00047779083251953125
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%edi %edi
done compiling
liveness_time=0.00029468536376953125
interference_time=0.00021195411682128906
coloring_time=0.00047779083251953125
code = '\n__func2: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl 8(%ebp) \npushl %ebx \npushl %edi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %edi, 8(%ebp) \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \npushl %edi \npushl %ebx \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %ebx, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \ncall get_fun_ptr\nmovl %eax, %esi \naddl $4, %esp \npushl $2 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall get_free_vars\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall *%esi\nmovl %eax, %edi \naddl $8, %esp \nmovl %edi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
