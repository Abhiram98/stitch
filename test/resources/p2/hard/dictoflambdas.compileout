compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/hard/dictoflambdas.py
valid p0
IN UNPARSE
<ast.Lambda object at 0x7f74c14467d0>
IN UNPARSE
<ast.arguments object at 0x7f74c14467a0>
IN UNPARSE
<ast.Lambda object at 0x7f74c1446770>
IN UNPARSE
<ast.arguments object at 0x7f74c14466b0>
Visiting BinOp
Visiting BinOp
Visiting UnaryOp
flattening node's  right
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_2': {'temp_0'}, 'lambda_1': set()}
fba.bound_vars={'__main__': {'temp_1', 'temp_2', 'temp_4', 'lambda_1', 'temp_3', 'x', 'lambda_2', 'temp_0'}, 'lambda_2': {'x'}, 'lambda_1': {'x'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_2': {'temp_0'}, 'lambda_1': set()}
fba.bound_vars={'__main__': {'temp_1', 'temp_2', 'temp_4', 'lambda_1', 'temp_3', 'x', 'lambda_2', 'temp_0'}, 'lambda_2': {'x'}, 'lambda_1': {'x'}}
all_free=['temp_0']
Before FLATTENING STAGE 1
temp_0
lambda_2
inject_big
create_closure
x
free_vars_1
temp_0
lambda_1
inject_big
create_closure
x
temp_0
x
lambda_1
lambda_2
temp_1
x
temp_2
get_fun_ptr
temp_1
get_free_vars
temp_1
print
temp_2
temp_3
x
temp_4
get_fun_ptr
temp_3
get_free_vars
temp_3
print
temp_4
visiting Call
flattening node's  to_flat
visiting Call
visiting Call
Visiting BinOp
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  right
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
Visiting BinOp
visiting Call
flattening node's  right
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
flattening node's  slice
Visiting UnaryOp
visiting Call
flattening node's  operand
visiting Call
visiting Call
flattening node's  to_flat
flattening node's  to_flat
visiting Call
flattening node's  slice
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  slice
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
collecting functiondef
collecting functiondef
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1271510>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1446230>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1446ce0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273fd0>
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f74c1446b90>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f74c1273e80>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1272c50>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273e50>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1272ce0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c12e9b10>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1445ff0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c12e98a0>
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f74c1446b00>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f74c12e9b70>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273070>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1320ee0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273100>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1320ca0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1447160>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1320c40>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c12731f0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1320d30>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c12732b0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1320d60>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1446020>
RETURN: From visit_Module, node in node.body
<ast.Call object at 0x7f74c1320bb0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c12733d0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c13227a0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c12734c0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1320f10>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1446920>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c13223b0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273580>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1321210>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1445f30>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c13226e0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273670>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c13226b0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273790>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1322380>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273880>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1322350>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1445e70>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1322320>
From visit_Module, node in node.body
<ast.Expr object at 0x7f74c14468c0>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f74c13222f0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273940>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c13211e0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1445d20>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c13210c0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273a30>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1321090>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273b50>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1321060>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1273c40>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1321000>
From visit_Module, node in node.body
<ast.Assign object at 0x7f74c14469e0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f74c1320fd0>
From visit_Module, node in node.body
<ast.Expr object at 0x7f74c1446470>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f74c1320fa0>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting UnaryOp
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_6)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_13)))], BB335:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_5)))], BB2:
)
dict_keys(['__func1', '__func2', 'module']) = 
Liveness took 3 loops
total_loop_time=0.0018246173858642578
per_basic_block_time=0.0018084049224853516
update_parent_time=5.4836273193359375e-06
Liveness time taken: 0.0018668174743652344
Int graph time taken: 0.0018279552459716797
coloring done
Coloring time taken: 0.004215240478515625
Some variable spilled
But instructions ok
last_var =Variable(_lambda_2)
stack_size=8
done compiling
liveness_time=0.0018668174743652344
interference_time=0.0018279552459716797
coloring_time=0.004215240478515625
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $8, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %esi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \npushl %edi \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \npushl %edi \npushl %ebx \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %ebx, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, -8(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func2 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \nnegl %eax \npushl %eax \npushl %ebx \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $2 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \ncall create_dict\nmovl %eax, %esi \naddl $0, %esp \npushl %esi \ncall inject_big\nmovl %eax, %esi \naddl $4, %esp \npushl -8(%ebp) \npushl %ebx \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl -4(%ebp) \npushl %edi \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %esi, %ebx \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall get_fun_ptr\nmovl %eax, %esi \naddl $4, %esp \npushl $23 \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl -4(%ebp) \ncall *%esi\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npushl $2 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall get_fun_ptr\nmovl %eax, %esi \naddl $4, %esp \npushl $23 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall *%esi\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_6))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_7))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_6), Variable(temp_8))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_8), Variable(temp_7), Variable(temp_9))), IrStat((Instruction(call), Keyword(is_int), Variable(_x), Variable(temp_62))), IrStat((Instruction(if), Variable(temp_62), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_9), Variable(temp_44))), IrStat((Instruction(if), Variable(temp_44), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_36))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_9), Variable(temp_37))), IrStat((Instruction(movl), Variable(temp_37), Variable(temp_106))), IrStat((Instruction(addl), Variable(temp_36), Variable(temp_106))), IrStat((Instruction(movl), Variable(temp_106), Variable(temp_38))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_38), Variable(temp_10))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_9), Variable(temp_43))), IrStat((Instruction(if), Variable(temp_43), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_109))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_9), Variable(temp_42))), IrStat((Instruction(if), Variable(temp_42), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_39))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_9), Variable(temp_40))), IrStat((Instruction(movl), Variable(temp_40), Variable(temp_113))), IrStat((Instruction(addl), Variable(temp_39), Variable(temp_113))), IrStat((Instruction(movl), Variable(temp_113), Variable(temp_41))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_41), Variable(temp_10))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_115))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_big), Variable(_x), Variable(temp_61))), IrStat((Instruction(if), Variable(temp_61), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_9), Variable(temp_50))), IrStat((Instruction(if), Variable(temp_50), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_118))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_9), Variable(temp_49))), IrStat((Instruction(if), Variable(temp_49), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(call), Keyword(project_big), Variable(_x), Variable(temp_45))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_9), Variable(temp_46))), IrStat((Instruction(call), Keyword(add), Variable(temp_45), Variable(temp_46), Variable(temp_47))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_47), Variable(temp_10))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_9), Variable(temp_48))), IrStat((Instruction(if), Variable(temp_48), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_125))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_126))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_bool), Variable(_x), Variable(temp_60))), IrStat((Instruction(if), Variable(temp_60), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_9), Variable(temp_59))), IrStat((Instruction(if), Variable(temp_59), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_51))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_9), Variable(temp_52))), IrStat((Instruction(movl), Variable(temp_52), Variable(temp_131))), IrStat((Instruction(addl), Variable(temp_51), Variable(temp_131))), IrStat((Instruction(movl), Variable(temp_131), Variable(temp_53))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_53), Variable(temp_10))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_9), Variable(temp_58))), IrStat((Instruction(if), Variable(temp_58), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_134))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_9), Variable(temp_57))), IrStat((Instruction(if), Variable(temp_57), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_54))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_9), Variable(temp_55))), IrStat((Instruction(movl), Variable(temp_55), Variable(temp_138))), IrStat((Instruction(addl), Variable(temp_54), Variable(temp_138))), IrStat((Instruction(movl), Variable(temp_138), Variable(temp_56))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_56), Variable(temp_10))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_140))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_141))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(temp_10), Variable(temp_10))), IrStat((Instruction(return), Variable(temp_10)))]
compression possible BB104 & BB114
compression possible BB136 & BB140
compression possible BB129 & BB133
compression possible BB115 & BB119
compression possible BB178 & BB182
compression possible BB164 & BB168
compression possible BB157 & BB161
compression possible BB213 & BB217
compression possible BB206 & BB210
compression possible BB192 & BB196
compression possible BB187 & BB191
compression possible BB152 & BB156
compressing 0
Liveness took 5 loops
total_loop_time=0.006278276443481445
per_basic_block_time=0.005766630172729492
update_parent_time=0.00028133392333984375
Liveness time taken: 0.006930351257324219
unknown instruction->113:return,temp_10
Int graph time taken: 0.002248525619506836
coloring done
Coloring time taken: 0.004691362380981445
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%esi %esi
done compiling
liveness_time=0.006930351257324219
interference_time=0.002248525619506836
coloring_time=0.004691362380981445
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %ebx \naddl $8, %esp \npushl %edi \npushl %ebx \ncall get_subscript\nmovl %eax, %ebx \naddl $8, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif101 \nelse101: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif102 \nelse102: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif103 \nelse103: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif103: \nendif102: \nendif101: \njmp endif100 \nelse100: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif105 \nelse105: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %esi \naddl $4, %esp \njmp endif106 \nelse106: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif107 \nelse107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif107: \nendif106: \nendif105: \njmp endif104 \nelse104: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif109 \nelse109: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif110 \nelse110: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif111 \nelse111: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif111: \nendif110: \nendif109: \njmp endif108 \nelse108: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif108: \nendif104: \nendif100: \nmovl %esi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func2
[IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_13))), IrStat((Instruction(call), Keyword(is_int), Variable(_x), Variable(temp_92))), IrStat((Instruction(if), Variable(temp_92), Keyword(if213), Keyword(else213))), IrStat((Instruction(label), Keyword(if213))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_13), Variable(temp_74))), IrStat((Instruction(if), Variable(temp_74), Keyword(if214), Keyword(else214))), IrStat((Instruction(label), Keyword(if214))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_66))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_13), Variable(temp_67))), IrStat((Instruction(movl), Variable(temp_67), Variable(temp_103))), IrStat((Instruction(addl), Variable(temp_66), Variable(temp_103))), IrStat((Instruction(movl), Variable(temp_103), Variable(temp_68))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_68), Variable(temp_14))), IrStat((Instruction(jmp), Keyword(endif214))), IrStat((Instruction(label), Keyword(else214))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_13), Variable(temp_73))), IrStat((Instruction(if), Variable(temp_73), Keyword(if215), Keyword(else215))), IrStat((Instruction(label), Keyword(if215))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_106))), IrStat((Instruction(jmp), Keyword(endif215))), IrStat((Instruction(label), Keyword(else215))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_13), Variable(temp_72))), IrStat((Instruction(if), Variable(temp_72), Keyword(if216), Keyword(else216))), IrStat((Instruction(label), Keyword(if216))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_69))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_13), Variable(temp_70))), IrStat((Instruction(movl), Variable(temp_70), Variable(temp_110))), IrStat((Instruction(addl), Variable(temp_69), Variable(temp_110))), IrStat((Instruction(movl), Variable(temp_110), Variable(temp_71))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_71), Variable(temp_14))), IrStat((Instruction(jmp), Keyword(endif216))), IrStat((Instruction(label), Keyword(else216))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_112))), IrStat((Instruction(label), Keyword(endif216))), IrStat((Instruction(label), Keyword(endif215))), IrStat((Instruction(label), Keyword(endif214))), IrStat((Instruction(jmp), Keyword(endif213))), IrStat((Instruction(label), Keyword(else213))), IrStat((Instruction(call), Keyword(is_big), Variable(_x), Variable(temp_91))), IrStat((Instruction(if), Variable(temp_91), Keyword(if217), Keyword(else217))), IrStat((Instruction(label), Keyword(if217))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_13), Variable(temp_80))), IrStat((Instruction(if), Variable(temp_80), Keyword(if218), Keyword(else218))), IrStat((Instruction(label), Keyword(if218))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_115))), IrStat((Instruction(jmp), Keyword(endif218))), IrStat((Instruction(label), Keyword(else218))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_13), Variable(temp_79))), IrStat((Instruction(if), Variable(temp_79), Keyword(if219), Keyword(else219))), IrStat((Instruction(label), Keyword(if219))), IrStat((Instruction(call), Keyword(project_big), Variable(_x), Variable(temp_75))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_13), Variable(temp_76))), IrStat((Instruction(call), Keyword(add), Variable(temp_75), Variable(temp_76), Variable(temp_77))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_77), Variable(temp_14))), IrStat((Instruction(jmp), Keyword(endif219))), IrStat((Instruction(label), Keyword(else219))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_13), Variable(temp_78))), IrStat((Instruction(if), Variable(temp_78), Keyword(if220), Keyword(else220))), IrStat((Instruction(label), Keyword(if220))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_122))), IrStat((Instruction(jmp), Keyword(endif220))), IrStat((Instruction(label), Keyword(else220))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_123))), IrStat((Instruction(label), Keyword(endif220))), IrStat((Instruction(label), Keyword(endif219))), IrStat((Instruction(label), Keyword(endif218))), IrStat((Instruction(jmp), Keyword(endif217))), IrStat((Instruction(label), Keyword(else217))), IrStat((Instruction(call), Keyword(is_bool), Variable(_x), Variable(temp_90))), IrStat((Instruction(if), Variable(temp_90), Keyword(if221), Keyword(else221))), IrStat((Instruction(label), Keyword(if221))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_13), Variable(temp_89))), IrStat((Instruction(if), Variable(temp_89), Keyword(if222), Keyword(else222))), IrStat((Instruction(label), Keyword(if222))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_81))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_13), Variable(temp_82))), IrStat((Instruction(movl), Variable(temp_82), Variable(temp_128))), IrStat((Instruction(addl), Variable(temp_81), Variable(temp_128))), IrStat((Instruction(movl), Variable(temp_128), Variable(temp_83))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_83), Variable(temp_14))), IrStat((Instruction(jmp), Keyword(endif222))), IrStat((Instruction(label), Keyword(else222))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_13), Variable(temp_88))), IrStat((Instruction(if), Variable(temp_88), Keyword(if223), Keyword(else223))), IrStat((Instruction(label), Keyword(if223))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_131))), IrStat((Instruction(jmp), Keyword(endif223))), IrStat((Instruction(label), Keyword(else223))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_13), Variable(temp_87))), IrStat((Instruction(if), Variable(temp_87), Keyword(if224), Keyword(else224))), IrStat((Instruction(label), Keyword(if224))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_84))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_13), Variable(temp_85))), IrStat((Instruction(movl), Variable(temp_85), Variable(temp_135))), IrStat((Instruction(addl), Variable(temp_84), Variable(temp_135))), IrStat((Instruction(movl), Variable(temp_135), Variable(temp_86))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_86), Variable(temp_14))), IrStat((Instruction(jmp), Keyword(endif224))), IrStat((Instruction(label), Keyword(else224))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_137))), IrStat((Instruction(label), Keyword(endif224))), IrStat((Instruction(label), Keyword(endif223))), IrStat((Instruction(label), Keyword(endif222))), IrStat((Instruction(jmp), Keyword(endif221))), IrStat((Instruction(label), Keyword(else221))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_138))), IrStat((Instruction(label), Keyword(endif221))), IrStat((Instruction(label), Keyword(endif217))), IrStat((Instruction(label), Keyword(endif213))), IrStat((Instruction(movl), Variable(temp_14), Variable(temp_14))), IrStat((Instruction(return), Variable(temp_14)))]
compression possible BB337 & BB341
compression possible BB363 & BB367
compression possible BB356 & BB360
compression possible BB342 & BB346
compression possible BB405 & BB409
compression possible BB391 & BB395
compression possible BB384 & BB388
compression possible BB440 & BB444
compression possible BB433 & BB437
compression possible BB419 & BB423
compression possible BB414 & BB418
compression possible BB379 & BB383
compressing 0
Liveness took 5 loops
total_loop_time=0.0062787532806396484
per_basic_block_time=0.005757808685302734
update_parent_time=0.00028514862060546875
Liveness time taken: 0.006841182708740234
unknown instruction->110:return,temp_14
Int graph time taken: 0.0015463829040527344
coloring done
Coloring time taken: 0.004380702972412109
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%ebx %ebx
done compiling
liveness_time=0.006841182708740234
interference_time=0.0015463829040527344
coloring_time=0.004380702972412109
code = '\n__func2: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else213 \nif213: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else214 \nif214: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif214 \nelse214: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else215 \nif215: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif215 \nelse215: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else216 \nif216: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif216 \nelse216: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif216: \nendif215: \nendif214: \njmp endif213 \nelse213: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else217 \nif217: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else218 \nif218: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif218 \nelse218: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else219 \nif219: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \njmp endif219 \nelse219: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else220 \nif220: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif220 \nelse220: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif220: \nendif219: \nendif218: \njmp endif217 \nelse217: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else221 \nif221: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else222 \nif222: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif222 \nelse222: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else223 \nif223: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif223 \nelse223: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else224 \nif224: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif224 \nelse224: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif224: \nendif223: \nendif222: \njmp endif221 \nelse221: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif221: \nendif217: \nendif213: \nmovl %ebx, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
