def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_9 = inject_int(0)
temp_53 = inject_int(1)
temp_54 = create_list(temp_53)
temp_50 = inject_big(temp_54)
temp_55 = inject_int(0)
set_subscript(temp_50,temp_55,temp_9)
_prod = temp_50
temp_10 = inject_int(0)
def __func1(_a,_b,free_vars_1):
	temp_11 = inject_int(0)
	temp_78 = is_int(_b)
	if temp_78:
		temp_57 = is_int(temp_11)
		if temp_57:
			temp_56 = _b == temp_11
			_temp_3 = inject_bool(temp_56)
		
		temp_61 = is_bool(temp_11)
		if temp_61:
			temp_58 = project_int(_b)
			temp_59 = project_bool(temp_11)
			temp_60 = temp_58 == temp_59
			_temp_3 = inject_bool(temp_60)
		
		temp_62 = is_big(temp_11)
		if temp_62:
			_temp_3 = inject_bool(0)
		
	else:
		temp_77 = is_bool(_b)
		if temp_77:
			temp_66 = is_int(temp_11)
			if temp_66:
				temp_63 = project_bool(_b)
				temp_64 = project_int(temp_11)
				temp_65 = temp_63 == temp_64
				_temp_3 = inject_bool(temp_65)
			
			temp_68 = is_bool(temp_11)
			if temp_68:
				temp_67 = _b == temp_11
				_temp_3 = inject_bool(temp_67)
			
			temp_69 = is_big(temp_11)
			if temp_69:
				_temp_3 = inject_bool(0)
			
		else:
			temp_76 = is_big(_b)
			if temp_76:
				temp_70 = is_int(temp_11)
				if temp_70:
					_temp_3 = inject_bool(0)
				
				temp_71 = is_bool(temp_11)
				if temp_71:
					_temp_3 = inject_bool(0)
				
				temp_75 = is_big(temp_11)
				if temp_75:
					temp_72 = project_big(_b)
					temp_73 = project_big(temp_11)
					temp_74 = equal(temp_72,temp_73)
					_temp_3 = inject_bool(temp_74)
				
			
		
	
	_temp_3 = _temp_3
	temp_12 = is_true(_temp_3)
	temp_32 = is_true(temp_12)
	if temp_32:
		_temp_5 = inject_int(0)
	else:
		temp_13 = inject_int(1)
		_temp_0 = - temp_13
		temp_105 = is_int(_b)
		if temp_105:
			temp_87 = is_int(_temp_0)
			if temp_87:
				temp_79 = project_int(_b)
				temp_80 = project_int(_temp_0)
				temp_81 = temp_79 + temp_80
				_temp_1 = inject_int(temp_81)
			else:
				temp_86 = is_big(_temp_0)
				if temp_86:
					error_pyobj()
				else:
					temp_85 = is_bool(_temp_0)
					if temp_85:
						temp_82 = project_int(_b)
						temp_83 = project_bool(_temp_0)
						temp_84 = temp_82 + temp_83
						_temp_1 = inject_int(temp_84)
					else:
						error_pyobj()
					
				
			
		else:
			temp_104 = is_big(_b)
			if temp_104:
				temp_93 = is_int(_temp_0)
				if temp_93:
					error_pyobj()
				else:
					temp_92 = is_big(_temp_0)
					if temp_92:
						temp_88 = project_big(_b)
						temp_89 = project_big(_temp_0)
						temp_90 = add(temp_88,temp_89)
						_temp_1 = inject_big(temp_90)
					else:
						temp_91 = is_bool(_temp_0)
						if temp_91:
							error_pyobj()
						else:
							error_pyobj()
						
					
				
			else:
				temp_103 = is_bool(_b)
				if temp_103:
					temp_102 = is_int(_temp_0)
					if temp_102:
						temp_94 = project_bool(_b)
						temp_95 = project_int(_temp_0)
						temp_96 = temp_94 + temp_95
						_temp_1 = inject_int(temp_96)
					else:
						temp_101 = is_big(_temp_0)
						if temp_101:
							error_pyobj()
						else:
							temp_100 = is_bool(_temp_0)
							if temp_100:
								temp_97 = project_bool(_b)
								temp_98 = project_bool(_temp_0)
								temp_99 = temp_97 + temp_98
								_temp_1 = inject_bool(temp_99)
							else:
								error_pyobj()
							
						
					
				else:
					error_pyobj()
				
			
		
		_temp_1 = _temp_1
		temp_14 = inject_int(0)
		temp_15 = inject_int(0)
		temp_16 = get_subscript(free_vars_1,temp_14)
		temp_17 = get_subscript(temp_16,temp_15)
		temp_18 = inject_int(1)
		temp_19 = inject_int(0)
		temp_20 = get_subscript(free_vars_1,temp_18)
		temp_21 = inject_int(0)
		temp_22 = inject_int(0)
		temp_23 = get_subscript(free_vars_1,temp_21)
		temp_24 = get_subscript(temp_23,temp_22)
		temp_25 = get_fun_ptr(temp_17)
		temp_26 = get_subscript(temp_20,temp_19)
		temp_27 = get_free_vars(temp_24)
		_temp_2 = temp_25(temp_26,_temp_1,temp_27)
		temp_28 = inject_int(1)
		temp_29 = inject_int(0)
		temp_30 = get_subscript(free_vars_1,temp_28)
		temp_31 = get_subscript(temp_30,temp_29)
		temp_132 = is_int(temp_31)
		if temp_132:
			temp_114 = is_int(_temp_2)
			if temp_114:
				temp_106 = project_int(temp_31)
				temp_107 = project_int(_temp_2)
				temp_108 = temp_106 + temp_107
				_temp_4 = inject_int(temp_108)
			else:
				temp_113 = is_big(_temp_2)
				if temp_113:
					error_pyobj()
				else:
					temp_112 = is_bool(_temp_2)
					if temp_112:
						temp_109 = project_int(temp_31)
						temp_110 = project_bool(_temp_2)
						temp_111 = temp_109 + temp_110
						_temp_4 = inject_int(temp_111)
					else:
						error_pyobj()
					
				
			
		else:
			temp_131 = is_big(temp_31)
			if temp_131:
				temp_120 = is_int(_temp_2)
				if temp_120:
					error_pyobj()
				else:
					temp_119 = is_big(_temp_2)
					if temp_119:
						temp_115 = project_big(temp_31)
						temp_116 = project_big(_temp_2)
						temp_117 = add(temp_115,temp_116)
						_temp_4 = inject_big(temp_117)
					else:
						temp_118 = is_bool(_temp_2)
						if temp_118:
							error_pyobj()
						else:
							error_pyobj()
						
					
				
			else:
				temp_130 = is_bool(temp_31)
				if temp_130:
					temp_129 = is_int(_temp_2)
					if temp_129:
						temp_121 = project_bool(temp_31)
						temp_122 = project_int(_temp_2)
						temp_123 = temp_121 + temp_122
						_temp_4 = inject_int(temp_123)
					else:
						temp_128 = is_big(_temp_2)
						if temp_128:
							error_pyobj()
						else:
							temp_127 = is_bool(_temp_2)
							if temp_127:
								temp_124 = project_bool(temp_31)
								temp_125 = project_bool(_temp_2)
								temp_126 = temp_124 + temp_125
								_temp_4 = inject_bool(temp_126)
							else:
								error_pyobj()
							
						
					
				else:
					error_pyobj()
				
			
		
		_temp_4 = _temp_4
		_temp_5 = _temp_4
	
	return _temp_5

temp_133 = inject_int(2)
temp_134 = create_list(temp_133)
temp_51 = inject_big(temp_134)
temp_135 = inject_int(0)
set_subscript(temp_51,temp_135,_prod)
temp_136 = inject_int(1)
set_subscript(temp_51,temp_136,_a)
temp_33 = temp_51
temp_34 = create_closure(__func1,temp_33)
temp_137 = inject_big(temp_34)
set_subscript(_prod,temp_10,temp_137)
def __func2(_n,free_vars_2):
	temp_35 = inject_int(0)
	temp_36 = inject_int(0)
	temp_37 = get_subscript(free_vars_2,temp_35)
	temp_38 = get_subscript(temp_37,temp_36)
	temp_39 = inject_int(0)
	temp_40 = inject_int(0)
	temp_41 = get_subscript(free_vars_2,temp_39)
	temp_42 = get_subscript(temp_41,temp_40)
	temp_43 = get_fun_ptr(temp_38)
	temp_44 = get_free_vars(temp_42)
	_temp_6 = temp_43(_n,_n,temp_44)
	return _temp_6

temp_138 = inject_int(1)
temp_139 = create_list(temp_138)
temp_52 = inject_big(temp_139)
temp_140 = inject_int(0)
set_subscript(temp_52,temp_140,_prod)
temp_45 = temp_52
temp_46 = create_closure(__func2,temp_45)
_square = inject_big(temp_46)
temp_141 = eval(input())
temp_47 = temp_141
_temp_7 = temp_47
temp_48 = get_fun_ptr(_square)
temp_49 = get_free_vars(_square)
_temp_8 = temp_48(_temp_7,temp_49)
print(_temp_8)