def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

map = [0]
lambda_1 = inject_big(create_closure(def __func1(x,free_vars_1):
	return x + 1
,[]))
map[0] = inject_big(create_closure(def __func2(_f,_l,_i,n,free_vars_2):
	temp_5 = free_vars_2[3][0] != n
	if is_true(temp_5):
		temp_0 = free_vars_2[0][0][free_vars_2[3][0]]
		temp_1 = get_fun_ptr(free_vars_2[2][0])(temp_0,get_free_vars(free_vars_2[2][0]))
		temp_2 = (free_vars_2[3][0]) + 1
		temp_3 = [temp_1]
		temp_4 = get_fun_ptr(free_vars_2[1][0])(free_vars_2[2][0],free_vars_2[0][0],temp_2,n,get_free_vars(free_vars_2[1][0]))
		temp_6 = temp_3 + temp_4
		temp_8 = temp_6
	else:
		temp_7 = []
		temp_8 = temp_7
	
	return temp_8
,[l, map, f, i]))
temp_9 = [1, 2, 3, 4]
temp_10 = get_fun_ptr(map[0])(lambda_1,temp_9,0,4,get_free_vars(map[0]))
print(temp_10)