compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/hard/is_odd.py
valid p0
Found IfExp in flat ast
IN UNPARSE
<ast.IfExp object at 0x7f3c2f55a920>
IN UNPARSE
<ast.Lambda object at 0x7f3c2f55a680>
IN UNPARSE
<ast.arguments object at 0x7f3c2f55a650>
Found IfExp in flat ast
IN UNPARSE
<ast.IfExp object at 0x7f3c2f55a5c0>
visiting IfExp!
<class 'ast.Compare'>
visiting Call
Visiting BinOp
Visiting UnaryOp
flattening node's  right
flattening node's  arg_i
flattening IfExp test
flattening node's  test
flattening node's  body
flattening node's  value
visiting IfExp!
<class 'ast.Compare'>
visiting Call
Visiting BinOp
Visiting UnaryOp
flattening node's  right
flattening node's  arg_i
flattening IfExp test
flattening node's  test
flattening node's  body
visiting Call
visiting Call
flattening node's  arg_i
collecting functiondef
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_1': {'temp_7', 'temp_8'}, 'is_even': {'is_odd'}}
fba.bound_vars={'__main__': {'temp_7', 'lambda_1', 'is_even', 'temp_9', 'is_odd'}, 'lambda_1': {'n'}, 'is_even': {'temp_4', 'temp_2', 'n', 'temp_1', 'temp_3', 'temp_0'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_1': {'temp_7', 'temp_8'}, 'is_even': {'is_odd'}}
fba.bound_vars={'__main__': {'temp_7', 'lambda_1', 'is_even', 'temp_9', 'is_odd'}, 'lambda_1': {'n'}, 'is_even': {'temp_4', 'temp_2', 'n', 'temp_1', 'temp_3', 'temp_0'}}
all_free=['temp_7', 'temp_8', 'is_odd']
Found IfExp in flat ast
IN UNPARSE
<ast.IfExp object at 0x7f3c2f55a5c0>
found else while unparsing
Before FLATTENING STAGE 1
temp_7
is_odd
lambda_1
inject_big
create_closure
free_vars_1
free_vars_1
temp_7
temp_8
is_even
inject_big
create_closure
temp_2
n
is_true
is_true
temp_2
temp_0
temp_1
n
temp_0
temp_3
get_fun_ptr
free_vars_2
temp_1
get_free_vars
free_vars_2
temp_4
temp_3
temp_4
temp_4
is_odd
temp_7
n
is_odd
lambda_1
temp_9
get_fun_ptr
is_odd
get_free_vars
is_odd
print
temp_9
Found IfExp in flat ast
IN UNPARSE
<ast.IfExp object at 0x7f3c2f55a5c0>
found else while unparsing
visiting Call
flattening node's  to_flat
visiting Call
flattening node's  to_flat
visiting Call
visiting Call
visiting IfExp!
<class 'ast.Subscript'>
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
visiting Call
flattening IfExp test
flattening node's  test
flattening node's  body
flattening node's  orelse
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  to_flat
visiting Call
visiting Call
flattening node's  arg_i
Visiting UnaryOp
visiting Call
flattening node's  operand
Visiting BinOp
visiting Call
visiting Call
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  arg_i
flattening node's  func
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
flattening node's  slice
visiting Call
flattening node's  to_flat
visiting Call
flattening node's  slice
visiting Call
visiting Call
visiting Call
flattening node's  slice
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  slice
flattening node's  arg_i
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
collecting functiondef
collecting functiondef
found else while unparsing
found else while unparsing
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f383460>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55a1d0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55b280>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55b520>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3836d0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a7610>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55b490>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a7d60>
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f3c2f55a410>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f3c2f3a7550>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a5930>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3c8340>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a59c0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f4217e0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55ae30>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f420fa0>
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f3c2f55aa10>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f3c2f421270>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6890>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3f27d0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6920>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f27e4d0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55bd30>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f27e260>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6a10>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f27e350>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6ad0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f27e380>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55ae00>
RETURN: From visit_Module, node in node.body
<ast.Call object at 0x7f3c2f27dea0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6bf0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f421780>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55a9e0>
RETURN: From visit_Module, node in node.body
<ast.Call object at 0x7f3c2f423d60>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6d40>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f4212a0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6e00>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f43e0b0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6f50>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f43ff70>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a7010>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f266050>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a6e90>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f266e00>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a7190>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f266e30>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f3a7280>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f266e60>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f55afe0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3c2f267190>
From visit_Module, node in node.body
<ast.Expr object at 0x7f3c2f55a6e0>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f3c2f27cbb0>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting UnaryOp
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
not flattening test <class 'ast.Name'>
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_12)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_24)))], BB232:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_10)))], BB2:
)
dict_keys(['__func1', '__func2', 'module']) = 
compression possible BB4 & BB65
compression possible BB69 & BB80
compression possible BB66 & BB70
compression possible BB79 & BB94
compression possible BB107 & BB122
compression possible BB104 & BB108
compression possible BB121 & BB132
compression possible BB145 & BB154
compression possible BB142 & BB146
compression possible BB153 & BB162
compression possible BB137 & BB141
compression possible BB99 & BB103
compressing 0
Liveness took 7 loops
total_loop_time=0.007628440856933594
per_basic_block_time=0.00714564323425293
update_parent_time=0.0002875328063964844
Liveness time taken: 0.00826263427734375
Int graph time taken: 0.0026121139526367188
coloring done
Coloring time taken: 0.007463932037353516
Some variable spilled
can't be converted into x86. Spilling
can't be converted into x86. Spilling
can't be converted into x86. Spilling
Liveness took 7 loops
total_loop_time=0.005891323089599609
per_basic_block_time=0.005532979965209961
update_parent_time=0.00021314620971679688
Liveness time taken: 0.006514549255371094
Int graph time taken: 0.002529621124267578
coloring done
Coloring time taken: 0.005143880844116211
Some variable spilled
But instructions ok
last_var =Variable(temp_40)
stack_size=20
done compiling
liveness_time=0.014777183532714844
interference_time=0.005141735076904297
coloring_time=0.012607812881469727
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $20, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl %esi \npushl -4(%ebp) \npushl %edi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %edi, %esi \npushl $0 \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, -12(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl -4(%ebp) \npushl %edi \npushl -12(%ebp) \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl -12(%ebp), %eax \nmovl %eax, -12(%ebp) \npushl $2 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl %esi \npushl -4(%ebp) \npushl %edi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $1 \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl %ebx \npushl -4(%ebp) \npushl %edi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, -16(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl -12(%ebp) \npushl %edi \npushl -16(%ebp) \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl -16(%ebp), %eax \npushl %eax \npushl $__func2 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %eax \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, -20(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, -16(%ebp) \naddl $4, %esp \npushl -8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else0 \nif0: \npushl -16(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else1 \nif1: \nmovl -8(%ebp), %ecx \nmovl -16(%ebp), %eax \ncmpl %ecx, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif1 \nelse1: \nendif1: \npushl -16(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else2 \nif2: \npushl -8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl -16(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl %edi, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif2 \nelse2: \nendif2: \npushl -16(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else3 \nif3: \npushl $1 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif3 \nelse3: \nendif3: \njmp endif0 \nelse0: \npushl -8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else4 \nif4: \npushl -16(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else5 \nif5: \npushl -8(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \npushl -16(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl %ebx, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif5 \nelse5: \nendif5: \npushl -16(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else6 \nif6: \nmovl -8(%ebp), %ecx \nmovl -16(%ebp), %eax \ncmpl %ecx, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif6 \nelse6: \nendif6: \npushl -16(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else7 \nif7: \npushl $1 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif7 \nelse7: \nendif7: \njmp endif4 \nelse4: \npushl -8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else8 \nif8: \npushl -16(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else9 \nif9: \npushl $1 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif9 \nelse9: \nendif9: \npushl -16(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else10 \nif10: \npushl $1 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif10 \nelse10: \nendif10: \npushl -16(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else11 \nif11: \npushl -8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl -16(%ebp) \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall not_equal\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif11 \nelse11: \nendif11: \njmp endif8 \nelse8: \nendif8: \nendif4: \nendif0: \npushl %ebx \npushl -20(%ebp) \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl -4(%ebp) \npushl %edi \npushl -12(%ebp) \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl -12(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl -12(%ebp) \ncall get_subscript\nmovl %eax, %ebx \naddl $8, %esp \npushl %edi \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl $23 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %ebx \ncall get_free_vars\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %esi \ncall *%edi\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_12))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_13))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_12), Variable(temp_14))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_14), Variable(temp_13), Variable(temp_18))), IrStat((Instruction(call), Keyword(is_true), Variable(temp_18), Variable(temp_61))), IrStat((Instruction(if), Variable(temp_61), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_15))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_16))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_15), Variable(temp_17))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_17), Variable(temp_16), Variable(temp_19))), IrStat((Instruction(movl), Variable(temp_19), Variable(temp_21))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(temp_20))), IrStat((Instruction(movl), Variable(temp_20), Variable(temp_21))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(return), Variable(temp_21)))]
compression possible BB104 & BB114
compressing 0
Liveness took 4 loops
total_loop_time=0.00035071372985839844
per_basic_block_time=0.0003330707550048828
update_parent_time=8.344650268554688e-06
Liveness time taken: 0.0003788471221923828
unknown instruction->17:return,temp_21
Int graph time taken: 0.0001571178436279297
coloring done
Coloring time taken: 0.00026988983154296875
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%eax %eax
done compiling
liveness_time=0.0003788471221923828
interference_time=0.0001571178436279297
coloring_time=0.00026988983154296875
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %edi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %ebx \npushl %edi \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %edi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %ebx \npushl %edi \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \nmovl %edi, %eax \njmp endif100 \nelse100: \npushl $0 \ncall inject_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \nendif100: \nmovl %eax, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func2
[IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_24))), IrStat((Instruction(call), Keyword(is_int), Variable(_n), Variable(temp_88))), IrStat((Instruction(if), Variable(temp_88), Keyword(if202), Keyword(else202))), IrStat((Instruction(label), Keyword(if202))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_24), Variable(temp_67))), IrStat((Instruction(if), Variable(temp_67), Keyword(if203), Keyword(else203))), IrStat((Instruction(label), Keyword(if203))), IrStat((Instruction(comp_neq), Variable(_n), Variable(temp_24), Variable(temp_146))), IrStat((Instruction(movl), Variable(temp_146), Variable(temp_66))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_66), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif203))), IrStat((Instruction(label), Keyword(else203))), IrStat((Instruction(label), Keyword(endif203))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_24), Variable(temp_71))), IrStat((Instruction(if), Variable(temp_71), Keyword(if204), Keyword(else204))), IrStat((Instruction(label), Keyword(if204))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_68))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_24), Variable(temp_69))), IrStat((Instruction(comp_neq), Variable(temp_68), Variable(temp_69), Variable(temp_151))), IrStat((Instruction(movl), Variable(temp_151), Variable(temp_70))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_70), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif204))), IrStat((Instruction(label), Keyword(else204))), IrStat((Instruction(label), Keyword(endif204))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_24), Variable(temp_72))), IrStat((Instruction(if), Variable(temp_72), Keyword(if205), Keyword(else205))), IrStat((Instruction(label), Keyword(if205))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif205))), IrStat((Instruction(label), Keyword(else205))), IrStat((Instruction(label), Keyword(endif205))), IrStat((Instruction(jmp), Keyword(endif202))), IrStat((Instruction(label), Keyword(else202))), IrStat((Instruction(call), Keyword(is_bool), Variable(_n), Variable(temp_87))), IrStat((Instruction(if), Variable(temp_87), Keyword(if206), Keyword(else206))), IrStat((Instruction(label), Keyword(if206))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_24), Variable(temp_76))), IrStat((Instruction(if), Variable(temp_76), Keyword(if207), Keyword(else207))), IrStat((Instruction(label), Keyword(if207))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_73))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_24), Variable(temp_74))), IrStat((Instruction(comp_neq), Variable(temp_73), Variable(temp_74), Variable(temp_159))), IrStat((Instruction(movl), Variable(temp_159), Variable(temp_75))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_75), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif207))), IrStat((Instruction(label), Keyword(else207))), IrStat((Instruction(label), Keyword(endif207))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_24), Variable(temp_78))), IrStat((Instruction(if), Variable(temp_78), Keyword(if208), Keyword(else208))), IrStat((Instruction(label), Keyword(if208))), IrStat((Instruction(comp_neq), Variable(_n), Variable(temp_24), Variable(temp_162))), IrStat((Instruction(movl), Variable(temp_162), Variable(temp_77))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_77), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif208))), IrStat((Instruction(label), Keyword(else208))), IrStat((Instruction(label), Keyword(endif208))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_24), Variable(temp_79))), IrStat((Instruction(if), Variable(temp_79), Keyword(if209), Keyword(else209))), IrStat((Instruction(label), Keyword(if209))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif209))), IrStat((Instruction(label), Keyword(else209))), IrStat((Instruction(label), Keyword(endif209))), IrStat((Instruction(jmp), Keyword(endif206))), IrStat((Instruction(label), Keyword(else206))), IrStat((Instruction(call), Keyword(is_big), Variable(_n), Variable(temp_86))), IrStat((Instruction(if), Variable(temp_86), Keyword(if210), Keyword(else210))), IrStat((Instruction(label), Keyword(if210))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_24), Variable(temp_80))), IrStat((Instruction(if), Variable(temp_80), Keyword(if211), Keyword(else211))), IrStat((Instruction(label), Keyword(if211))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif211))), IrStat((Instruction(label), Keyword(else211))), IrStat((Instruction(label), Keyword(endif211))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_24), Variable(temp_81))), IrStat((Instruction(if), Variable(temp_81), Keyword(if212), Keyword(else212))), IrStat((Instruction(label), Keyword(if212))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif212))), IrStat((Instruction(label), Keyword(else212))), IrStat((Instruction(label), Keyword(endif212))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_24), Variable(temp_85))), IrStat((Instruction(if), Variable(temp_85), Keyword(if213), Keyword(else213))), IrStat((Instruction(label), Keyword(if213))), IrStat((Instruction(call), Keyword(project_big), Variable(_n), Variable(temp_82))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_24), Variable(temp_83))), IrStat((Instruction(call), Keyword(not_equal), Variable(temp_82), Variable(temp_83), Variable(temp_84))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_84), Variable(_temp_2))), IrStat((Instruction(jmp), Keyword(endif213))), IrStat((Instruction(label), Keyword(else213))), IrStat((Instruction(label), Keyword(endif213))), IrStat((Instruction(jmp), Keyword(endif210))), IrStat((Instruction(label), Keyword(else210))), IrStat((Instruction(label), Keyword(endif210))), IrStat((Instruction(label), Keyword(endif206))), IrStat((Instruction(label), Keyword(endif202))), IrStat((Instruction(movl), Variable(_temp_2), Variable(_temp_2))), IrStat((Instruction(call), Keyword(is_true), Variable(_temp_2), Variable(temp_25))), IrStat((Instruction(call), Keyword(is_true), Variable(temp_25), Variable(temp_37))), IrStat((Instruction(if), Variable(temp_37), Keyword(if214), Keyword(else214))), IrStat((Instruction(label), Keyword(if214))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_26))), IrStat((Instruction(movl), Variable(temp_26), Variable(temp_179))), IrStat((Instruction(negl), Variable(temp_179))), IrStat((Instruction(movl), Variable(temp_179), Variable(_temp_0))), IrStat((Instruction(call), Keyword(is_int), Variable(_n), Variable(temp_115))), IrStat((Instruction(if), Variable(temp_115), Keyword(if215), Keyword(else215))), IrStat((Instruction(label), Keyword(if215))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_97))), IrStat((Instruction(if), Variable(temp_97), Keyword(if216), Keyword(else216))), IrStat((Instruction(label), Keyword(if216))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_89))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_0), Variable(temp_90))), IrStat((Instruction(movl), Variable(temp_90), Variable(temp_184))), IrStat((Instruction(addl), Variable(temp_89), Variable(temp_184))), IrStat((Instruction(movl), Variable(temp_184), Variable(temp_91))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_91), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif216))), IrStat((Instruction(label), Keyword(else216))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_96))), IrStat((Instruction(if), Variable(temp_96), Keyword(if217), Keyword(else217))), IrStat((Instruction(label), Keyword(if217))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_187))), IrStat((Instruction(jmp), Keyword(endif217))), IrStat((Instruction(label), Keyword(else217))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_95))), IrStat((Instruction(if), Variable(temp_95), Keyword(if218), Keyword(else218))), IrStat((Instruction(label), Keyword(if218))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_92))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_0), Variable(temp_93))), IrStat((Instruction(movl), Variable(temp_93), Variable(temp_191))), IrStat((Instruction(addl), Variable(temp_92), Variable(temp_191))), IrStat((Instruction(movl), Variable(temp_191), Variable(temp_94))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_94), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif218))), IrStat((Instruction(label), Keyword(else218))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_193))), IrStat((Instruction(label), Keyword(endif218))), IrStat((Instruction(label), Keyword(endif217))), IrStat((Instruction(label), Keyword(endif216))), IrStat((Instruction(jmp), Keyword(endif215))), IrStat((Instruction(label), Keyword(else215))), IrStat((Instruction(call), Keyword(is_big), Variable(_n), Variable(temp_114))), IrStat((Instruction(if), Variable(temp_114), Keyword(if219), Keyword(else219))), IrStat((Instruction(label), Keyword(if219))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_103))), IrStat((Instruction(if), Variable(temp_103), Keyword(if220), Keyword(else220))), IrStat((Instruction(label), Keyword(if220))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_196))), IrStat((Instruction(jmp), Keyword(endif220))), IrStat((Instruction(label), Keyword(else220))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_102))), IrStat((Instruction(if), Variable(temp_102), Keyword(if221), Keyword(else221))), IrStat((Instruction(label), Keyword(if221))), IrStat((Instruction(call), Keyword(project_big), Variable(_n), Variable(temp_98))), IrStat((Instruction(call), Keyword(project_big), Variable(_temp_0), Variable(temp_99))), IrStat((Instruction(call), Keyword(add), Variable(temp_98), Variable(temp_99), Variable(temp_100))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_100), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif221))), IrStat((Instruction(label), Keyword(else221))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_101))), IrStat((Instruction(if), Variable(temp_101), Keyword(if222), Keyword(else222))), IrStat((Instruction(label), Keyword(if222))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_203))), IrStat((Instruction(jmp), Keyword(endif222))), IrStat((Instruction(label), Keyword(else222))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_204))), IrStat((Instruction(label), Keyword(endif222))), IrStat((Instruction(label), Keyword(endif221))), IrStat((Instruction(label), Keyword(endif220))), IrStat((Instruction(jmp), Keyword(endif219))), IrStat((Instruction(label), Keyword(else219))), IrStat((Instruction(call), Keyword(is_bool), Variable(_n), Variable(temp_113))), IrStat((Instruction(if), Variable(temp_113), Keyword(if223), Keyword(else223))), IrStat((Instruction(label), Keyword(if223))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_112))), IrStat((Instruction(if), Variable(temp_112), Keyword(if224), Keyword(else224))), IrStat((Instruction(label), Keyword(if224))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_104))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_0), Variable(temp_105))), IrStat((Instruction(movl), Variable(temp_105), Variable(temp_209))), IrStat((Instruction(addl), Variable(temp_104), Variable(temp_209))), IrStat((Instruction(movl), Variable(temp_209), Variable(temp_106))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_106), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif224))), IrStat((Instruction(label), Keyword(else224))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_111))), IrStat((Instruction(if), Variable(temp_111), Keyword(if225), Keyword(else225))), IrStat((Instruction(label), Keyword(if225))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_212))), IrStat((Instruction(jmp), Keyword(endif225))), IrStat((Instruction(label), Keyword(else225))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_110))), IrStat((Instruction(if), Variable(temp_110), Keyword(if226), Keyword(else226))), IrStat((Instruction(label), Keyword(if226))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_107))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_0), Variable(temp_108))), IrStat((Instruction(movl), Variable(temp_108), Variable(temp_216))), IrStat((Instruction(addl), Variable(temp_107), Variable(temp_216))), IrStat((Instruction(movl), Variable(temp_216), Variable(temp_109))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_109), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif226))), IrStat((Instruction(label), Keyword(else226))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_218))), IrStat((Instruction(label), Keyword(endif226))), IrStat((Instruction(label), Keyword(endif225))), IrStat((Instruction(label), Keyword(endif224))), IrStat((Instruction(jmp), Keyword(endif223))), IrStat((Instruction(label), Keyword(else223))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_219))), IrStat((Instruction(label), Keyword(endif223))), IrStat((Instruction(label), Keyword(endif219))), IrStat((Instruction(label), Keyword(endif215))), IrStat((Instruction(movl), Variable(_temp_1), Variable(_temp_1))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_27))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_28))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_2), Variable(temp_27), Variable(temp_29))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_29), Variable(temp_28), Variable(temp_30))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_31))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_32))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_2), Variable(temp_31), Variable(temp_33))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_33), Variable(temp_32), Variable(temp_34))), IrStat((Instruction(call), Keyword(get_fun_ptr), Variable(temp_30), Variable(temp_35))), IrStat((Instruction(call), Keyword(get_free_vars), Variable(temp_34), Variable(temp_36))), IrStat((Instruction(call), Variable(temp_35), Variable(_temp_1), Variable(temp_36), Variable(_temp_3))), IrStat((Instruction(movl), Variable(_temp_3), Variable(_temp_4))), IrStat((Instruction(jmp), Keyword(endif214))), IrStat((Instruction(label), Keyword(else214))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_4))), IrStat((Instruction(label), Keyword(endif214))), IrStat((Instruction(return), Variable(_temp_4)))]
compression possible BB234 & BB238
compression possible BB242 & BB253
compression possible BB239 & BB243
compression possible BB252 & BB267
compression possible BB237 & BB353
compression possible BB280 & BB295
compression possible BB277 & BB281
compression possible BB294 & BB305
compression possible BB318 & BB327
compression possible BB315 & BB319
compression possible BB326 & BB335
compression possible BB310 & BB314
compression possible BB272 & BB276
compression possible BB384 & BB388
compression possible BB377 & BB381
compression possible BB363 & BB367
compression possible BB426 & BB430
compression possible BB412 & BB416
compression possible BB405 & BB409
compression possible BB461 & BB465
compression possible BB454 & BB458
compression possible BB440 & BB444
compression possible BB435 & BB439
compression possible BB400 & BB404
compression possible BB354 & BB362
compressing 0
Liveness took 8 loops
total_loop_time=0.01053309440612793
per_basic_block_time=0.009682893753051758
update_parent_time=0.0004870891571044922
Liveness time taken: 0.01217508316040039
unknown instruction->231:return,_temp_4
Int graph time taken: 0.0024192333221435547
coloring done
Coloring time taken: 0.006914377212524414
Some variable spilled
can't be converted into x86. Spilling
Liveness took 8 loops
total_loop_time=0.010246753692626953
per_basic_block_time=0.00941014289855957
update_parent_time=0.0004856586456298828
Liveness time taken: 0.011869430541992188
unknown instruction->232:return,_temp_4
Int graph time taken: 0.0024406909942626953
coloring done
Coloring time taken: 0.00669550895690918
Some variable spilled
But instructions ok
last_var =Variable(_temp_2)
stack_size=4
return stat
return
%edi %edi
done compiling
liveness_time=0.024044513702392578
interference_time=0.00485992431640625
coloring_time=0.013609886169433594
code = '\n__func2: \npushl %ebp \nmovl %esp, %ebp \nsubl $4, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else202 \nif202: \npushl %edi \ncall is_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else203 \nif203: \nmovl %edi, %eax \ncmpl 8(%ebp), %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif203 \nelse203: \nendif203: \npushl %edi \ncall is_bool\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else204 \nif204: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \ncall project_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \nmovl -4(%ebp), %eax \ncmpl %esi, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif204 \nelse204: \nendif204: \npushl %edi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else205 \nif205: \npushl $1 \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif205 \nelse205: \nendif205: \njmp endif202 \nelse202: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else206 \nif206: \npushl %edi \ncall is_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else207 \nif207: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \ncall project_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \nmovl -4(%ebp), %eax \ncmpl %esi, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif207 \nelse207: \nendif207: \npushl %edi \ncall is_bool\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else208 \nif208: \nmovl %edi, %eax \ncmpl 8(%ebp), %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif208 \nelse208: \nendif208: \npushl %edi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else209 \nif209: \npushl $1 \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif209 \nelse209: \nendif209: \njmp endif206 \nelse206: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else210 \nif210: \npushl %edi \ncall is_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else211 \nif211: \npushl $1 \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif211 \nelse211: \nendif211: \npushl %edi \ncall is_bool\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else212 \nif212: \npushl $1 \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif212 \nelse212: \nendif212: \npushl %edi \ncall is_big\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl $0, %eax \nje else213 \nif213: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %esi \ncall not_equal\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif213 \nelse213: \nendif213: \njmp endif210 \nelse210: \nendif210: \nendif206: \nendif202: \nmovl -4(%ebp), %eax \nmovl %eax, -4(%ebp) \npushl -4(%ebp) \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else214 \nif214: \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \nnegl %eax \nmovl %eax, %esi \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else215 \nif215: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else216 \nif216: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif216 \nelse216: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else217 \nif217: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif217 \nelse217: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else218 \nif218: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif218 \nelse218: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif218: \nendif217: \nendif216: \njmp endif215 \nelse215: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else219 \nif219: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else220 \nif220: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif220 \nelse220: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else221 \nif221: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \njmp endif221 \nelse221: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else222 \nif222: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif222 \nelse222: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif222: \nendif221: \nendif220: \njmp endif219 \nelse219: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else223 \nif223: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else224 \nif224: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif224 \nelse224: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else225 \nif225: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif225 \nelse225: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else226 \nif226: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif226 \nelse226: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif226: \nendif225: \nendif224: \njmp endif223 \nelse223: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif223: \nendif219: \nendif215: \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %esi \npushl %edi \ncall get_subscript\nmovl %eax, -4(%ebp) \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %esi \npushl %edi \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl -4(%ebp) \ncall get_fun_ptr\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall *%esi\nmovl %eax, %edi \naddl $8, %esp \njmp endif214 \nelse214: \npushl $1 \ncall inject_bool\nmovl %eax, %edi \naddl $4, %esp \nendif214: \nmovl %edi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
