def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func2(_f1,_g1,free_vars_2):
	temp_47 = inject_int(1)
	temp_48 = create_list(temp_47)
	temp_42 = inject_big(temp_48)
	temp_49 = inject_int(0)
	set_subscript(temp_42,temp_49,_g1)
	_g1 = temp_42
	def __func1(_x3,free_vars_1):
		temp_7 = inject_int(1)
		temp_8 = inject_int(0)
		temp_9 = get_subscript(free_vars_1,temp_7)
		temp_10 = get_subscript(temp_9,temp_8)
		temp_11 = inject_int(1)
		temp_12 = inject_int(0)
		temp_13 = get_subscript(free_vars_1,temp_11)
		temp_14 = get_subscript(temp_13,temp_12)
		temp_15 = get_fun_ptr(temp_10)
		temp_16 = get_free_vars(temp_14)
		_temp_0 = temp_15(_x3,temp_16)
		temp_17 = inject_int(0)
		temp_18 = inject_int(0)
		temp_19 = get_subscript(free_vars_1,temp_17)
		temp_20 = get_subscript(temp_19,temp_18)
		temp_21 = inject_int(0)
		temp_22 = inject_int(0)
		temp_23 = get_subscript(free_vars_1,temp_21)
		temp_24 = get_subscript(temp_23,temp_22)
		temp_25 = get_fun_ptr(temp_20)
		temp_26 = get_free_vars(temp_24)
		_temp_1 = temp_25(_temp_0,temp_26)
		return _temp_1
	
	temp_50 = inject_int(2)
	temp_51 = create_list(temp_50)
	temp_43 = inject_big(temp_51)
	temp_52 = inject_int(0)
	set_subscript(temp_43,temp_52,_f1)
	temp_53 = inject_int(1)
	set_subscript(temp_43,temp_53,_g1)
	temp_27 = temp_43
	temp_28 = create_closure(__func1,temp_27)
	__compose = inject_big(temp_28)
	return __compose

temp_54 = inject_int(0)
temp_55 = create_list(temp_54)
temp_44 = inject_big(temp_55)
temp_29 = temp_44
temp_30 = create_closure(__func2,temp_29)
_compose = inject_big(temp_30)
def __func3(_x1,free_vars_3):
	temp_31 = inject_int(1)
	temp_82 = is_int(_x1)
	if temp_82:
		temp_64 = is_int(temp_31)
		if temp_64:
			temp_56 = project_int(_x1)
			temp_57 = project_int(temp_31)
			temp_58 = temp_56 + temp_57
			_temp_2 = inject_int(temp_58)
		else:
			temp_63 = is_big(temp_31)
			if temp_63:
				error_pyobj()
			else:
				temp_62 = is_bool(temp_31)
				if temp_62:
					temp_59 = project_int(_x1)
					temp_60 = project_bool(temp_31)
					temp_61 = temp_59 + temp_60
					_temp_2 = inject_int(temp_61)
				else:
					error_pyobj()
				
			
		
	else:
		temp_81 = is_big(_x1)
		if temp_81:
			temp_70 = is_int(temp_31)
			if temp_70:
				error_pyobj()
			else:
				temp_69 = is_big(temp_31)
				if temp_69:
					temp_65 = project_big(_x1)
					temp_66 = project_big(temp_31)
					temp_67 = add(temp_65,temp_66)
					_temp_2 = inject_big(temp_67)
				else:
					temp_68 = is_bool(temp_31)
					if temp_68:
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			temp_80 = is_bool(_x1)
			if temp_80:
				temp_79 = is_int(temp_31)
				if temp_79:
					temp_71 = project_bool(_x1)
					temp_72 = project_int(temp_31)
					temp_73 = temp_71 + temp_72
					_temp_2 = inject_int(temp_73)
				else:
					temp_78 = is_big(temp_31)
					if temp_78:
						error_pyobj()
					else:
						temp_77 = is_bool(temp_31)
						if temp_77:
							temp_74 = project_bool(_x1)
							temp_75 = project_bool(temp_31)
							temp_76 = temp_74 + temp_75
							_temp_2 = inject_bool(temp_76)
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	_temp_2 = _temp_2
	return _temp_2

temp_83 = inject_int(0)
temp_84 = create_list(temp_83)
temp_45 = inject_big(temp_84)
temp_32 = temp_45
temp_33 = create_closure(__func3,temp_32)
_f = inject_big(temp_33)
def __func4(_x2,free_vars_4):
	temp_34 = inject_int(1)
	_temp_3 = - temp_34
	temp_111 = is_int(_x2)
	if temp_111:
		temp_93 = is_int(_temp_3)
		if temp_93:
			temp_85 = project_int(_x2)
			temp_86 = project_int(_temp_3)
			temp_87 = temp_85 + temp_86
			_temp_4 = inject_int(temp_87)
		else:
			temp_92 = is_big(_temp_3)
			if temp_92:
				error_pyobj()
			else:
				temp_91 = is_bool(_temp_3)
				if temp_91:
					temp_88 = project_int(_x2)
					temp_89 = project_bool(_temp_3)
					temp_90 = temp_88 + temp_89
					_temp_4 = inject_int(temp_90)
				else:
					error_pyobj()
				
			
		
	else:
		temp_110 = is_big(_x2)
		if temp_110:
			temp_99 = is_int(_temp_3)
			if temp_99:
				error_pyobj()
			else:
				temp_98 = is_big(_temp_3)
				if temp_98:
					temp_94 = project_big(_x2)
					temp_95 = project_big(_temp_3)
					temp_96 = add(temp_94,temp_95)
					_temp_4 = inject_big(temp_96)
				else:
					temp_97 = is_bool(_temp_3)
					if temp_97:
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			temp_109 = is_bool(_x2)
			if temp_109:
				temp_108 = is_int(_temp_3)
				if temp_108:
					temp_100 = project_bool(_x2)
					temp_101 = project_int(_temp_3)
					temp_102 = temp_100 + temp_101
					_temp_4 = inject_int(temp_102)
				else:
					temp_107 = is_big(_temp_3)
					if temp_107:
						error_pyobj()
					else:
						temp_106 = is_bool(_temp_3)
						if temp_106:
							temp_103 = project_bool(_x2)
							temp_104 = project_bool(_temp_3)
							temp_105 = temp_103 + temp_104
							_temp_4 = inject_bool(temp_105)
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	_temp_4 = _temp_4
	return _temp_4

temp_112 = inject_int(0)
temp_113 = create_list(temp_112)
temp_46 = inject_big(temp_113)
temp_35 = temp_46
temp_36 = create_closure(__func4,temp_35)
_g = inject_big(temp_36)
temp_37 = get_fun_ptr(_compose)
temp_38 = get_free_vars(_compose)
_temp_5 = temp_37(_f,_g,temp_38)
temp_39 = get_fun_ptr(_temp_5)
temp_40 = inject_int(23)
temp_41 = get_free_vars(_temp_5)
_temp_6 = temp_39(temp_40,temp_41)
print(_temp_6)