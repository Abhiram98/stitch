def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_10 = inject_int(0)
temp_50 = inject_big(create_list(inject_int(1)))
set_subscript(temp_50,inject_int(0),temp_10)
_temp_7 = temp_50
temp_11 = inject_int(0)
temp_51 = inject_big(create_list(inject_int(1)))
set_subscript(temp_51,inject_int(0),temp_11)
_is_odd = temp_51
def __func1(_n,free_vars_1):
	temp_12 = inject_int(0)
	temp_13 = inject_int(0)
	temp_14 = get_subscript(free_vars_1,temp_12)
	temp_18 = get_subscript(temp_14,temp_13)
	if is_true(temp_18):
		temp_15 = inject_int(1)
		temp_16 = inject_int(0)
		temp_17 = get_subscript(free_vars_1,temp_15)
		temp_19 = get_subscript(temp_17,temp_16)
		temp_21 = temp_19
	else:
		temp_20 = inject_bool(0)
		temp_21 = temp_20
	
	return temp_21

temp_52 = inject_big(create_list(inject_int(2)))
set_subscript(temp_52,inject_int(0),_temp_7)
set_subscript(temp_52,inject_int(1),_temp_8)
temp_22 = temp_52
temp_23 = create_closure(__func1,temp_22)
_lambda_1 = inject_big(temp_23)
def __func2(_n,free_vars_2):
	temp_24 = inject_int(0)
	if is_int(_n):
		if is_int(temp_24):
			_temp_2 = inject_bool(_n != temp_24)
		
		if is_bool(temp_24):
			_temp_2 = inject_bool(project_int(_n) != project_bool(temp_24))
		
		if is_big(temp_24):
			_temp_2 = inject_bool(1)
		
	else:
		if is_bool(_n):
			if is_int(temp_24):
				_temp_2 = inject_bool(project_bool(_n) != project_int(temp_24))
			
			if is_bool(temp_24):
				_temp_2 = inject_bool(_n != temp_24)
			
			if is_big(temp_24):
				_temp_2 = inject_bool(1)
			
		else:
			if is_big(_n):
				if is_int(temp_24):
					_temp_2 = inject_bool(1)
				
				if is_bool(temp_24):
					_temp_2 = inject_bool(1)
				
				if is_big(temp_24):
					_temp_2 = inject_bool(not_equal(project_big(_n),project_big(temp_24)))
				
			
		
	
	_temp_2 = _temp_2
	temp_25 = is_true(_temp_2)
	temp_37 = is_true(temp_25)
	if temp_37:
		temp_26 = inject_int(1)
		_temp_0 = - temp_26
		if is_int(_n):
			if is_int(_temp_0):
				_temp_1 = inject_int((project_int(_n)) + (project_int(_temp_0)))
			else:
				if is_big(_temp_0):
					error_pyobj()
				else:
					if is_bool(_temp_0):
						_temp_1 = inject_int((project_int(_n)) + (project_bool(_temp_0)))
					else:
						error_pyobj()
					
				
			
		else:
			if is_big(_n):
				if is_int(_temp_0):
					error_pyobj()
				else:
					if is_big(_temp_0):
						_temp_1 = inject_big(add(project_big(_n),project_big(_temp_0)))
					else:
						if is_bool(_temp_0):
							error_pyobj()
						else:
							error_pyobj()
						
					
				
			else:
				if is_bool(_n):
					if is_int(_temp_0):
						_temp_1 = inject_int((project_bool(_n)) + (project_int(_temp_0)))
					else:
						if is_big(_temp_0):
							error_pyobj()
						else:
							if is_bool(_temp_0):
								_temp_1 = inject_bool((project_bool(_n)) + (project_bool(_temp_0)))
							else:
								error_pyobj()
							
						
					
				else:
					error_pyobj()
				
			
		
		_temp_1 = _temp_1
		temp_27 = inject_int(0)
		temp_28 = inject_int(0)
		temp_29 = get_subscript(free_vars_2,temp_27)
		temp_30 = get_subscript(temp_29,temp_28)
		temp_31 = inject_int(0)
		temp_32 = inject_int(0)
		temp_33 = get_subscript(free_vars_2,temp_31)
		temp_34 = get_subscript(temp_33,temp_32)
		temp_35 = get_fun_ptr(temp_30)
		temp_36 = get_free_vars(temp_34)
		_temp_3 = temp_35(_temp_1,temp_36)
		_temp_4 = _temp_3
	else:
		_temp_4 = inject_bool(1)
	
	return _temp_4

temp_53 = inject_big(create_list(inject_int(1)))
set_subscript(temp_53,inject_int(0),_is_odd)
temp_38 = temp_53
temp_39 = create_closure(__func2,temp_38)
_is_even = inject_big(temp_39)
temp_40 = inject_int(0)
temp_41 = inject_int(0)
if is_int(_n):
	if is_int(temp_41):
		temp_54 = inject_bool(_n != temp_41)
	
	if is_bool(temp_41):
		temp_54 = inject_bool(project_int(_n) != project_bool(temp_41))
	
	if is_big(temp_41):
		temp_54 = inject_bool(1)
	
else:
	if is_bool(_n):
		if is_int(temp_41):
			temp_54 = inject_bool(project_bool(_n) != project_int(temp_41))
		
		if is_bool(temp_41):
			temp_54 = inject_bool(_n != temp_41)
		
		if is_big(temp_41):
			temp_54 = inject_bool(1)
		
	else:
		if is_big(_n):
			if is_int(temp_41):
				temp_54 = inject_bool(1)
			
			if is_bool(temp_41):
				temp_54 = inject_bool(1)
			
			if is_big(temp_41):
				temp_54 = inject_bool(not_equal(project_big(_n),project_big(temp_41)))
			
		
	

set_subscript(_temp_7,temp_40,temp_54)
temp_42 = inject_int(0)
set_subscript(_is_odd,temp_42,_lambda_1)
temp_43 = inject_int(0)
temp_44 = get_subscript(_is_odd,temp_43)
temp_45 = inject_int(0)
temp_46 = get_subscript(_is_odd,temp_45)
temp_47 = get_fun_ptr(temp_44)
temp_48 = inject_int(23)
temp_49 = get_free_vars(temp_46)
_temp_9 = temp_47(temp_48,temp_49)
print(_temp_9)