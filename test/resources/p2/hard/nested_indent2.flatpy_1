def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func3(free_vars_3):
	_x = inject_int(1)
	def __func2(free_vars_2):
		_x = inject_int(3)
		def __func1(free_vars_1):
			_x = inject_int(5)
			print(_x)
			return _x
		
		temp_18 = inject_int(0)
		temp_19 = create_list(temp_18)
		temp_15 = inject_big(temp_19)
		temp_3 = temp_15
		temp_4 = create_closure(__func1,temp_3)
		_fun3 = inject_big(temp_4)
		print(_x)
		temp_5 = get_fun_ptr(_fun3)
		temp_6 = get_free_vars(_fun3)
		_temp_0 = temp_5(temp_6)
		return _temp_0
	
	temp_20 = inject_int(0)
	temp_21 = create_list(temp_20)
	temp_16 = inject_big(temp_21)
	temp_7 = temp_16
	temp_8 = create_closure(__func2,temp_7)
	_fun2 = inject_big(temp_8)
	print(_x)
	temp_9 = get_fun_ptr(_fun2)
	temp_10 = get_free_vars(_fun2)
	_temp_1 = temp_9(temp_10)
	return _temp_1

temp_22 = inject_int(0)
temp_23 = create_list(temp_22)
temp_17 = inject_big(temp_23)
temp_11 = temp_17
temp_12 = create_closure(__func3,temp_11)
_fun1 = inject_big(temp_12)
temp_13 = get_fun_ptr(_fun1)
temp_14 = get_free_vars(_fun1)
_temp_2 = temp_13(temp_14)
print(_temp_2)