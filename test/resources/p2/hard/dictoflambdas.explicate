def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_5 = inject_int(0)
temp_29 = inject_big(create_list(inject_int(1)))
set_subscript(temp_29,inject_int(0),temp_5)
_temp_0 = temp_29
def __func1(_x,free_vars_1):
	temp_6 = inject_int(0)
	temp_7 = inject_int(0)
	temp_8 = get_subscript(free_vars_1,temp_6)
	temp_9 = get_subscript(temp_8,temp_7)
	if is_int(_x):
		if is_int(temp_9):
			temp_10 = inject_int((project_int(_x)) + (project_int(temp_9)))
		else:
			if is_big(temp_9):
				error_pyobj()
			else:
				if is_bool(temp_9):
					temp_10 = inject_int((project_int(_x)) + (project_bool(temp_9)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(_x):
			if is_int(temp_9):
				error_pyobj()
			else:
				if is_big(temp_9):
					temp_10 = inject_big(add(project_big(_x),project_big(temp_9)))
				else:
					if is_bool(temp_9):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(_x):
				if is_int(temp_9):
					temp_10 = inject_int((project_bool(_x)) + (project_int(temp_9)))
				else:
					if is_big(temp_9):
						error_pyobj()
					else:
						if is_bool(temp_9):
							temp_10 = inject_bool((project_bool(_x)) + (project_bool(temp_9)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	temp_10 = temp_10
	return temp_10

temp_30 = inject_big(create_list(inject_int(1)))
set_subscript(temp_30,inject_int(0),_temp_0)
temp_11 = temp_30
temp_12 = create_closure(__func1,temp_11)
_lambda_2 = inject_big(temp_12)
def __func2(_x,free_vars_2):
	temp_13 = inject_int(1)
	if is_int(_x):
		if is_int(temp_13):
			temp_14 = inject_int((project_int(_x)) + (project_int(temp_13)))
		else:
			if is_big(temp_13):
				error_pyobj()
			else:
				if is_bool(temp_13):
					temp_14 = inject_int((project_int(_x)) + (project_bool(temp_13)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(_x):
			if is_int(temp_13):
				error_pyobj()
			else:
				if is_big(temp_13):
					temp_14 = inject_big(add(project_big(_x),project_big(temp_13)))
				else:
					if is_bool(temp_13):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(_x):
				if is_int(temp_13):
					temp_14 = inject_int((project_bool(_x)) + (project_int(temp_13)))
				else:
					if is_big(temp_13):
						error_pyobj()
					else:
						if is_bool(temp_13):
							temp_14 = inject_bool((project_bool(_x)) + (project_bool(temp_13)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	temp_14 = temp_14
	return temp_14

temp_31 = inject_big(create_list(inject_int(0)))
temp_15 = temp_31
temp_16 = create_closure(__func2,temp_15)
_lambda_1 = inject_big(temp_16)
temp_17 = inject_int(0)
temp_18 = inject_int(1)
set_subscript(_temp_0,temp_17,- temp_18)
temp_19 = inject_int(1)
temp_20 = inject_int(2)
temp_32 = inject_big(create_dict())
set_subscript(temp_32,temp_20,_lambda_2)
set_subscript(temp_32,temp_19,_lambda_1)
_x = temp_32
temp_21 = inject_int(1)
_temp_1 = get_subscript(_x,temp_21)
temp_22 = get_fun_ptr(_temp_1)
temp_23 = inject_int(23)
temp_24 = get_free_vars(_temp_1)
_temp_2 = temp_22(temp_23,temp_24)
print(_temp_2)
temp_25 = inject_int(2)
_temp_3 = get_subscript(_x,temp_25)
temp_26 = get_fun_ptr(_temp_3)
temp_27 = inject_int(23)
temp_28 = get_free_vars(_temp_3)
_temp_4 = temp_26(temp_27,temp_28)
print(_temp_4)