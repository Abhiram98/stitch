compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/hard/conditional_call.py
valid p0
found else while unparsing
IN UNPARSE
<flatten_p0.NotOp object at 0x7f8e86f1e410>
IN UNPARSE
<ast.Not object at 0x7f8e86f1e3e0>
flattening node's  value
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  operand
flattening node's  arg_i
desugaring NotOp
flattening test to  <class 'ast.If'>
flattening node's  test
collecting functiondef
collecting functiondef
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'is_true': set(), 'true_fun': set()}
fba.bound_vars={'__main__': {'temp_1', 'temp_3', 'true_fun', 'is_true', 'temp_2', 'temp_5', 'temp_4'}, 'is_true': {'x', 'temp_0'}, 'true_fun': set()}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'is_true': set(), 'true_fun': set()}
fba.bound_vars={'__main__': {'temp_1', 'temp_3', 'true_fun', 'is_true', 'temp_2', 'temp_5', 'temp_4'}, 'is_true': {'x', 'temp_0'}, 'true_fun': set()}
all_free=[]
found else while unparsing
found else while unparsing
Before FLATTENING STAGE 1
is_true
inject_big
create_closure
temp_0
x
temp_0
true_fun
inject_big
create_closure
temp_1
eval
input
temp_5
is_true
_temp_1
is_true
temp_5
temp_2
get_fun_ptr
true_fun
get_free_vars
true_fun
print
temp_2
temp_3
get_fun_ptr
true_fun
get_free_vars
true_fun
is_true
is_true
temp_3
temp_4
inject_bool
temp_4
inject_bool
print
temp_4
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
flattening node's  to_flat
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
collecting functiondef
collecting functiondef
found else while unparsing
found else while unparsing
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f8e86f1ea70>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f8e86d4ad70>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d48910>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d6bf70>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d48af0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d9c880>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86f1ef20>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d9c4c0>
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f8e86f1ea40>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f8e86d9c850>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d4a2f0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d9de70>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d4a410>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d9d0c0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86f1f100>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86dba8c0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d4a500>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86dba830>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86f1e2f0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86dba890>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86f1eb60>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86dba740>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86d4acb0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8e86dba770>
From visit_Module, node in node.body
<ast.If object at 0x7f8e86f1e800>
RETURN: From visit_Module, node in node.body
<ast.If object at 0x7f8e86db81c0>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
not flattening test <class 'ast.Name'>
visiting Call
not flattening test <class 'ast.Name'>
collecting functiondef
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(temp_6)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(temp_9)))], BB321:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_47)))], BB2:
)
dict_keys(['__func1', '__func2', 'module']) = 
compression possible BB4 & BB34
compression possible BB43 & BB55
compressing 0
Liveness took 4 loops
total_loop_time=0.0009522438049316406
per_basic_block_time=0.0009181499481201172
update_parent_time=1.621246337890625e-05
Liveness time taken: 0.0010068416595458984
Int graph time taken: 0.0003426074981689453
coloring done
Coloring time taken: 0.001222848892211914
stack_size=0
done compiling
liveness_time=0.0010068416595458984
interference_time=0.0003426074981689453
coloring_time=0.001222848892211914
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %eax \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func2 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \ncall eval_input_pyobj \nmovl %eax, %edi \nmovl %edi, %eax \npushl %eax \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else0 \nif0: \npushl %ebx \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall get_free_vars\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \ncall *%edi\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall print_any \naddl $4, %esp \njmp endif0 \nelse0: \npushl %ebx \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall get_free_vars\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \ncall *%edi\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else1 \nif1: \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_bool\nmovl %eax, %edi \naddl $4, %esp \njmp endif1 \nelse1: \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_bool\nmovl %eax, %edi \naddl $4, %esp \nendif1: \npushl %edi \ncall print_any \naddl $4, %esp \nendif0: \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(temp_6))), IrStat((Instruction(call), Keyword(is_int), Variable(_x), Variable(temp_46))), IrStat((Instruction(if), Variable(temp_46), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_6), Variable(temp_25))), IrStat((Instruction(if), Variable(temp_25), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(comp_eq), Variable(_x), Variable(temp_6), Variable(temp_56))), IrStat((Instruction(movl), Variable(temp_56), Variable(temp_24))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_24), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_6), Variable(temp_29))), IrStat((Instruction(if), Variable(temp_29), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_26))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_6), Variable(temp_27))), IrStat((Instruction(comp_eq), Variable(temp_26), Variable(temp_27), Variable(temp_61))), IrStat((Instruction(movl), Variable(temp_61), Variable(temp_28))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_28), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_6), Variable(temp_30))), IrStat((Instruction(if), Variable(temp_30), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_bool), Variable(_x), Variable(temp_45))), IrStat((Instruction(if), Variable(temp_45), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_6), Variable(temp_34))), IrStat((Instruction(if), Variable(temp_34), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_31))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_6), Variable(temp_32))), IrStat((Instruction(comp_eq), Variable(temp_31), Variable(temp_32), Variable(temp_69))), IrStat((Instruction(movl), Variable(temp_69), Variable(temp_33))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_33), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_6), Variable(temp_36))), IrStat((Instruction(if), Variable(temp_36), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(comp_eq), Variable(_x), Variable(temp_6), Variable(temp_72))), IrStat((Instruction(movl), Variable(temp_72), Variable(temp_35))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_35), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_6), Variable(temp_37))), IrStat((Instruction(if), Variable(temp_37), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_big), Variable(_x), Variable(temp_44))), IrStat((Instruction(if), Variable(temp_44), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_6), Variable(temp_38))), IrStat((Instruction(if), Variable(temp_38), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_6), Variable(temp_39))), IrStat((Instruction(if), Variable(temp_39), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_6), Variable(temp_43))), IrStat((Instruction(if), Variable(temp_43), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_big), Variable(_x), Variable(temp_40))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_6), Variable(temp_41))), IrStat((Instruction(call), Keyword(equal), Variable(temp_40), Variable(temp_41), Variable(temp_42))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_42), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(_temp_0), Variable(_temp_0))), IrStat((Instruction(return), Variable(_temp_0)))]
compression possible BB104 & BB108
compression possible BB112 & BB123
compression possible BB109 & BB113
compression possible BB122 & BB137
compression possible BB150 & BB165
compression possible BB147 & BB151
compression possible BB164 & BB175
compression possible BB188 & BB197
compression possible BB185 & BB189
compression possible BB196 & BB205
compression possible BB180 & BB184
compression possible BB142 & BB146
compressing 0
Liveness took 7 loops
total_loop_time=0.0042150020599365234
per_basic_block_time=0.0038759708404541016
update_parent_time=0.0001995563507080078
Liveness time taken: 0.004614830017089844
unknown instruction->98:return,_temp_0
Int graph time taken: 0.0008172988891601562
coloring done
Coloring time taken: 0.001220703125
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%ebx %ebx
done compiling
liveness_time=0.004614830017089844
interference_time=0.0008172988891601562
coloring_time=0.001220703125
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \nmovl %esi, %eax \ncmpl 8(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif101 \nelse101: \nendif101: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl %edi, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif102 \nelse102: \nendif102: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl $0 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif103 \nelse103: \nendif103: \njmp endif100 \nelse100: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl %edi, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif105 \nelse105: \nendif105: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \nmovl %esi, %eax \ncmpl 8(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif106 \nelse106: \nendif106: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \npushl $0 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif107 \nelse107: \nendif107: \njmp endif104 \nelse104: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl $0 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif109 \nelse109: \nendif109: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \npushl $0 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif110 \nelse110: \nendif110: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall equal\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif111 \nelse111: \nendif111: \njmp endif108 \nelse108: \nendif108: \nendif104: \nendif100: \nmovl %ebx, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func2
[IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(temp_9))), IrStat((Instruction(return), Variable(temp_9)))]
Liveness took 3 loops
total_loop_time=3.8623809814453125e-05
per_basic_block_time=3.5762786865234375e-05
update_parent_time=7.152557373046875e-07
Liveness time taken: 5.078315734863281e-05
unknown instruction->1:return,temp_9
Int graph time taken: 2.0742416381835938e-05
coloring done
Coloring time taken: 4.3392181396484375e-05
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%edi %edi
done compiling
liveness_time=5.078315734863281e-05
interference_time=2.0742416381835938e-05
coloring_time=4.3392181396484375e-05
code = '\n__func2: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
