def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

is_true = inject_big(create_closure(def __func1(x,free_vars_1):
	temp_0 = x == True
	return temp_0
,[]))
true_fun = inject_big(create_closure(def __func2(free_vars_2):
	return True
,[]))
temp_1 = eval(input())
temp_5 = is_true(temp_1)
if temp_5:
	temp_2 = get_fun_ptr(true_fun)(get_free_vars(true_fun))
	print(temp_2)
else:
	temp_3 = get_fun_ptr(true_fun)(get_free_vars(true_fun))
	if is_true(temp_3):
		temp_4 = inject_bool(0)
	else:
		temp_4 = inject_bool(1)
	
	print(temp_4)
