def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_5 = inject_int(0)
_temp_0 = [temp_5]
def __func1(_x,free_vars_1):
	temp_6 = inject_int(0)
	temp_7 = inject_int(0)
	temp_8 = free_vars_1[temp_6]
	temp_9 = temp_8[temp_7]
	temp_10 = _x + temp_9
	return temp_10

temp_11 = [_temp_0]
temp_12 = create_closure(__func1,temp_11)
_lambda_2 = inject_big(temp_12)
def __func2(_x,free_vars_2):
	temp_13 = inject_int(1)
	temp_14 = _x + temp_13
	return temp_14

temp_15 = []
temp_16 = create_closure(__func2,temp_15)
_lambda_1 = inject_big(temp_16)
temp_17 = inject_int(0)
temp_18 = inject_int(1)
_temp_0[temp_17] = - temp_18
temp_19 = inject_int(1)
temp_20 = inject_int(2)
_x = {temp_19:_lambda_1, temp_20:_lambda_2}
temp_21 = inject_int(1)
_temp_1 = _x[temp_21]
temp_22 = get_fun_ptr(_temp_1)
temp_23 = inject_int(23)
temp_24 = get_free_vars(_temp_1)
_temp_2 = temp_22(temp_23,temp_24)
print(_temp_2)
temp_25 = inject_int(2)
_temp_3 = _x[temp_25]
temp_26 = get_fun_ptr(_temp_3)
temp_27 = inject_int(23)
temp_28 = get_free_vars(_temp_3)
_temp_4 = temp_26(temp_27,temp_28)
print(_temp_4)