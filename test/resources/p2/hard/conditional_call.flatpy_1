def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_x,free_vars_1):
	temp_6 = inject_bool(1)
	temp_46 = is_int(_x)
	if temp_46:
		temp_25 = is_int(temp_6)
		if temp_25:
			temp_24 = _x == temp_6
			_temp_0 = inject_bool(temp_24)
		
		temp_29 = is_bool(temp_6)
		if temp_29:
			temp_26 = project_int(_x)
			temp_27 = project_bool(temp_6)
			temp_28 = temp_26 == temp_27
			_temp_0 = inject_bool(temp_28)
		
		temp_30 = is_big(temp_6)
		if temp_30:
			_temp_0 = inject_bool(0)
		
	else:
		temp_45 = is_bool(_x)
		if temp_45:
			temp_34 = is_int(temp_6)
			if temp_34:
				temp_31 = project_bool(_x)
				temp_32 = project_int(temp_6)
				temp_33 = temp_31 == temp_32
				_temp_0 = inject_bool(temp_33)
			
			temp_36 = is_bool(temp_6)
			if temp_36:
				temp_35 = _x == temp_6
				_temp_0 = inject_bool(temp_35)
			
			temp_37 = is_big(temp_6)
			if temp_37:
				_temp_0 = inject_bool(0)
			
		else:
			temp_44 = is_big(_x)
			if temp_44:
				temp_38 = is_int(temp_6)
				if temp_38:
					_temp_0 = inject_bool(0)
				
				temp_39 = is_bool(temp_6)
				if temp_39:
					_temp_0 = inject_bool(0)
				
				temp_43 = is_big(temp_6)
				if temp_43:
					temp_40 = project_big(_x)
					temp_41 = project_big(temp_6)
					temp_42 = equal(temp_40,temp_41)
					_temp_0 = inject_bool(temp_42)
				
			
		
	
	_temp_0 = _temp_0
	return _temp_0

temp_47 = inject_int(0)
temp_48 = create_list(temp_47)
temp_22 = inject_big(temp_48)
temp_7 = temp_22
temp_8 = create_closure(__func1,temp_7)
is_true = inject_big(temp_8)
def __func2(free_vars_2):
	temp_9 = inject_bool(1)
	return temp_9

temp_49 = inject_int(0)
temp_50 = create_list(temp_49)
temp_23 = inject_big(temp_50)
temp_10 = temp_23
temp_11 = create_closure(__func2,temp_10)
_true_fun = inject_big(temp_11)
temp_51 = eval(input())
temp_12 = temp_51
_temp_1 = temp_12
_temp_5 = is_true(_temp_1)
temp_21 = is_true(_temp_5)
if temp_21:
	temp_13 = get_fun_ptr(_true_fun)
	temp_14 = get_free_vars(_true_fun)
	_temp_2 = temp_13(temp_14)
	print(_temp_2)
else:
	temp_15 = get_fun_ptr(_true_fun)
	temp_16 = get_free_vars(_true_fun)
	_temp_3 = temp_15(temp_16)
	temp_17 = is_true(_temp_3)
	temp_20 = is_true(temp_17)
	if temp_20:
		temp_18 = inject_int(0)
		_temp_4 = inject_bool(temp_18)
	else:
		temp_19 = inject_int(1)
		_temp_4 = inject_bool(temp_19)
	
	print(_temp_4)
