compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/easy/free_vars_fun.py
valid p0
Visiting BinOp
flattening node's  value
collecting functiondef
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'sum': {'b', 'a'}}
fba.bound_vars={'__main__': {'b', 'a', 'sum'}, 'sum': {'temp_0'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'sum': {'b', 'a'}}
fba.bound_vars={'__main__': {'b', 'a', 'sum'}, 'sum': {'temp_0'}}
all_free=['b', 'a']
Before FLATTENING STAGE 1
a
b
a
b
sum
inject_big
create_closure
temp_0
free_vars_1
free_vars_1
temp_0
b
a
visiting Call
flattening node's  to_flat
visiting Call
flattening node's  to_flat
visiting Call
flattening node's  slice
visiting Call
visiting Call
flattening node's  slice
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  left
flattening node's  right
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
collecting functiondef
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fed10>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fe1d0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fdba0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fffa0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fe4d0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0ffd00>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fe380>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fffd0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0ff130>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5bf18070>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fe2c0>
RETURN: From visit_Module, node in node.body
<ast.Call object at 0x7f0a5bf18400>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0ff220>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5bf18430>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fe260>
RETURN: From visit_Module, node in node.body
<ast.Call object at 0x7f0a5bf180d0>
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f0a5c0fe1a0>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f0a5bf18160>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0ffb50>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5bf35bd0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0ffbe0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5bf36200>
From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5c0fead0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f0a5bf34250>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_5)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_1)))], BB2:
)
dict_keys(['__func1', 'module']) = 
Liveness took 3 loops
total_loop_time=0.0004868507385253906
per_basic_block_time=0.00048232078552246094
update_parent_time=7.152557373046875e-07
Liveness time taken: 0.0005171298980712891
Int graph time taken: 0.00046563148498535156
coloring done
Coloring time taken: 0.0011534690856933594
Some variable spilled
can't be converted into x86. Spilling
Liveness took 3 loops
total_loop_time=0.0004725456237792969
per_basic_block_time=0.0004684925079345703
update_parent_time=9.5367431640625e-07
Liveness time taken: 0.0005040168762207031
Int graph time taken: 0.00042176246643066406
coloring done
Coloring time taken: 0.0010471343994140625
Some variable spilled
But instructions ok
last_var =Variable(temp_16)
stack_size=4
done compiling
liveness_time=0.0010211467742919922
interference_time=0.0008873939514160156
coloring_time=0.002200603485107422
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $4, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %esi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \npushl %edi \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %esi, %ebx \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \ncall create_list\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \ncall inject_big\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \npushl %esi \npushl -4(%ebp) \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl -4(%ebp), %eax \nmovl %eax, -4(%ebp) \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $2 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl %edi \npushl %ebx \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $3 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %esi \npushl -4(%ebp) \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $2 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %esi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl -4(%ebp) \npushl %edi \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \npushl %edi \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %esi, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %eax \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_5))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_6))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_5), Variable(temp_7))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_8))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_9))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_8), Variable(temp_10))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_7), Variable(temp_6), Variable(temp_11))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_10), Variable(temp_9), Variable(temp_12))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_11), Variable(temp_52))), IrStat((Instruction(if), Variable(temp_52), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_12), Variable(temp_34))), IrStat((Instruction(if), Variable(temp_34), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_11), Variable(temp_26))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_12), Variable(temp_27))), IrStat((Instruction(movl), Variable(temp_27), Variable(temp_70))), IrStat((Instruction(addl), Variable(temp_26), Variable(temp_70))), IrStat((Instruction(movl), Variable(temp_70), Variable(temp_28))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_28), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_12), Variable(temp_33))), IrStat((Instruction(if), Variable(temp_33), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_73))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_12), Variable(temp_32))), IrStat((Instruction(if), Variable(temp_32), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_11), Variable(temp_29))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_12), Variable(temp_30))), IrStat((Instruction(movl), Variable(temp_30), Variable(temp_77))), IrStat((Instruction(addl), Variable(temp_29), Variable(temp_77))), IrStat((Instruction(movl), Variable(temp_77), Variable(temp_31))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_31), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_79))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_11), Variable(temp_51))), IrStat((Instruction(if), Variable(temp_51), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_12), Variable(temp_40))), IrStat((Instruction(if), Variable(temp_40), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_82))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_12), Variable(temp_39))), IrStat((Instruction(if), Variable(temp_39), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_11), Variable(temp_35))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_12), Variable(temp_36))), IrStat((Instruction(call), Keyword(add), Variable(temp_35), Variable(temp_36), Variable(temp_37))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_37), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_12), Variable(temp_38))), IrStat((Instruction(if), Variable(temp_38), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_89))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_90))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_11), Variable(temp_50))), IrStat((Instruction(if), Variable(temp_50), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_12), Variable(temp_49))), IrStat((Instruction(if), Variable(temp_49), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_11), Variable(temp_41))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_12), Variable(temp_42))), IrStat((Instruction(movl), Variable(temp_42), Variable(temp_95))), IrStat((Instruction(addl), Variable(temp_41), Variable(temp_95))), IrStat((Instruction(movl), Variable(temp_95), Variable(temp_43))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_43), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_12), Variable(temp_48))), IrStat((Instruction(if), Variable(temp_48), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_98))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_12), Variable(temp_47))), IrStat((Instruction(if), Variable(temp_47), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_11), Variable(temp_44))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_12), Variable(temp_45))), IrStat((Instruction(movl), Variable(temp_45), Variable(temp_102))), IrStat((Instruction(addl), Variable(temp_44), Variable(temp_102))), IrStat((Instruction(movl), Variable(temp_102), Variable(temp_46))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_46), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_104))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_105))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(_temp_0), Variable(_temp_0))), IrStat((Instruction(return), Variable(_temp_0)))]
compression possible BB104 & BB122
compression possible BB144 & BB148
compression possible BB137 & BB141
compression possible BB123 & BB127
compression possible BB186 & BB190
compression possible BB172 & BB176
compression possible BB165 & BB169
compression possible BB221 & BB225
compression possible BB214 & BB218
compression possible BB200 & BB204
compression possible BB195 & BB199
compression possible BB160 & BB164
compressing 0
Liveness took 5 loops
total_loop_time=0.003030061721801758
per_basic_block_time=0.002830982208251953
update_parent_time=0.00010800361633300781
Liveness time taken: 0.0034227371215820312
unknown instruction->117:return,_temp_0
Int graph time taken: 0.0009374618530273438
coloring done
Coloring time taken: 0.002338886260986328
Some variable spilled
But instructions ok
last_var =Variable(temp_7)
stack_size=8
return stat
return
%ebx %ebx
done compiling
liveness_time=0.0034227371215820312
interference_time=0.0009374618530273438
coloring_time=0.002338886260986328
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $8, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl %edi \npushl 8(%ebp) \ncall get_subscript\nmovl %eax, -8(%ebp) \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \npushl 8(%ebp) \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl -4(%ebp) \npushl -8(%ebp) \ncall get_subscript\nmovl %eax, -4(%ebp) \naddl $8, %esp \npushl %edi \npushl %esi \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl -4(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \npushl -4(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif101 \nelse101: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif102 \nelse102: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl -4(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif103 \nelse103: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif103: \nendif102: \nendif101: \njmp endif100 \nelse100: \npushl -4(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif105 \nelse105: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \npushl -4(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \njmp endif106 \nelse106: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif107 \nelse107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif107: \nendif106: \nendif105: \njmp endif104 \nelse104: \npushl -4(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl -4(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif109 \nelse109: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif110 \nelse110: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl -4(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif111 \nelse111: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif111: \nendif110: \nendif109: \njmp endif108 \nelse108: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif108: \nendif104: \nendif100: \nmovl %ebx, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
