def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

add2 = [0]
sub1 = [0]
add2sub1 = inject_big(create_closure(def __func1(b,free_vars_1):
	print(3)
	return get_fun_ptr(free_vars_1[0][0])(get_fun_ptr(free_vars_1[1][0])(b,get_free_vars(free_vars_1[1][0])),get_free_vars(free_vars_1[0][0]))
,[sub1, add2]))
add2[0] = inject_big(create_closure(def __func2(c,free_vars_2):
	print(2)
	return c + 2
,[]))
sub1[0] = inject_big(create_closure(def __func3(a,free_vars_3):
	print(1)
	return a + (- 1)
,[]))
x = 5
print(x)
while (get_fun_ptr(add2sub1)(x,get_free_vars(add2sub1)) != 10):
	print(x)
	x = get_fun_ptr(add2[0])(x,get_free_vars(add2[0]))

print(x)