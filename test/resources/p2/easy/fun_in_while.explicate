def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_0 = inject_int(0)
temp_57 = inject_big(create_list(inject_int(1)))
set_subscript(temp_57,inject_int(0),temp_0)
_add2 = temp_57
temp_1 = inject_int(0)
temp_58 = inject_big(create_list(inject_int(1)))
set_subscript(temp_58,inject_int(0),temp_1)
_sub1 = temp_58
def __func1(_b,free_vars_1):
	temp_2 = inject_int(3)
	print(temp_2)
	temp_3 = inject_int(0)
	temp_4 = inject_int(0)
	temp_5 = get_subscript(free_vars_1,temp_3)
	temp_6 = get_subscript(temp_5,temp_4)
	temp_7 = inject_int(1)
	temp_8 = inject_int(0)
	temp_9 = get_subscript(free_vars_1,temp_7)
	temp_10 = get_subscript(temp_9,temp_8)
	temp_11 = inject_int(1)
	temp_12 = inject_int(0)
	temp_13 = get_subscript(free_vars_1,temp_11)
	temp_14 = get_subscript(temp_13,temp_12)
	temp_15 = get_fun_ptr(temp_10)
	temp_16 = get_free_vars(temp_14)
	temp_17 = inject_int(0)
	temp_18 = inject_int(0)
	temp_19 = get_subscript(free_vars_1,temp_17)
	temp_20 = get_subscript(temp_19,temp_18)
	temp_21 = get_fun_ptr(temp_6)
	temp_22 = temp_15(_b,temp_16)
	temp_23 = get_free_vars(temp_20)
	temp_24 = temp_21(temp_22,temp_23)
	return temp_24

temp_59 = inject_big(create_list(inject_int(2)))
set_subscript(temp_59,inject_int(0),_sub1)
set_subscript(temp_59,inject_int(1),_add2)
temp_25 = temp_59
temp_26 = create_closure(__func1,temp_25)
_add2sub1 = inject_big(temp_26)
temp_27 = inject_int(0)
def __func2(_c,free_vars_2):
	temp_28 = inject_int(2)
	print(temp_28)
	temp_29 = inject_int(2)
	if is_int(_c):
		if is_int(temp_29):
			temp_30 = inject_int((project_int(_c)) + (project_int(temp_29)))
		else:
			if is_big(temp_29):
				error_pyobj()
			else:
				if is_bool(temp_29):
					temp_30 = inject_int((project_int(_c)) + (project_bool(temp_29)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(_c):
			if is_int(temp_29):
				error_pyobj()
			else:
				if is_big(temp_29):
					temp_30 = inject_big(add(project_big(_c),project_big(temp_29)))
				else:
					if is_bool(temp_29):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(_c):
				if is_int(temp_29):
					temp_30 = inject_int((project_bool(_c)) + (project_int(temp_29)))
				else:
					if is_big(temp_29):
						error_pyobj()
					else:
						if is_bool(temp_29):
							temp_30 = inject_bool((project_bool(_c)) + (project_bool(temp_29)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	temp_30 = temp_30
	return temp_30

temp_60 = inject_big(create_list(inject_int(0)))
temp_31 = temp_60
temp_32 = create_closure(__func2,temp_31)
set_subscript(_add2,temp_27,inject_big(temp_32))
temp_33 = inject_int(0)
def __func3(_a,free_vars_3):
	temp_34 = inject_int(1)
	print(temp_34)
	temp_35 = inject_int(1)
	temp_36 = - temp_35
	if is_int(_a):
		if is_int(temp_36):
			temp_37 = inject_int((project_int(_a)) + (project_int(temp_36)))
		else:
			if is_big(temp_36):
				error_pyobj()
			else:
				if is_bool(temp_36):
					temp_37 = inject_int((project_int(_a)) + (project_bool(temp_36)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(_a):
			if is_int(temp_36):
				error_pyobj()
			else:
				if is_big(temp_36):
					temp_37 = inject_big(add(project_big(_a),project_big(temp_36)))
				else:
					if is_bool(temp_36):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(_a):
				if is_int(temp_36):
					temp_37 = inject_int((project_bool(_a)) + (project_int(temp_36)))
				else:
					if is_big(temp_36):
						error_pyobj()
					else:
						if is_bool(temp_36):
							temp_37 = inject_bool((project_bool(_a)) + (project_bool(temp_36)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	temp_37 = temp_37
	return temp_37

temp_61 = inject_big(create_list(inject_int(0)))
temp_38 = temp_61
temp_39 = create_closure(__func3,temp_38)
set_subscript(_sub1,temp_33,inject_big(temp_39))
_x = inject_int(5)
print(_x)
temp_40 = get_fun_ptr(_add2sub1)
temp_41 = get_free_vars(_add2sub1)
temp_42 = temp_40(_x,temp_41)
temp_43 = inject_int(10)
if is_int(temp_42):
	if is_int(temp_43):
		temp_62 = inject_bool(temp_42 != temp_43)
	
	if is_bool(temp_43):
		temp_62 = inject_bool(project_int(temp_42) != project_bool(temp_43))
	
	if is_big(temp_43):
		temp_62 = inject_bool(1)
	
else:
	if is_bool(temp_42):
		if is_int(temp_43):
			temp_62 = inject_bool(project_bool(temp_42) != project_int(temp_43))
		
		if is_bool(temp_43):
			temp_62 = inject_bool(temp_42 != temp_43)
		
		if is_big(temp_43):
			temp_62 = inject_bool(1)
		
	else:
		if is_big(temp_42):
			if is_int(temp_43):
				temp_62 = inject_bool(1)
			
			if is_bool(temp_43):
				temp_62 = inject_bool(1)
			
			if is_big(temp_43):
				temp_62 = inject_bool(not_equal(project_big(temp_42),project_big(temp_43)))
			
		
	

temp_44 = temp_62
temp_56 = is_true(temp_44)
while (temp_56):
	print(_x)
	temp_45 = inject_int(0)
	temp_46 = get_subscript(_add2,temp_45)
	temp_47 = inject_int(0)
	temp_48 = get_subscript(_add2,temp_47)
	temp_49 = get_fun_ptr(temp_46)
	temp_50 = get_free_vars(temp_48)
	_x = temp_49(_x,temp_50)
	temp_51 = get_fun_ptr(_add2sub1)
	temp_52 = get_free_vars(_add2sub1)
	temp_53 = temp_51(_x,temp_52)
	temp_54 = inject_int(10)
	if is_int(temp_53):
		if is_int(temp_54):
			temp_55 = inject_bool(temp_53 != temp_54)
		
		if is_bool(temp_54):
			temp_55 = inject_bool(project_int(temp_53) != project_bool(temp_54))
		
		if is_big(temp_54):
			temp_55 = inject_bool(1)
		
	else:
		if is_bool(temp_53):
			if is_int(temp_54):
				temp_55 = inject_bool(project_bool(temp_53) != project_int(temp_54))
			
			if is_bool(temp_54):
				temp_55 = inject_bool(temp_53 != temp_54)
			
			if is_big(temp_54):
				temp_55 = inject_bool(1)
			
		else:
			if is_big(temp_53):
				if is_int(temp_54):
					temp_55 = inject_bool(1)
				
				if is_bool(temp_54):
					temp_55 = inject_bool(1)
				
				if is_big(temp_54):
					temp_55 = inject_bool(not_equal(project_big(temp_53),project_big(temp_54)))
				
			
		
	
	temp_55 = temp_55
	temp_56 = is_true(temp_55)

print(_x)