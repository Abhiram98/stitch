compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/easy/simple_fun.py
valid p0
visiting Call
visiting Call
flattening node's  arg_i
collecting functiondef
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'fun': set()}
fba.bound_vars={'__main__': {'fun', 'temp_0'}, 'fun': set()}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'fun': set()}
fba.bound_vars={'__main__': {'fun', 'temp_0'}, 'fun': set()}
all_free=[]
Before FLATTENING STAGE 1
fun
inject_big
create_closure
temp_0
get_fun_ptr
fun
get_free_vars
fun
print
temp_0
visiting Call
visiting Call
visiting Call
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
visiting Call
collecting functiondef
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f3b35dd2350>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f3b35dd2b30>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd27a0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd3e20>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd28c0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd3100>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd1d50>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd2da0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd2aa0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd39d0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd2bc0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd3a60>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd2080>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3b35dd3670>
From visit_Module, node in node.body
<ast.Expr object at 0x7f3b35dd2320>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f3b35dd3340>
After Explicate Stage
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
After Flattening Stage 2
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($42), Variable(temp_1)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_7)))], BB2:
)
dict_keys(['__func1', 'module']) = 
Liveness took 3 loops
total_loop_time=0.0001747608184814453
per_basic_block_time=0.00016999244689941406
update_parent_time=1.430511474609375e-06
Liveness time taken: 0.00020956993103027344
Int graph time taken: 0.00010085105895996094
coloring done
Coloring time taken: 0.0002689361572265625
stack_size=0
done compiling
liveness_time=0.00020956993103027344
interference_time=0.00010085105895996094
coloring_time=0.0002689361572265625
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall get_fun_ptr\nmovl %eax, %ebx \naddl $4, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall *%ebx\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($42), Variable(temp_1))), IrStat((Instruction(return), Variable(temp_1)))]
Liveness took 3 loops
total_loop_time=3.933906555175781e-05
per_basic_block_time=3.5762786865234375e-05
update_parent_time=7.152557373046875e-07
Liveness time taken: 4.887580871582031e-05
unknown instruction->1:return,temp_1
Int graph time taken: 2.6464462280273438e-05
coloring done
Coloring time taken: 4.267692565917969e-05
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%edi %edi
done compiling
liveness_time=4.887580871582031e-05
interference_time=2.6464462280273438e-05
coloring_time=4.267692565917969e-05
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $42 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
