compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/easy/fun_with_if.py
valid p0
found else while unparsing
Found IfExp in flat ast
IN UNPARSE
<ast.IfExp object at 0x7f3f3c7da740>
flattening test to  <class 'ast.If'>
flattening node's  test
visiting IfExp!
<class 'ast.Call'>
visiting Call
visiting Call
flattening IfExp test
flattening node's  test
flattening node's  value
visiting Call
collecting functiondef
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'fun': set()}
fba.bound_vars={'__main__': {'x', 'temp_3', 'temp_2', 'temp_1', 'fun'}, 'fun': {'x', 'temp_0'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'fun': set()}
fba.bound_vars={'__main__': {'x', 'temp_3', 'temp_2', 'temp_1', 'fun'}, 'fun': {'x', 'temp_0'}}
all_free=[]
found else while unparsing
found else while unparsing
Before FLATTENING STAGE 1
fun
inject_big
create_closure
temp_0
x
is_true
temp_0
temp_1
eval
input
temp_2
get_fun_ptr
fun
_temp_1
get_free_vars
fun
is_true
is_true
temp_2
temp_3
temp_3
x
temp_3
print
x
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
flattening node's  to_flat
visiting Call
visiting Call
flattening node's  value
visiting Call
flattening node's  value
flattening test to  <class 'ast.If'>
flattening node's  test
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
collecting functiondef
found else while unparsing
found else while unparsing
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f3f3c7daa40>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f3f3c608130>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7dbbb0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7da1a0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7dbc40>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60abf0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7d9f00>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60ab60>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7dbd30>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60b250>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7dab90>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60abc0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7dbd90>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60ab90>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7dbeb0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60ab30>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7dab00>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60a800>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7dbfa0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60a7d0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c608070>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60b430>
From visit_Module, node in node.body
<ast.If object at 0x7f3f3c7da230>
RETURN: From visit_Module, node in node.body
<ast.If object at 0x7f3f3c60b460>
From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c7daa10>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f3f3c60a500>
From visit_Module, node in node.body
<ast.Expr object at 0x7f3f3c7da770>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f3f3c60a230>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
not flattening test <class 'ast.Name'>
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
not flattening test <class 'ast.Name'>
visiting Call
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(temp_4)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_39)))], BB2:
)
dict_keys(['__func1', 'module']) = 
compression possible BB4 & BB29
compressing 0
Liveness took 4 loops
total_loop_time=0.0005023479461669922
per_basic_block_time=0.0004839897155761719
update_parent_time=8.106231689453125e-06
Liveness time taken: 0.0005316734313964844
Int graph time taken: 0.0001800060272216797
coloring done
Coloring time taken: 0.0005340576171875
stack_size=0
done compiling
liveness_time=0.0005316734313964844
interference_time=0.0001800060272216797
coloring_time=0.0005340576171875
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %esi \naddl $4, %esp \ncall eval_input_pyobj \nmovl %eax, %edi \nmovl %edi, %eax \nmovl %eax, %ebx \npushl %esi \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall get_free_vars\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl %ebx \ncall *%edi\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else0 \nif0: \npushl $10 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \njmp endif0 \nelse0: \npushl $20 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \nendif0: \nmovl %edi, %eax \npushl %eax \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(temp_4))), IrStat((Instruction(call), Keyword(is_int), Variable(_x), Variable(temp_38))), IrStat((Instruction(if), Variable(temp_38), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_4), Variable(temp_17))), IrStat((Instruction(if), Variable(temp_17), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(comp_eq), Variable(_x), Variable(temp_4), Variable(temp_46))), IrStat((Instruction(movl), Variable(temp_46), Variable(temp_16))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_16), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_4), Variable(temp_21))), IrStat((Instruction(if), Variable(temp_21), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_18))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_4), Variable(temp_19))), IrStat((Instruction(comp_eq), Variable(temp_18), Variable(temp_19), Variable(temp_51))), IrStat((Instruction(movl), Variable(temp_51), Variable(temp_20))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_20), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_4), Variable(temp_22))), IrStat((Instruction(if), Variable(temp_22), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_bool), Variable(_x), Variable(temp_37))), IrStat((Instruction(if), Variable(temp_37), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_4), Variable(temp_26))), IrStat((Instruction(if), Variable(temp_26), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_23))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_4), Variable(temp_24))), IrStat((Instruction(comp_eq), Variable(temp_23), Variable(temp_24), Variable(temp_59))), IrStat((Instruction(movl), Variable(temp_59), Variable(temp_25))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_25), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_4), Variable(temp_28))), IrStat((Instruction(if), Variable(temp_28), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(comp_eq), Variable(_x), Variable(temp_4), Variable(temp_62))), IrStat((Instruction(movl), Variable(temp_62), Variable(temp_27))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_27), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_4), Variable(temp_29))), IrStat((Instruction(if), Variable(temp_29), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_big), Variable(_x), Variable(temp_36))), IrStat((Instruction(if), Variable(temp_36), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_4), Variable(temp_30))), IrStat((Instruction(if), Variable(temp_30), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_4), Variable(temp_31))), IrStat((Instruction(if), Variable(temp_31), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_4), Variable(temp_35))), IrStat((Instruction(if), Variable(temp_35), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_big), Variable(_x), Variable(temp_32))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_4), Variable(temp_33))), IrStat((Instruction(call), Keyword(equal), Variable(temp_32), Variable(temp_33), Variable(temp_34))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_34), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(_temp_0), Variable(_temp_0))), IrStat((Instruction(call), Keyword(is_true), Variable(_temp_0), Variable(temp_7))), IrStat((Instruction(if), Variable(temp_7), Keyword(if112), Keyword(else112))), IrStat((Instruction(label), Keyword(if112))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(temp_5))), IrStat((Instruction(return), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif112))), IrStat((Instruction(label), Keyword(else112))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(temp_6))), IrStat((Instruction(return), Variable(temp_6))), IrStat((Instruction(label), Keyword(endif112)))]
compression possible BB104 & BB108
compression possible BB112 & BB123
compression possible BB109 & BB113
compression possible BB122 & BB137
compression possible BB107 & BB221
compression possible BB150 & BB165
compression possible BB147 & BB151
compression possible BB164 & BB175
compression possible BB188 & BB197
compression possible BB185 & BB189
compression possible BB196 & BB205
compression possible BB180 & BB184
compression possible BB142 & BB146
compressing 0
Liveness took 7 loops
total_loop_time=0.0045108795166015625
per_basic_block_time=0.004158496856689453
update_parent_time=0.0002071857452392578
Liveness time taken: 0.004983663558959961
unknown instruction->102:return,temp_5
unknown instruction->106:return,temp_6
Int graph time taken: 0.0008485317230224609
coloring done
Coloring time taken: 0.0013332366943359375
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%edi %edi
return stat
return
%edi %edi
done compiling
liveness_time=0.004983663558959961
interference_time=0.0008485317230224609
coloring_time=0.0013332366943359375
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \nmovl %esi, %eax \ncmpl 8(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif101 \nelse101: \nendif101: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl %ebx, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif102 \nelse102: \nendif102: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl $0 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif103 \nelse103: \nendif103: \njmp endif100 \nelse100: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl %ebx, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif105 \nelse105: \nendif105: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \nmovl %esi, %eax \ncmpl 8(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif106 \nelse106: \nendif106: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \npushl $0 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif107 \nelse107: \nendif107: \njmp endif104 \nelse104: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl $0 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif109 \nelse109: \nendif109: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \npushl $0 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif110 \nelse110: \nendif110: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall equal\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif111 \nelse111: \nendif111: \njmp endif108 \nelse108: \nendif108: \nendif104: \nendif100: \npushl %ebx \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else112 \nif112: \npushl $1 \ncall inject_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax\n\njmp endif112 \nelse112: \npushl $0 \ncall inject_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax\n\nendif112: \npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
