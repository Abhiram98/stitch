def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_x,free_vars_1):
	temp_4 = inject_bool(1)
	temp_38 = is_int(_x)
	if temp_38:
		temp_17 = is_int(temp_4)
		if temp_17:
			temp_16 = _x == temp_4
			_temp_0 = inject_bool(temp_16)
		
		temp_21 = is_bool(temp_4)
		if temp_21:
			temp_18 = project_int(_x)
			temp_19 = project_bool(temp_4)
			temp_20 = temp_18 == temp_19
			_temp_0 = inject_bool(temp_20)
		
		temp_22 = is_big(temp_4)
		if temp_22:
			_temp_0 = inject_bool(0)
		
	else:
		temp_37 = is_bool(_x)
		if temp_37:
			temp_26 = is_int(temp_4)
			if temp_26:
				temp_23 = project_bool(_x)
				temp_24 = project_int(temp_4)
				temp_25 = temp_23 == temp_24
				_temp_0 = inject_bool(temp_25)
			
			temp_28 = is_bool(temp_4)
			if temp_28:
				temp_27 = _x == temp_4
				_temp_0 = inject_bool(temp_27)
			
			temp_29 = is_big(temp_4)
			if temp_29:
				_temp_0 = inject_bool(0)
			
		else:
			temp_36 = is_big(_x)
			if temp_36:
				temp_30 = is_int(temp_4)
				if temp_30:
					_temp_0 = inject_bool(0)
				
				temp_31 = is_bool(temp_4)
				if temp_31:
					_temp_0 = inject_bool(0)
				
				temp_35 = is_big(temp_4)
				if temp_35:
					temp_32 = project_big(_x)
					temp_33 = project_big(temp_4)
					temp_34 = equal(temp_32,temp_33)
					_temp_0 = inject_bool(temp_34)
				
			
		
	
	_temp_0 = _temp_0
	temp_7 = is_true(_temp_0)
	if temp_7:
		temp_5 = inject_bool(1)
		return temp_5
	else:
		temp_6 = inject_bool(0)
		return temp_6
	

temp_39 = inject_int(0)
temp_40 = create_list(temp_39)
temp_15 = inject_big(temp_40)
temp_8 = temp_15
temp_9 = create_closure(__func1,temp_8)
_fun = inject_big(temp_9)
temp_41 = eval(input())
temp_10 = temp_41
_temp_1 = temp_10
temp_11 = get_fun_ptr(_fun)
temp_12 = get_free_vars(_fun)
_temp_2 = temp_11(_temp_1,temp_12)
temp_13 = is_true(_temp_2)
temp_14 = is_true(temp_13)
if temp_14:
	_temp_3 = inject_int(10)
else:
	_temp_3 = inject_int(20)

_x = _temp_3
print(_x)