def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_1 = inject_int(0)
temp_15 = inject_big(create_list(inject_int(1)))
set_subscript(temp_15,inject_int(0),temp_1)
_a = temp_15
temp_2 = inject_int(0)
temp_16 = inject_big(create_list(inject_int(1)))
set_subscript(temp_16,inject_int(0),temp_2)
_b = temp_16
temp_3 = inject_int(0)
set_subscript(_a,temp_3,inject_int(2))
temp_4 = inject_int(0)
set_subscript(_b,temp_4,inject_int(3))
def __func1(free_vars_1):
	temp_5 = inject_int(1)
	temp_6 = inject_int(0)
	temp_7 = get_subscript(free_vars_1,temp_5)
	temp_8 = inject_int(0)
	temp_9 = inject_int(0)
	temp_10 = get_subscript(free_vars_1,temp_8)
	temp_11 = get_subscript(temp_7,temp_6)
	temp_12 = get_subscript(temp_10,temp_9)
	if is_int(temp_11):
		if is_int(temp_12):
			_temp_0 = inject_int((project_int(temp_11)) + (project_int(temp_12)))
		else:
			if is_big(temp_12):
				error_pyobj()
			else:
				if is_bool(temp_12):
					_temp_0 = inject_int((project_int(temp_11)) + (project_bool(temp_12)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(temp_11):
			if is_int(temp_12):
				error_pyobj()
			else:
				if is_big(temp_12):
					_temp_0 = inject_big(add(project_big(temp_11),project_big(temp_12)))
				else:
					if is_bool(temp_12):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(temp_11):
				if is_int(temp_12):
					_temp_0 = inject_int((project_bool(temp_11)) + (project_int(temp_12)))
				else:
					if is_big(temp_12):
						error_pyobj()
					else:
						if is_bool(temp_12):
							_temp_0 = inject_bool((project_bool(temp_11)) + (project_bool(temp_12)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	_temp_0 = _temp_0
	return _temp_0

temp_17 = inject_big(create_list(inject_int(2)))
set_subscript(temp_17,inject_int(0),_b)
set_subscript(temp_17,inject_int(1),_a)
temp_13 = temp_17
temp_14 = create_closure(__func1,temp_13)
_sum = inject_big(temp_14)