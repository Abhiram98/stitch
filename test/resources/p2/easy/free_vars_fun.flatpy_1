def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_1 = inject_int(0)
temp_18 = inject_int(1)
temp_19 = create_list(temp_18)
temp_15 = inject_big(temp_19)
temp_20 = inject_int(0)
set_subscript(temp_15,temp_20,temp_1)
_a = temp_15
temp_2 = inject_int(0)
temp_21 = inject_int(1)
temp_22 = create_list(temp_21)
temp_16 = inject_big(temp_22)
temp_23 = inject_int(0)
set_subscript(temp_16,temp_23,temp_2)
_b = temp_16
temp_3 = inject_int(0)
temp_24 = inject_int(2)
set_subscript(_a,temp_3,temp_24)
temp_4 = inject_int(0)
temp_25 = inject_int(3)
set_subscript(_b,temp_4,temp_25)
def __func1(free_vars_1):
	temp_5 = inject_int(1)
	temp_6 = inject_int(0)
	temp_7 = get_subscript(free_vars_1,temp_5)
	temp_8 = inject_int(0)
	temp_9 = inject_int(0)
	temp_10 = get_subscript(free_vars_1,temp_8)
	temp_11 = get_subscript(temp_7,temp_6)
	temp_12 = get_subscript(temp_10,temp_9)
	temp_52 = is_int(temp_11)
	if temp_52:
		temp_34 = is_int(temp_12)
		if temp_34:
			temp_26 = project_int(temp_11)
			temp_27 = project_int(temp_12)
			temp_28 = temp_26 + temp_27
			_temp_0 = inject_int(temp_28)
		else:
			temp_33 = is_big(temp_12)
			if temp_33:
				error_pyobj()
			else:
				temp_32 = is_bool(temp_12)
				if temp_32:
					temp_29 = project_int(temp_11)
					temp_30 = project_bool(temp_12)
					temp_31 = temp_29 + temp_30
					_temp_0 = inject_int(temp_31)
				else:
					error_pyobj()
				
			
		
	else:
		temp_51 = is_big(temp_11)
		if temp_51:
			temp_40 = is_int(temp_12)
			if temp_40:
				error_pyobj()
			else:
				temp_39 = is_big(temp_12)
				if temp_39:
					temp_35 = project_big(temp_11)
					temp_36 = project_big(temp_12)
					temp_37 = add(temp_35,temp_36)
					_temp_0 = inject_big(temp_37)
				else:
					temp_38 = is_bool(temp_12)
					if temp_38:
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			temp_50 = is_bool(temp_11)
			if temp_50:
				temp_49 = is_int(temp_12)
				if temp_49:
					temp_41 = project_bool(temp_11)
					temp_42 = project_int(temp_12)
					temp_43 = temp_41 + temp_42
					_temp_0 = inject_int(temp_43)
				else:
					temp_48 = is_big(temp_12)
					if temp_48:
						error_pyobj()
					else:
						temp_47 = is_bool(temp_12)
						if temp_47:
							temp_44 = project_bool(temp_11)
							temp_45 = project_bool(temp_12)
							temp_46 = temp_44 + temp_45
							_temp_0 = inject_bool(temp_46)
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	_temp_0 = _temp_0
	return _temp_0

temp_53 = inject_int(2)
temp_54 = create_list(temp_53)
temp_17 = inject_big(temp_54)
temp_55 = inject_int(0)
set_subscript(temp_17,temp_55,_b)
temp_56 = inject_int(1)
set_subscript(temp_17,temp_56,_a)
temp_13 = temp_17
temp_14 = create_closure(__func1,temp_13)
_sum = inject_big(temp_14)