compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/easy/while_in_fun.py
valid p0
Visiting BinOp
flattening node's  test
while body size 1
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
collecting functiondef
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'while_in_fun': set()}
fba.bound_vars={'__main__': {'temp_2', 'while_in_fun', 'temp_1', 'temp_3'}, 'while_in_fun': {'y', 'x', 'temp_0', '_x'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'while_in_fun': set()}
fba.bound_vars={'__main__': {'temp_2', 'while_in_fun', 'temp_1', 'temp_3'}, 'while_in_fun': {'y', 'x', 'temp_0', '_x'}}
all_free=[]
Before FLATTENING STAGE 1
while_in_fun
inject_big
create_closure
temp_0
x
y
is_true
temp_0
x
x
is_true
temp_0
x
temp_1
eval
input
temp_2
eval
input
temp_3
get_fun_ptr
while_in_fun
_temp_1
_temp_2
get_free_vars
while_in_fun
print
temp_3
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
flattening node's  right
visiting Call
flattening node's  test
while body size 2
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
visiting Call
collecting functiondef
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7fc7c6e22950>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7fc7c6c4d090>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c4c190>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d690>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c4c520>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d450>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6e21e70>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d3f0>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c4cdf0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d4e0>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6e22170>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d420>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c4cfa0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d3c0>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6e220e0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d360>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c4d000>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d300>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c4d120>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d6c0>
From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6e22200>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7fc7c6c8d6f0>
From visit_Module, node in node.body
<ast.Expr object at 0x7fc7c6e22920>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7fc7c6c8d720>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
while body size 4
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(is_int), Variable(_x), Variable(temp_35)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_64)))], BB2:
)
dict_keys(['__func1', 'module']) = 
Liveness took 3 loops
total_loop_time=0.00021576881408691406
per_basic_block_time=0.0002110004425048828
update_parent_time=1.1920928955078125e-06
Liveness time taken: 0.000244140625
Int graph time taken: 0.00017523765563964844
coloring done
Coloring time taken: 0.0004985332489013672
Some variable spilled
But instructions ok
last_var =Variable(_temp_2)
stack_size=4
done compiling
liveness_time=0.000244140625
interference_time=0.00017523765563964844
coloring_time=0.0004985332489013672
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $4, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \ncall eval_input_pyobj \nmovl %eax, %edi \nmovl %edi, %eax \nmovl %eax, %esi \ncall eval_input_pyobj \nmovl %eax, %edi \nmovl %edi, %eax \nmovl %eax, -4(%ebp) \npushl %ebx \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall get_free_vars\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl -4(%ebp) \npushl %esi \ncall *%edi\nmovl %eax, %edi \naddl $12, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(is_int), Variable(_x), Variable(temp_35))), IrStat((Instruction(if), Variable(temp_35), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_14))), IrStat((Instruction(if), Variable(temp_14), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(comp_neq), Variable(_x), Variable(_y), Variable(temp_71))), IrStat((Instruction(movl), Variable(temp_71), Variable(temp_13))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_13), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_18))), IrStat((Instruction(if), Variable(temp_18), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_15))), IrStat((Instruction(call), Keyword(project_bool), Variable(_y), Variable(temp_16))), IrStat((Instruction(comp_neq), Variable(temp_15), Variable(temp_16), Variable(temp_76))), IrStat((Instruction(movl), Variable(temp_76), Variable(temp_17))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_17), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_19))), IrStat((Instruction(if), Variable(temp_19), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_bool), Variable(_x), Variable(temp_34))), IrStat((Instruction(if), Variable(temp_34), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_23))), IrStat((Instruction(if), Variable(temp_23), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_20))), IrStat((Instruction(call), Keyword(project_int), Variable(_y), Variable(temp_21))), IrStat((Instruction(comp_neq), Variable(temp_20), Variable(temp_21), Variable(temp_84))), IrStat((Instruction(movl), Variable(temp_84), Variable(temp_22))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_22), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_25))), IrStat((Instruction(if), Variable(temp_25), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(comp_neq), Variable(_x), Variable(_y), Variable(temp_87))), IrStat((Instruction(movl), Variable(temp_87), Variable(temp_24))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_24), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_26))), IrStat((Instruction(if), Variable(temp_26), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_big), Variable(_x), Variable(temp_33))), IrStat((Instruction(if), Variable(temp_33), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_27))), IrStat((Instruction(if), Variable(temp_27), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_28))), IrStat((Instruction(if), Variable(temp_28), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($1), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_32))), IrStat((Instruction(if), Variable(temp_32), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_big), Variable(_x), Variable(temp_29))), IrStat((Instruction(call), Keyword(project_big), Variable(_y), Variable(temp_30))), IrStat((Instruction(call), Keyword(not_equal), Variable(temp_29), Variable(temp_30), Variable(temp_31))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_31), Variable(_temp_0))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(_temp_0), Variable(_temp_0))), IrStat((Instruction(call), Keyword(is_true), Variable(_temp_0), Variable(temp_5))), IrStat((Instruction(label), Keyword(while100))), IrStat((Instruction(while), Variable(temp_5), Keyword(loop100), Keyword(endwhile100))), IrStat((Instruction(label), Keyword(loop100))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_4))), IrStat((Instruction(call), Keyword(is_int), Variable(_x), Variable(temp_62))), IrStat((Instruction(if), Variable(temp_62), Keyword(if112), Keyword(else112))), IrStat((Instruction(label), Keyword(if112))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_4), Variable(temp_44))), IrStat((Instruction(if), Variable(temp_44), Keyword(if113), Keyword(else113))), IrStat((Instruction(label), Keyword(if113))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_36))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_4), Variable(temp_37))), IrStat((Instruction(movl), Variable(temp_37), Variable(temp_107))), IrStat((Instruction(addl), Variable(temp_36), Variable(temp_107))), IrStat((Instruction(movl), Variable(temp_107), Variable(temp_38))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_38), Variable(_x))), IrStat((Instruction(jmp), Keyword(endif113))), IrStat((Instruction(label), Keyword(else113))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_4), Variable(temp_43))), IrStat((Instruction(if), Variable(temp_43), Keyword(if114), Keyword(else114))), IrStat((Instruction(label), Keyword(if114))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_110))), IrStat((Instruction(jmp), Keyword(endif114))), IrStat((Instruction(label), Keyword(else114))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_4), Variable(temp_42))), IrStat((Instruction(if), Variable(temp_42), Keyword(if115), Keyword(else115))), IrStat((Instruction(label), Keyword(if115))), IrStat((Instruction(call), Keyword(project_int), Variable(_x), Variable(temp_39))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_4), Variable(temp_40))), IrStat((Instruction(movl), Variable(temp_40), Variable(temp_114))), IrStat((Instruction(addl), Variable(temp_39), Variable(temp_114))), IrStat((Instruction(movl), Variable(temp_114), Variable(temp_41))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_41), Variable(_x))), IrStat((Instruction(jmp), Keyword(endif115))), IrStat((Instruction(label), Keyword(else115))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_116))), IrStat((Instruction(label), Keyword(endif115))), IrStat((Instruction(label), Keyword(endif114))), IrStat((Instruction(label), Keyword(endif113))), IrStat((Instruction(jmp), Keyword(endif112))), IrStat((Instruction(label), Keyword(else112))), IrStat((Instruction(call), Keyword(is_big), Variable(_x), Variable(temp_61))), IrStat((Instruction(if), Variable(temp_61), Keyword(if116), Keyword(else116))), IrStat((Instruction(label), Keyword(if116))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_4), Variable(temp_50))), IrStat((Instruction(if), Variable(temp_50), Keyword(if117), Keyword(else117))), IrStat((Instruction(label), Keyword(if117))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_119))), IrStat((Instruction(jmp), Keyword(endif117))), IrStat((Instruction(label), Keyword(else117))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_4), Variable(temp_49))), IrStat((Instruction(if), Variable(temp_49), Keyword(if118), Keyword(else118))), IrStat((Instruction(label), Keyword(if118))), IrStat((Instruction(call), Keyword(project_big), Variable(_x), Variable(temp_45))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_4), Variable(temp_46))), IrStat((Instruction(call), Keyword(add), Variable(temp_45), Variable(temp_46), Variable(temp_47))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_47), Variable(_x))), IrStat((Instruction(jmp), Keyword(endif118))), IrStat((Instruction(label), Keyword(else118))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_4), Variable(temp_48))), IrStat((Instruction(if), Variable(temp_48), Keyword(if119), Keyword(else119))), IrStat((Instruction(label), Keyword(if119))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_126))), IrStat((Instruction(jmp), Keyword(endif119))), IrStat((Instruction(label), Keyword(else119))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_127))), IrStat((Instruction(label), Keyword(endif119))), IrStat((Instruction(label), Keyword(endif118))), IrStat((Instruction(label), Keyword(endif117))), IrStat((Instruction(jmp), Keyword(endif116))), IrStat((Instruction(label), Keyword(else116))), IrStat((Instruction(call), Keyword(is_bool), Variable(_x), Variable(temp_60))), IrStat((Instruction(if), Variable(temp_60), Keyword(if120), Keyword(else120))), IrStat((Instruction(label), Keyword(if120))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_4), Variable(temp_59))), IrStat((Instruction(if), Variable(temp_59), Keyword(if121), Keyword(else121))), IrStat((Instruction(label), Keyword(if121))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_51))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_4), Variable(temp_52))), IrStat((Instruction(movl), Variable(temp_52), Variable(temp_132))), IrStat((Instruction(addl), Variable(temp_51), Variable(temp_132))), IrStat((Instruction(movl), Variable(temp_132), Variable(temp_53))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_53), Variable(_x))), IrStat((Instruction(jmp), Keyword(endif121))), IrStat((Instruction(label), Keyword(else121))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_4), Variable(temp_58))), IrStat((Instruction(if), Variable(temp_58), Keyword(if122), Keyword(else122))), IrStat((Instruction(label), Keyword(if122))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_135))), IrStat((Instruction(jmp), Keyword(endif122))), IrStat((Instruction(label), Keyword(else122))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_4), Variable(temp_57))), IrStat((Instruction(if), Variable(temp_57), Keyword(if123), Keyword(else123))), IrStat((Instruction(label), Keyword(if123))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x), Variable(temp_54))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_4), Variable(temp_55))), IrStat((Instruction(movl), Variable(temp_55), Variable(temp_139))), IrStat((Instruction(addl), Variable(temp_54), Variable(temp_139))), IrStat((Instruction(movl), Variable(temp_139), Variable(temp_56))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_56), Variable(_x))), IrStat((Instruction(jmp), Keyword(endif123))), IrStat((Instruction(label), Keyword(else123))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_141))), IrStat((Instruction(label), Keyword(endif123))), IrStat((Instruction(label), Keyword(endif122))), IrStat((Instruction(label), Keyword(endif121))), IrStat((Instruction(jmp), Keyword(endif120))), IrStat((Instruction(label), Keyword(else120))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_142))), IrStat((Instruction(label), Keyword(endif120))), IrStat((Instruction(label), Keyword(endif116))), IrStat((Instruction(label), Keyword(endif112))), IrStat((Instruction(movl), Variable(_x), Variable(_x))), IrStat((Instruction(call), Keyword(is_true), Variable(_temp_0), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(while100))), IrStat((Instruction(label), Keyword(endwhile100))), IrStat((Instruction(return), Variable(_x)))]
compression possible BB104 & BB106
compression possible BB110 & BB121
compression possible BB107 & BB111
compression possible BB120 & BB135
compression possible BB148 & BB163
compression possible BB145 & BB149
compression possible BB162 & BB173
compression possible BB186 & BB195
compression possible BB183 & BB187
compression possible BB194 & BB203
compression possible BB178 & BB182
compression possible BB140 & BB144
compression possible BB219 & BB225
compression possible BB247 & BB251
compression possible BB240 & BB244
compression possible BB226 & BB230
compression possible BB289 & BB293
compression possible BB275 & BB279
compression possible BB268 & BB272
compression possible BB324 & BB328
compression possible BB317 & BB321
compression possible BB303 & BB307
compression possible BB298 & BB302
compression possible BB263 & BB267
compressing 0
Liveness took 8 loops
total_loop_time=0.009946584701538086
per_basic_block_time=0.009163141250610352
update_parent_time=0.0004470348358154297
Liveness time taken: 0.011589527130126953
unknown instruction->214:return,_x
Int graph time taken: 0.0026280879974365234
coloring done
Coloring time taken: 0.007580280303955078
Some variable spilled
can't be converted into x86. Spilling
can't be converted into x86. Spilling
can't be converted into x86. Spilling
Liveness took 8 loops
total_loop_time=0.009757757186889648
per_basic_block_time=0.009000062942504883
update_parent_time=0.0004329681396484375
Liveness time taken: 0.011384248733520508
unknown instruction->217:return,_x
Int graph time taken: 0.0019698143005371094
coloring done
Coloring time taken: 0.0065844058990478516
Some variable spilled
But instructions ok
stack_size=0
return stat
return
8(%ebp) 8
done compiling
liveness_time=0.02297377586364746
interference_time=0.004597902297973633
coloring_time=0.01416468620300293
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl 12(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \nmovl 8(%ebp), %ecx \nmovl 12(%ebp), %eax \ncmpl %ecx, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif101 \nelse101: \nendif101: \npushl 12(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl 12(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \ncmpl %edi, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif102 \nelse102: \nendif102: \npushl 12(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl $1 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif103 \nelse103: \nendif103: \njmp endif100 \nelse100: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl 12(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \npushl 12(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl %ebx, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif105 \nelse105: \nendif105: \npushl 12(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \nmovl 8(%ebp), %ecx \nmovl 12(%ebp), %eax \ncmpl %ecx, %eax \nsetne %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif106 \nelse106: \nendif106: \npushl 12(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \npushl $1 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif107 \nelse107: \nendif107: \njmp endif104 \nelse104: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl 12(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl $1 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif109 \nelse109: \nendif109: \npushl 12(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \npushl $1 \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif110 \nelse110: \nendif110: \npushl 12(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl 12(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall not_equal\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif111 \nelse111: \nendif111: \njmp endif108 \nelse108: \nendif108: \nendif104: \nendif100: \npushl %ebx \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nwhile100: \nmovl %edi, %eax \ncmpl $0, %eax \nje endwhile100\nloop100: \npushl $1 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else112 \nif112: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else113 \nif113: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, 8(%ebp) \naddl $4, %esp \njmp endif113 \nelse113: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else114 \nif114: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif114 \nelse114: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else115 \nif115: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, 8(%ebp) \naddl $4, %esp \njmp endif115 \nelse115: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif115: \nendif114: \nendif113: \njmp endif112 \nelse112: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else116 \nif116: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else117 \nif117: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif117 \nelse117: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else118 \nif118: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, 8(%ebp) \naddl $4, %esp \njmp endif118 \nelse118: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else119 \nif119: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif119 \nelse119: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif119: \nendif118: \nendif117: \njmp endif116 \nelse116: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else120 \nif120: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else121 \nif121: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, 8(%ebp) \naddl $4, %esp \njmp endif121 \nelse121: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else122 \nif122: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif122 \nelse122: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else123 \nif123: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, 8(%ebp) \naddl $4, %esp \njmp endif123 \nelse123: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif123: \nendif122: \nendif121: \njmp endif120 \nelse120: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif120: \nendif116: \nendif112: \nmovl 8(%ebp), %eax \nmovl %eax, 8(%ebp) \npushl %ebx \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \njmp while100 \nendwhile100: \nmovl 8(%ebp), %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
