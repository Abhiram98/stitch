def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_x,_y,free_vars_1):
	if is_int(_x):
		if is_int(_y):
			_temp_0 = inject_bool(_x != _y)
		
		if is_bool(_y):
			_temp_0 = inject_bool(project_int(_x) != project_bool(_y))
		
		if is_big(_y):
			_temp_0 = inject_bool(1)
		
	else:
		if is_bool(_x):
			if is_int(_y):
				_temp_0 = inject_bool(project_bool(_x) != project_int(_y))
			
			if is_bool(_y):
				_temp_0 = inject_bool(_x != _y)
			
			if is_big(_y):
				_temp_0 = inject_bool(1)
			
		else:
			if is_big(_x):
				if is_int(_y):
					_temp_0 = inject_bool(1)
				
				if is_bool(_y):
					_temp_0 = inject_bool(1)
				
				if is_big(_y):
					_temp_0 = inject_bool(not_equal(project_big(_x),project_big(_y)))
				
			
		
	
	_temp_0 = _temp_0
	temp_5 = is_true(_temp_0)
	while (temp_5):
		temp_4 = inject_int(1)
		if is_int(_x):
			if is_int(temp_4):
				_x = inject_int((project_int(_x)) + (project_int(temp_4)))
			else:
				if is_big(temp_4):
					error_pyobj()
				else:
					if is_bool(temp_4):
						_x = inject_int((project_int(_x)) + (project_bool(temp_4)))
					else:
						error_pyobj()
					
				
			
		else:
			if is_big(_x):
				if is_int(temp_4):
					error_pyobj()
				else:
					if is_big(temp_4):
						_x = inject_big(add(project_big(_x),project_big(temp_4)))
					else:
						if is_bool(temp_4):
							error_pyobj()
						else:
							error_pyobj()
						
					
				
			else:
				if is_bool(_x):
					if is_int(temp_4):
						_x = inject_int((project_bool(_x)) + (project_int(temp_4)))
					else:
						if is_big(temp_4):
							error_pyobj()
						else:
							if is_bool(temp_4):
								_x = inject_bool((project_bool(_x)) + (project_bool(temp_4)))
							else:
								error_pyobj()
							
						
					
				else:
					error_pyobj()
				
			
		
		_x = _x
		temp_5 = is_true(_temp_0)
	
	return _x

temp_12 = inject_big(create_list(inject_int(0)))
temp_6 = temp_12
temp_7 = create_closure(__func1,temp_6)
_while_in_fun = inject_big(temp_7)
temp_8 = eval(input())
_temp_1 = temp_8
temp_9 = eval(input())
_temp_2 = temp_9
temp_10 = get_fun_ptr(_while_in_fun)
temp_11 = get_free_vars(_while_in_fun)
_temp_3 = temp_10(_temp_1,_temp_2,temp_11)
print(_temp_3)