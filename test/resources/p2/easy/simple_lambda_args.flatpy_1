def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_x1,free_vars_1):
	temp_1 = inject_int(1)
	temp_35 = is_int(_x1)
	if temp_35:
		temp_17 = is_int(temp_1)
		if temp_17:
			temp_9 = project_int(_x1)
			temp_10 = project_int(temp_1)
			temp_11 = temp_9 + temp_10
			temp_2 = inject_int(temp_11)
		else:
			temp_16 = is_big(temp_1)
			if temp_16:
				error_pyobj()
			else:
				temp_15 = is_bool(temp_1)
				if temp_15:
					temp_12 = project_int(_x1)
					temp_13 = project_bool(temp_1)
					temp_14 = temp_12 + temp_13
					temp_2 = inject_int(temp_14)
				else:
					error_pyobj()
				
			
		
	else:
		temp_34 = is_big(_x1)
		if temp_34:
			temp_23 = is_int(temp_1)
			if temp_23:
				error_pyobj()
			else:
				temp_22 = is_big(temp_1)
				if temp_22:
					temp_18 = project_big(_x1)
					temp_19 = project_big(temp_1)
					temp_20 = add(temp_18,temp_19)
					temp_2 = inject_big(temp_20)
				else:
					temp_21 = is_bool(temp_1)
					if temp_21:
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			temp_33 = is_bool(_x1)
			if temp_33:
				temp_32 = is_int(temp_1)
				if temp_32:
					temp_24 = project_bool(_x1)
					temp_25 = project_int(temp_1)
					temp_26 = temp_24 + temp_25
					temp_2 = inject_int(temp_26)
				else:
					temp_31 = is_big(temp_1)
					if temp_31:
						error_pyobj()
					else:
						temp_30 = is_bool(temp_1)
						if temp_30:
							temp_27 = project_bool(_x1)
							temp_28 = project_bool(temp_1)
							temp_29 = temp_27 + temp_28
							temp_2 = inject_bool(temp_29)
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	temp_2 = temp_2
	return temp_2

temp_36 = inject_int(0)
temp_37 = create_list(temp_36)
temp_8 = inject_big(temp_37)
temp_3 = temp_8
temp_4 = create_closure(__func1,temp_3)
_lambda_1 = inject_big(temp_4)
_x = _lambda_1
temp_5 = get_fun_ptr(_x)
temp_6 = inject_int(23)
temp_7 = get_free_vars(_x)
_temp_0 = temp_5(temp_6,temp_7)
print(_temp_0)