def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_0 = inject_int(0)
_add2 = [temp_0]
temp_1 = inject_int(0)
_sub1 = [temp_1]
def __func1(_b,free_vars_1):
	temp_2 = inject_int(3)
	print(temp_2)
	temp_3 = inject_int(0)
	temp_4 = inject_int(0)
	temp_5 = free_vars_1[temp_3]
	temp_6 = temp_5[temp_4]
	temp_7 = inject_int(1)
	temp_8 = inject_int(0)
	temp_9 = free_vars_1[temp_7]
	temp_10 = temp_9[temp_8]
	temp_11 = inject_int(1)
	temp_12 = inject_int(0)
	temp_13 = free_vars_1[temp_11]
	temp_14 = temp_13[temp_12]
	temp_15 = get_fun_ptr(temp_10)
	temp_16 = get_free_vars(temp_14)
	temp_17 = inject_int(0)
	temp_18 = inject_int(0)
	temp_19 = free_vars_1[temp_17]
	temp_20 = temp_19[temp_18]
	temp_21 = get_fun_ptr(temp_6)
	temp_22 = temp_15(_b,temp_16)
	temp_23 = get_free_vars(temp_20)
	temp_24 = temp_21(temp_22,temp_23)
	return temp_24

temp_25 = [_sub1, _add2]
temp_26 = create_closure(__func1,temp_25)
_add2sub1 = inject_big(temp_26)
temp_27 = inject_int(0)
def __func2(_c,free_vars_2):
	temp_28 = inject_int(2)
	print(temp_28)
	temp_29 = inject_int(2)
	temp_30 = _c + temp_29
	return temp_30

temp_31 = []
temp_32 = create_closure(__func2,temp_31)
_add2[temp_27] = inject_big(temp_32)
temp_33 = inject_int(0)
def __func3(_a,free_vars_3):
	temp_34 = inject_int(1)
	print(temp_34)
	temp_35 = inject_int(1)
	temp_36 = - temp_35
	temp_37 = _a + temp_36
	return temp_37

temp_38 = []
temp_39 = create_closure(__func3,temp_38)
_sub1[temp_33] = inject_big(temp_39)
_x = inject_int(5)
print(_x)
temp_40 = get_fun_ptr(_add2sub1)
temp_41 = get_free_vars(_add2sub1)
temp_42 = temp_40(_x,temp_41)
temp_43 = inject_int(10)
temp_44 = temp_42 != temp_43
temp_56 = is_true(temp_44)
while (temp_56):
	print(_x)
	temp_45 = inject_int(0)
	temp_46 = _add2[temp_45]
	temp_47 = inject_int(0)
	temp_48 = _add2[temp_47]
	temp_49 = get_fun_ptr(temp_46)
	temp_50 = get_free_vars(temp_48)
	_x = temp_49(_x,temp_50)
	temp_51 = get_fun_ptr(_add2sub1)
	temp_52 = get_free_vars(_add2sub1)
	temp_53 = temp_51(_x,temp_52)
	temp_54 = inject_int(10)
	temp_55 = temp_53 != temp_54
	temp_56 = is_true(temp_55)

print(_x)