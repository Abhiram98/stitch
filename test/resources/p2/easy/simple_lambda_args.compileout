compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/easy/simple_lambda_args.py
valid p0
IN UNPARSE
<ast.Lambda object at 0x7f91d83562c0>
IN UNPARSE
<ast.arguments object at 0x7f91d8356290>
Visiting BinOp
visiting Call
visiting Call
flattening node's  arg_i
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_1': set()}
fba.bound_vars={'__main__': {'x', 'temp_0', 'lambda_1'}, 'lambda_1': {'x1'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_1': set()}
fba.bound_vars={'__main__': {'x', 'temp_0', 'lambda_1'}, 'lambda_1': {'x1'}}
all_free=[]
Before FLATTENING STAGE 1
lambda_1
inject_big
create_closure
x1
x
lambda_1
temp_0
get_fun_ptr
x
get_free_vars
x
print
temp_0
visiting Call
visiting Call
Visiting BinOp
visiting Call
flattening node's  right
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
collecting functiondef
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f91d8355f30>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f91d8357010>
From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8356cb0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f91d81795a0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8356ec0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8178d60>
From visit_Module, node in node.body
<ast.Assign object at 0x7f91d83564a0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8178d00>
From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8356350>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8178df0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8356f80>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8179420>
From visit_Module, node in node.body
<ast.Assign object at 0x7f91d83570a0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8178d30>
From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8357190>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8178820>
From visit_Module, node in node.body
<ast.Assign object at 0x7f91d8355ea0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f91d81787c0>
From visit_Module, node in node.body
<ast.Expr object at 0x7f91d83562f0>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f91d8178730>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_1)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_36)))], BB2:
)
dict_keys(['__func1', 'module']) = 
Liveness took 3 loops
total_loop_time=0.0003464221954345703
per_basic_block_time=0.000339508056640625
update_parent_time=2.1457672119140625e-06
Liveness time taken: 0.0003857612609863281
Int graph time taken: 0.0002281665802001953
coloring done
Coloring time taken: 0.000579833984375
stack_size=0
done compiling
liveness_time=0.0003857612609863281
interference_time=0.0002281665802001953
coloring_time=0.000579833984375
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall get_fun_ptr\nmovl %eax, %ebx \naddl $4, %esp \npushl $23 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %esi \ncall *%ebx\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_1))), IrStat((Instruction(call), Keyword(is_int), Variable(_x1), Variable(temp_35))), IrStat((Instruction(if), Variable(temp_35), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_1), Variable(temp_17))), IrStat((Instruction(if), Variable(temp_17), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(call), Keyword(project_int), Variable(_x1), Variable(temp_9))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_1), Variable(temp_10))), IrStat((Instruction(movl), Variable(temp_10), Variable(temp_44))), IrStat((Instruction(addl), Variable(temp_9), Variable(temp_44))), IrStat((Instruction(movl), Variable(temp_44), Variable(temp_11))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_11), Variable(temp_2))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_1), Variable(temp_16))), IrStat((Instruction(if), Variable(temp_16), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_47))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_1), Variable(temp_15))), IrStat((Instruction(if), Variable(temp_15), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(project_int), Variable(_x1), Variable(temp_12))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_1), Variable(temp_13))), IrStat((Instruction(movl), Variable(temp_13), Variable(temp_51))), IrStat((Instruction(addl), Variable(temp_12), Variable(temp_51))), IrStat((Instruction(movl), Variable(temp_51), Variable(temp_14))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_14), Variable(temp_2))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_53))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_big), Variable(_x1), Variable(temp_34))), IrStat((Instruction(if), Variable(temp_34), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_1), Variable(temp_23))), IrStat((Instruction(if), Variable(temp_23), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_56))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_1), Variable(temp_22))), IrStat((Instruction(if), Variable(temp_22), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(call), Keyword(project_big), Variable(_x1), Variable(temp_18))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_1), Variable(temp_19))), IrStat((Instruction(call), Keyword(add), Variable(temp_18), Variable(temp_19), Variable(temp_20))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_20), Variable(temp_2))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_1), Variable(temp_21))), IrStat((Instruction(if), Variable(temp_21), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_63))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_64))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_bool), Variable(_x1), Variable(temp_33))), IrStat((Instruction(if), Variable(temp_33), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_1), Variable(temp_32))), IrStat((Instruction(if), Variable(temp_32), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x1), Variable(temp_24))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_1), Variable(temp_25))), IrStat((Instruction(movl), Variable(temp_25), Variable(temp_69))), IrStat((Instruction(addl), Variable(temp_24), Variable(temp_69))), IrStat((Instruction(movl), Variable(temp_69), Variable(temp_26))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_26), Variable(temp_2))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_1), Variable(temp_31))), IrStat((Instruction(if), Variable(temp_31), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_72))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_1), Variable(temp_30))), IrStat((Instruction(if), Variable(temp_30), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_bool), Variable(_x1), Variable(temp_27))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_1), Variable(temp_28))), IrStat((Instruction(movl), Variable(temp_28), Variable(temp_76))), IrStat((Instruction(addl), Variable(temp_27), Variable(temp_76))), IrStat((Instruction(movl), Variable(temp_76), Variable(temp_29))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_29), Variable(temp_2))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_78))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_79))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(temp_2), Variable(temp_2))), IrStat((Instruction(return), Variable(temp_2)))]
compression possible BB104 & BB108
compression possible BB130 & BB134
compression possible BB123 & BB127
compression possible BB109 & BB113
compression possible BB172 & BB176
compression possible BB158 & BB162
compression possible BB151 & BB155
compression possible BB207 & BB211
compression possible BB200 & BB204
compression possible BB186 & BB190
compression possible BB181 & BB185
compression possible BB146 & BB150
compressing 0
Liveness took 5 loops
total_loop_time=0.005527019500732422
per_basic_block_time=0.005107879638671875
update_parent_time=0.00023794174194335938
Liveness time taken: 0.006234884262084961
unknown instruction->110:return,temp_2
Int graph time taken: 0.0014319419860839844
coloring done
Coloring time taken: 0.0032956600189208984
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%ebx %ebx
done compiling
liveness_time=0.006234884262084961
interference_time=0.0014319419860839844
coloring_time=0.0032956600189208984
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif101 \nelse101: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif102 \nelse102: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif103 \nelse103: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif103: \nendif102: \nendif101: \njmp endif100 \nelse100: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif105 \nelse105: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \njmp endif106 \nelse106: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif107 \nelse107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif107: \nendif106: \nendif105: \njmp endif104 \nelse104: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif109 \nelse109: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif110 \nelse110: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif111 \nelse111: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif111: \nendif110: \nendif109: \njmp endif108 \nelse108: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif108: \nendif104: \nendif100: \nmovl %ebx, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
