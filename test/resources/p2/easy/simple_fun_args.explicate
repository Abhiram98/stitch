def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_a,_b,free_vars_1):
	if is_int(_a):
		if is_int(_b):
			temp_0 = inject_int((project_int(_a)) + (project_int(_b)))
		else:
			if is_big(_b):
				error_pyobj()
			else:
				if is_bool(_b):
					temp_0 = inject_int((project_int(_a)) + (project_bool(_b)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(_a):
			if is_int(_b):
				error_pyobj()
			else:
				if is_big(_b):
					temp_0 = inject_big(add(project_big(_a),project_big(_b)))
				else:
					if is_bool(_b):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(_a):
				if is_int(_b):
					temp_0 = inject_int((project_bool(_a)) + (project_int(_b)))
				else:
					if is_big(_b):
						error_pyobj()
					else:
						if is_bool(_b):
							temp_0 = inject_bool((project_bool(_a)) + (project_bool(_b)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	temp_0 = temp_0
	return temp_0

temp_3 = inject_big(create_list(inject_int(0)))
temp_1 = temp_3
temp_2 = create_closure(__func1,temp_1)
_fun_w_args = inject_big(temp_2)
_fn_call_2
_fn_call_2 = _fn_call_3
_fn_call_2 = _fn_call_3
_fn_call_2