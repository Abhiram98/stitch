def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_x1,free_vars_1):
	temp_1 = inject_int(1)
	if is_int(_x1):
		if is_int(temp_1):
			temp_2 = inject_int((project_int(_x1)) + (project_int(temp_1)))
		else:
			if is_big(temp_1):
				error_pyobj()
			else:
				if is_bool(temp_1):
					temp_2 = inject_int((project_int(_x1)) + (project_bool(temp_1)))
				else:
					error_pyobj()
				
			
		
	else:
		if is_big(_x1):
			if is_int(temp_1):
				error_pyobj()
			else:
				if is_big(temp_1):
					temp_2 = inject_big(add(project_big(_x1),project_big(temp_1)))
				else:
					if is_bool(temp_1):
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			if is_bool(_x1):
				if is_int(temp_1):
					temp_2 = inject_int((project_bool(_x1)) + (project_int(temp_1)))
				else:
					if is_big(temp_1):
						error_pyobj()
					else:
						if is_bool(temp_1):
							temp_2 = inject_bool((project_bool(_x1)) + (project_bool(temp_1)))
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	temp_2 = temp_2
	return temp_2

temp_8 = inject_big(create_list(inject_int(0)))
temp_3 = temp_8
temp_4 = create_closure(__func1,temp_3)
_lambda_1 = inject_big(temp_4)
_x = _lambda_1
temp_5 = get_fun_ptr(_x)
temp_6 = inject_int(23)
temp_7 = get_free_vars(_x)
_temp_0 = temp_5(temp_6,temp_7)
print(_temp_0)