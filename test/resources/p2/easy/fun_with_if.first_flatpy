def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_x,free_vars_1):
	temp_4 = inject_bool(1)
	_temp_0 = _x == temp_4
	temp_7 = is_true(_temp_0)
	if temp_7:
		temp_5 = inject_bool(1)
		return temp_5
	else:
		temp_6 = inject_bool(0)
		return temp_6
	

temp_8 = []
temp_9 = create_closure(__func1,temp_8)
_fun = inject_big(temp_9)
temp_10 = eval(input())
_temp_1 = temp_10
temp_11 = get_fun_ptr(_fun)
temp_12 = get_free_vars(_fun)
_temp_2 = temp_11(_temp_1,temp_12)
temp_13 = is_true(_temp_2)
temp_14 = is_true(temp_13)
if temp_14:
	_temp_3 = inject_int(10)
else:
	_temp_3 = inject_int(20)

_x = _temp_3
print(_x)