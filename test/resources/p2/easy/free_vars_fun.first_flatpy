def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_1 = inject_int(0)
_a = [temp_1]
temp_2 = inject_int(0)
_b = [temp_2]
temp_3 = inject_int(0)
_a[temp_3] = inject_int(2)
temp_4 = inject_int(0)
_b[temp_4] = inject_int(3)
def __func1(free_vars_1):
	temp_5 = inject_int(1)
	temp_6 = inject_int(0)
	temp_7 = free_vars_1[temp_5]
	temp_8 = inject_int(0)
	temp_9 = inject_int(0)
	temp_10 = free_vars_1[temp_8]
	temp_11 = temp_7[temp_6]
	temp_12 = temp_10[temp_9]
	_temp_0 = temp_11 + temp_12
	return _temp_0

temp_13 = [_b, _a]
temp_14 = create_closure(__func1,temp_13)
_sum = inject_big(temp_14)