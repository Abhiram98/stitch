def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_7 = inject_int(0)
_prod = [temp_7]
temp_8 = inject_int(0)
def __func1(_a,_b,free_vars_1):
	temp_9 = inject_int(0)
	_temp_3 = _b == temp_9
	temp_10 = is_true(_temp_3)
	temp_30 = is_true(temp_10)
	if temp_30:
		_temp_5 = inject_int(0)
	else:
		temp_11 = inject_int(1)
		_temp_0 = - temp_11
		_temp_1 = _b + _temp_0
		temp_12 = inject_int(1)
		temp_13 = inject_int(0)
		temp_14 = free_vars_1[temp_12]
		temp_15 = temp_14[temp_13]
		temp_16 = inject_int(0)
		temp_17 = inject_int(0)
		temp_18 = free_vars_1[temp_16]
		temp_19 = inject_int(1)
		temp_20 = inject_int(0)
		temp_21 = free_vars_1[temp_19]
		temp_22 = temp_21[temp_20]
		temp_23 = get_fun_ptr(temp_15)
		temp_24 = temp_18[temp_17]
		temp_25 = get_free_vars(temp_22)
		_temp_2 = temp_23(temp_24,_temp_1,temp_25)
		temp_26 = inject_int(0)
		temp_27 = inject_int(0)
		temp_28 = free_vars_1[temp_26]
		temp_29 = temp_28[temp_27]
		_temp_4 = temp_29 + _temp_2
		_temp_5 = _temp_4
	
	return _temp_5

temp_31 = [_a, _prod]
temp_32 = create_closure(__func1,temp_31)
_prod[temp_8] = inject_big(temp_32)
temp_33 = inject_int(0)
temp_34 = _prod[temp_33]
temp_35 = inject_int(0)
temp_36 = _prod[temp_35]
temp_37 = get_fun_ptr(temp_34)
temp_38 = inject_int(4)
temp_39 = inject_int(3)
temp_40 = get_free_vars(temp_36)
_temp_6 = temp_37(temp_38,temp_39,temp_40)
print(_temp_6)