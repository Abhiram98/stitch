def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

fib = [0]
fib[0] = inject_big(create_closure(def __func1(n,free_vars_1):
	temp_8 = n == 0
	if is_true(temp_8):
		temp_10 = 0
	else:
		temp_6 = n == 1
		if is_true(temp_6):
			temp_9 = 1
		else:
			temp_0 = - 1
			temp_1 = n + temp_0
			temp_2 = - 2
			temp_3 = n + temp_2
			temp_4 = get_fun_ptr(free_vars_1[0][0])(temp_1,get_free_vars(free_vars_1[0][0]))
			temp_5 = get_fun_ptr(free_vars_1[0][0])(temp_3,get_free_vars(free_vars_1[0][0]))
			temp_7 = temp_4 + temp_5
			temp_9 = temp_7
		
		temp_10 = temp_9
	
	return temp_10
,[fib]))
temp_11 = get_fun_ptr(fib[0])(6,get_free_vars(fib[0]))
print(temp_11)