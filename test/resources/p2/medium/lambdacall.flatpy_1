def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_y,free_vars_1):
	temp_0 = inject_int(1)
	temp_34 = is_int(_y)
	if temp_34:
		temp_16 = is_int(temp_0)
		if temp_16:
			temp_8 = project_int(_y)
			temp_9 = project_int(temp_0)
			temp_10 = temp_8 + temp_9
			temp_1 = inject_int(temp_10)
		else:
			temp_15 = is_big(temp_0)
			if temp_15:
				error_pyobj()
			else:
				temp_14 = is_bool(temp_0)
				if temp_14:
					temp_11 = project_int(_y)
					temp_12 = project_bool(temp_0)
					temp_13 = temp_11 + temp_12
					temp_1 = inject_int(temp_13)
				else:
					error_pyobj()
				
			
		
	else:
		temp_33 = is_big(_y)
		if temp_33:
			temp_22 = is_int(temp_0)
			if temp_22:
				error_pyobj()
			else:
				temp_21 = is_big(temp_0)
				if temp_21:
					temp_17 = project_big(_y)
					temp_18 = project_big(temp_0)
					temp_19 = add(temp_17,temp_18)
					temp_1 = inject_big(temp_19)
				else:
					temp_20 = is_bool(temp_0)
					if temp_20:
						error_pyobj()
					else:
						error_pyobj()
					
				
			
		else:
			temp_32 = is_bool(_y)
			if temp_32:
				temp_31 = is_int(temp_0)
				if temp_31:
					temp_23 = project_bool(_y)
					temp_24 = project_int(temp_0)
					temp_25 = temp_23 + temp_24
					temp_1 = inject_int(temp_25)
				else:
					temp_30 = is_big(temp_0)
					if temp_30:
						error_pyobj()
					else:
						temp_29 = is_bool(temp_0)
						if temp_29:
							temp_26 = project_bool(_y)
							temp_27 = project_bool(temp_0)
							temp_28 = temp_26 + temp_27
							temp_1 = inject_bool(temp_28)
						else:
							error_pyobj()
						
					
				
			else:
				error_pyobj()
			
		
	
	temp_1 = temp_1
	return temp_1

temp_35 = inject_int(0)
temp_36 = create_list(temp_35)
temp_7 = inject_big(temp_36)
temp_2 = temp_7
temp_3 = create_closure(__func1,temp_2)
_lambda_1 = inject_big(temp_3)
temp_4 = get_fun_ptr(_lambda_1)
temp_5 = inject_int(23)
temp_6 = get_free_vars(_lambda_1)
_x = temp_4(temp_5,temp_6)
print(_x)