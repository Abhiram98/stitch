compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/medium/prod.py
valid p0
Found IfExp in flat ast
IN UNPARSE
<ast.IfExp object at 0x7f35f037a830>
visiting IfExp!
<class 'ast.Compare'>
Visiting BinOp
visiting Call
Visiting BinOp
Visiting UnaryOp
flattening node's  right
flattening node's  arg_i
flattening node's  right
flattening IfExp test
flattening node's  test
flattening node's  orelse
flattening node's  value
visiting Call
visiting Call
flattening node's  arg_i
collecting functiondef
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'prod': {'a', 'prod'}}
fba.bound_vars={'__main__': {'temp_6', 'prod'}, 'prod': {'b', 'temp_1', 'temp_5', 'temp_2', 'temp_4', 'temp_0', 'temp_3', '_a'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'prod': {'a', 'prod'}}
fba.bound_vars={'__main__': {'temp_6', 'prod'}, 'prod': {'b', 'temp_1', 'temp_5', 'temp_2', 'temp_4', 'temp_0', 'temp_3', '_a'}}
all_free=['a', 'prod']
found else while unparsing
Before FLATTENING STAGE 1
prod
prod
inject_big
create_closure
temp_3
b
is_true
is_true
temp_3
temp_5
temp_0
temp_1
b
temp_0
temp_2
get_fun_ptr
free_vars_1
free_vars_1
temp_1
get_free_vars
free_vars_1
temp_4
free_vars_1
temp_2
temp_5
temp_4
temp_5
a
prod
temp_6
get_fun_ptr
prod
get_free_vars
prod
print
temp_6
found else while unparsing
visiting Call
flattening node's  to_flat
visiting Call
flattening node's  slice
visiting Call
visiting Call
visiting Call
flattening node's  to_flat
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
Visiting UnaryOp
visiting Call
flattening node's  operand
Visiting BinOp
visiting Call
visiting Call
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  arg_i
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
visiting Call
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  arg_i
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
Visiting BinOp
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  left
flattening test to  <class 'ast.If'>
flattening node's  test
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  slice
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  slice
flattening node's  arg_i
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
collecting functiondef
found else while unparsing
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f037ae00>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f037a4a0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f0379f60>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f037a470>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01a9e40>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d5000>
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f35f037a950>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f35f01d4eb0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4460>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f021d1e0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d44f0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f021e980>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f037b280>
RETURN: From visit_Module, node in node.body
<ast.Call object at 0x7f35f021d9f0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4640>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f0230250>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4700>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f0232080>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4850>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f02301c0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4910>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f02305b0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4790>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f02305e0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4a90>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f0230610>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4b80>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f0230640>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f01d4c70>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f0230670>
From visit_Module, node in node.body
<ast.Assign object at 0x7f35f037ac20>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f35f02306a0>
From visit_Module, node in node.body
<ast.Expr object at 0x7f35f037a920>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f35f02306d0>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
Visiting UnaryOp
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
not flattening test <class 'ast.Name'>
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_9)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_7)))], BB2:
)
dict_keys(['__func1', 'module']) = 
Liveness took 3 loops
total_loop_time=0.0004858970642089844
per_basic_block_time=0.00048160552978515625
update_parent_time=1.1920928955078125e-06
Liveness time taken: 0.0005140304565429688
Int graph time taken: 0.0005147457122802734
coloring done
Coloring time taken: 0.0012776851654052734
Some variable spilled
But instructions ok
last_var =Variable(temp_42)
stack_size=8
done compiling
liveness_time=0.0005140304565429688
interference_time=0.0005147457122802734
coloring_time=0.0012776851654052734
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $8, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \npushl %edi \npushl %ebx \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %ebx, %esi \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl $2 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, -8(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl -4(%ebp) \npushl %edi \npushl -8(%ebp) \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \npushl %edi \npushl -8(%ebp) \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl -8(%ebp), %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \npushl %esi \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %esi \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %esi \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl %edi \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl $4 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl $3 \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl %esi \ncall get_free_vars\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl -4(%ebp) \npushl %ebx \ncall *%edi\nmovl %eax, %edi \naddl $12, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_9))), IrStat((Instruction(call), Keyword(is_int), Variable(_b), Variable(temp_68))), IrStat((Instruction(if), Variable(temp_68), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_9), Variable(temp_47))), IrStat((Instruction(if), Variable(temp_47), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(comp_eq), Variable(_b), Variable(temp_9), Variable(temp_132))), IrStat((Instruction(movl), Variable(temp_132), Variable(temp_46))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_46), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_9), Variable(temp_51))), IrStat((Instruction(if), Variable(temp_51), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(project_int), Variable(_b), Variable(temp_48))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_9), Variable(temp_49))), IrStat((Instruction(comp_eq), Variable(temp_48), Variable(temp_49), Variable(temp_137))), IrStat((Instruction(movl), Variable(temp_137), Variable(temp_50))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_50), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_9), Variable(temp_52))), IrStat((Instruction(if), Variable(temp_52), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_bool), Variable(_b), Variable(temp_67))), IrStat((Instruction(if), Variable(temp_67), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_9), Variable(temp_56))), IrStat((Instruction(if), Variable(temp_56), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(project_bool), Variable(_b), Variable(temp_53))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_9), Variable(temp_54))), IrStat((Instruction(comp_eq), Variable(temp_53), Variable(temp_54), Variable(temp_145))), IrStat((Instruction(movl), Variable(temp_145), Variable(temp_55))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_55), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_9), Variable(temp_58))), IrStat((Instruction(if), Variable(temp_58), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(comp_eq), Variable(_b), Variable(temp_9), Variable(temp_148))), IrStat((Instruction(movl), Variable(temp_148), Variable(temp_57))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_57), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_9), Variable(temp_59))), IrStat((Instruction(if), Variable(temp_59), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_big), Variable(_b), Variable(temp_66))), IrStat((Instruction(if), Variable(temp_66), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_9), Variable(temp_60))), IrStat((Instruction(if), Variable(temp_60), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_9), Variable(temp_61))), IrStat((Instruction(if), Variable(temp_61), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_9), Variable(temp_65))), IrStat((Instruction(if), Variable(temp_65), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_big), Variable(_b), Variable(temp_62))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_9), Variable(temp_63))), IrStat((Instruction(call), Keyword(equal), Variable(temp_62), Variable(temp_63), Variable(temp_64))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_64), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(_temp_3), Variable(_temp_3))), IrStat((Instruction(call), Keyword(is_true), Variable(_temp_3), Variable(temp_10))), IrStat((Instruction(call), Keyword(is_true), Variable(temp_10), Variable(temp_30))), IrStat((Instruction(if), Variable(temp_30), Keyword(if112), Keyword(else112))), IrStat((Instruction(label), Keyword(if112))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(_temp_5))), IrStat((Instruction(jmp), Keyword(endif112))), IrStat((Instruction(label), Keyword(else112))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_11))), IrStat((Instruction(movl), Variable(temp_11), Variable(temp_166))), IrStat((Instruction(negl), Variable(temp_166))), IrStat((Instruction(movl), Variable(temp_166), Variable(_temp_0))), IrStat((Instruction(call), Keyword(is_int), Variable(_b), Variable(temp_95))), IrStat((Instruction(if), Variable(temp_95), Keyword(if113), Keyword(else113))), IrStat((Instruction(label), Keyword(if113))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_77))), IrStat((Instruction(if), Variable(temp_77), Keyword(if114), Keyword(else114))), IrStat((Instruction(label), Keyword(if114))), IrStat((Instruction(call), Keyword(project_int), Variable(_b), Variable(temp_69))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_0), Variable(temp_70))), IrStat((Instruction(movl), Variable(temp_70), Variable(temp_171))), IrStat((Instruction(addl), Variable(temp_69), Variable(temp_171))), IrStat((Instruction(movl), Variable(temp_171), Variable(temp_71))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_71), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif114))), IrStat((Instruction(label), Keyword(else114))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_76))), IrStat((Instruction(if), Variable(temp_76), Keyword(if115), Keyword(else115))), IrStat((Instruction(label), Keyword(if115))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_174))), IrStat((Instruction(jmp), Keyword(endif115))), IrStat((Instruction(label), Keyword(else115))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_75))), IrStat((Instruction(if), Variable(temp_75), Keyword(if116), Keyword(else116))), IrStat((Instruction(label), Keyword(if116))), IrStat((Instruction(call), Keyword(project_int), Variable(_b), Variable(temp_72))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_0), Variable(temp_73))), IrStat((Instruction(movl), Variable(temp_73), Variable(temp_178))), IrStat((Instruction(addl), Variable(temp_72), Variable(temp_178))), IrStat((Instruction(movl), Variable(temp_178), Variable(temp_74))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_74), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif116))), IrStat((Instruction(label), Keyword(else116))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_180))), IrStat((Instruction(label), Keyword(endif116))), IrStat((Instruction(label), Keyword(endif115))), IrStat((Instruction(label), Keyword(endif114))), IrStat((Instruction(jmp), Keyword(endif113))), IrStat((Instruction(label), Keyword(else113))), IrStat((Instruction(call), Keyword(is_big), Variable(_b), Variable(temp_94))), IrStat((Instruction(if), Variable(temp_94), Keyword(if117), Keyword(else117))), IrStat((Instruction(label), Keyword(if117))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_83))), IrStat((Instruction(if), Variable(temp_83), Keyword(if118), Keyword(else118))), IrStat((Instruction(label), Keyword(if118))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_183))), IrStat((Instruction(jmp), Keyword(endif118))), IrStat((Instruction(label), Keyword(else118))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_82))), IrStat((Instruction(if), Variable(temp_82), Keyword(if119), Keyword(else119))), IrStat((Instruction(label), Keyword(if119))), IrStat((Instruction(call), Keyword(project_big), Variable(_b), Variable(temp_78))), IrStat((Instruction(call), Keyword(project_big), Variable(_temp_0), Variable(temp_79))), IrStat((Instruction(call), Keyword(add), Variable(temp_78), Variable(temp_79), Variable(temp_80))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_80), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif119))), IrStat((Instruction(label), Keyword(else119))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_81))), IrStat((Instruction(if), Variable(temp_81), Keyword(if120), Keyword(else120))), IrStat((Instruction(label), Keyword(if120))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_190))), IrStat((Instruction(jmp), Keyword(endif120))), IrStat((Instruction(label), Keyword(else120))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_191))), IrStat((Instruction(label), Keyword(endif120))), IrStat((Instruction(label), Keyword(endif119))), IrStat((Instruction(label), Keyword(endif118))), IrStat((Instruction(jmp), Keyword(endif117))), IrStat((Instruction(label), Keyword(else117))), IrStat((Instruction(call), Keyword(is_bool), Variable(_b), Variable(temp_93))), IrStat((Instruction(if), Variable(temp_93), Keyword(if121), Keyword(else121))), IrStat((Instruction(label), Keyword(if121))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_92))), IrStat((Instruction(if), Variable(temp_92), Keyword(if122), Keyword(else122))), IrStat((Instruction(label), Keyword(if122))), IrStat((Instruction(call), Keyword(project_bool), Variable(_b), Variable(temp_84))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_0), Variable(temp_85))), IrStat((Instruction(movl), Variable(temp_85), Variable(temp_196))), IrStat((Instruction(addl), Variable(temp_84), Variable(temp_196))), IrStat((Instruction(movl), Variable(temp_196), Variable(temp_86))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_86), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif122))), IrStat((Instruction(label), Keyword(else122))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_91))), IrStat((Instruction(if), Variable(temp_91), Keyword(if123), Keyword(else123))), IrStat((Instruction(label), Keyword(if123))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_199))), IrStat((Instruction(jmp), Keyword(endif123))), IrStat((Instruction(label), Keyword(else123))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_90))), IrStat((Instruction(if), Variable(temp_90), Keyword(if124), Keyword(else124))), IrStat((Instruction(label), Keyword(if124))), IrStat((Instruction(call), Keyword(project_bool), Variable(_b), Variable(temp_87))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_0), Variable(temp_88))), IrStat((Instruction(movl), Variable(temp_88), Variable(temp_203))), IrStat((Instruction(addl), Variable(temp_87), Variable(temp_203))), IrStat((Instruction(movl), Variable(temp_203), Variable(temp_89))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_89), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif124))), IrStat((Instruction(label), Keyword(else124))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_205))), IrStat((Instruction(label), Keyword(endif124))), IrStat((Instruction(label), Keyword(endif123))), IrStat((Instruction(label), Keyword(endif122))), IrStat((Instruction(jmp), Keyword(endif121))), IrStat((Instruction(label), Keyword(else121))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_206))), IrStat((Instruction(label), Keyword(endif121))), IrStat((Instruction(label), Keyword(endif117))), IrStat((Instruction(label), Keyword(endif113))), IrStat((Instruction(movl), Variable(_temp_1), Variable(_temp_1))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_12))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_13))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_12), Variable(temp_14))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_14), Variable(temp_13), Variable(temp_15))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_16))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_17))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_16), Variable(temp_18))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_19))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_20))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_19), Variable(temp_21))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_21), Variable(temp_20), Variable(temp_22))), IrStat((Instruction(call), Keyword(get_fun_ptr), Variable(temp_15), Variable(temp_23))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_18), Variable(temp_17), Variable(temp_24))), IrStat((Instruction(call), Keyword(get_free_vars), Variable(temp_22), Variable(temp_25))), IrStat((Instruction(call), Variable(temp_23), Variable(temp_24), Variable(_temp_1), Variable(temp_25), Variable(_temp_2))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_26))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_27))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_26), Variable(temp_28))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_28), Variable(temp_27), Variable(temp_29))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_29), Variable(temp_122))), IrStat((Instruction(if), Variable(temp_122), Keyword(if125), Keyword(else125))), IrStat((Instruction(label), Keyword(if125))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_2), Variable(temp_104))), IrStat((Instruction(if), Variable(temp_104), Keyword(if126), Keyword(else126))), IrStat((Instruction(label), Keyword(if126))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_29), Variable(temp_96))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_2), Variable(temp_97))), IrStat((Instruction(movl), Variable(temp_97), Variable(temp_230))), IrStat((Instruction(addl), Variable(temp_96), Variable(temp_230))), IrStat((Instruction(movl), Variable(temp_230), Variable(temp_98))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_98), Variable(_temp_4))), IrStat((Instruction(jmp), Keyword(endif126))), IrStat((Instruction(label), Keyword(else126))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_2), Variable(temp_103))), IrStat((Instruction(if), Variable(temp_103), Keyword(if127), Keyword(else127))), IrStat((Instruction(label), Keyword(if127))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_233))), IrStat((Instruction(jmp), Keyword(endif127))), IrStat((Instruction(label), Keyword(else127))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_2), Variable(temp_102))), IrStat((Instruction(if), Variable(temp_102), Keyword(if128), Keyword(else128))), IrStat((Instruction(label), Keyword(if128))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_29), Variable(temp_99))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_2), Variable(temp_100))), IrStat((Instruction(movl), Variable(temp_100), Variable(temp_237))), IrStat((Instruction(addl), Variable(temp_99), Variable(temp_237))), IrStat((Instruction(movl), Variable(temp_237), Variable(temp_101))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_101), Variable(_temp_4))), IrStat((Instruction(jmp), Keyword(endif128))), IrStat((Instruction(label), Keyword(else128))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_239))), IrStat((Instruction(label), Keyword(endif128))), IrStat((Instruction(label), Keyword(endif127))), IrStat((Instruction(label), Keyword(endif126))), IrStat((Instruction(jmp), Keyword(endif125))), IrStat((Instruction(label), Keyword(else125))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_29), Variable(temp_121))), IrStat((Instruction(if), Variable(temp_121), Keyword(if129), Keyword(else129))), IrStat((Instruction(label), Keyword(if129))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_2), Variable(temp_110))), IrStat((Instruction(if), Variable(temp_110), Keyword(if130), Keyword(else130))), IrStat((Instruction(label), Keyword(if130))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_242))), IrStat((Instruction(jmp), Keyword(endif130))), IrStat((Instruction(label), Keyword(else130))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_2), Variable(temp_109))), IrStat((Instruction(if), Variable(temp_109), Keyword(if131), Keyword(else131))), IrStat((Instruction(label), Keyword(if131))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_29), Variable(temp_105))), IrStat((Instruction(call), Keyword(project_big), Variable(_temp_2), Variable(temp_106))), IrStat((Instruction(call), Keyword(add), Variable(temp_105), Variable(temp_106), Variable(temp_107))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_107), Variable(_temp_4))), IrStat((Instruction(jmp), Keyword(endif131))), IrStat((Instruction(label), Keyword(else131))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_2), Variable(temp_108))), IrStat((Instruction(if), Variable(temp_108), Keyword(if132), Keyword(else132))), IrStat((Instruction(label), Keyword(if132))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_249))), IrStat((Instruction(jmp), Keyword(endif132))), IrStat((Instruction(label), Keyword(else132))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_250))), IrStat((Instruction(label), Keyword(endif132))), IrStat((Instruction(label), Keyword(endif131))), IrStat((Instruction(label), Keyword(endif130))), IrStat((Instruction(jmp), Keyword(endif129))), IrStat((Instruction(label), Keyword(else129))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_29), Variable(temp_120))), IrStat((Instruction(if), Variable(temp_120), Keyword(if133), Keyword(else133))), IrStat((Instruction(label), Keyword(if133))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_2), Variable(temp_119))), IrStat((Instruction(if), Variable(temp_119), Keyword(if134), Keyword(else134))), IrStat((Instruction(label), Keyword(if134))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_29), Variable(temp_111))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_2), Variable(temp_112))), IrStat((Instruction(movl), Variable(temp_112), Variable(temp_255))), IrStat((Instruction(addl), Variable(temp_111), Variable(temp_255))), IrStat((Instruction(movl), Variable(temp_255), Variable(temp_113))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_113), Variable(_temp_4))), IrStat((Instruction(jmp), Keyword(endif134))), IrStat((Instruction(label), Keyword(else134))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_2), Variable(temp_118))), IrStat((Instruction(if), Variable(temp_118), Keyword(if135), Keyword(else135))), IrStat((Instruction(label), Keyword(if135))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_258))), IrStat((Instruction(jmp), Keyword(endif135))), IrStat((Instruction(label), Keyword(else135))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_2), Variable(temp_117))), IrStat((Instruction(if), Variable(temp_117), Keyword(if136), Keyword(else136))), IrStat((Instruction(label), Keyword(if136))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_29), Variable(temp_114))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_2), Variable(temp_115))), IrStat((Instruction(movl), Variable(temp_115), Variable(temp_262))), IrStat((Instruction(addl), Variable(temp_114), Variable(temp_262))), IrStat((Instruction(movl), Variable(temp_262), Variable(temp_116))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_116), Variable(_temp_4))), IrStat((Instruction(jmp), Keyword(endif136))), IrStat((Instruction(label), Keyword(else136))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_264))), IrStat((Instruction(label), Keyword(endif136))), IrStat((Instruction(label), Keyword(endif135))), IrStat((Instruction(label), Keyword(endif134))), IrStat((Instruction(jmp), Keyword(endif133))), IrStat((Instruction(label), Keyword(else133))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_265))), IrStat((Instruction(label), Keyword(endif133))), IrStat((Instruction(label), Keyword(endif129))), IrStat((Instruction(label), Keyword(endif125))), IrStat((Instruction(movl), Variable(_temp_4), Variable(_temp_4))), IrStat((Instruction(movl), Variable(_temp_4), Variable(_temp_5))), IrStat((Instruction(label), Keyword(endif112))), IrStat((Instruction(return), Variable(_temp_5)))]
compression possible BB104 & BB108
compression possible BB112 & BB123
compression possible BB109 & BB113
compression possible BB122 & BB137
compression possible BB107 & BB223
compression possible BB150 & BB165
compression possible BB147 & BB151
compression possible BB164 & BB175
compression possible BB188 & BB197
compression possible BB185 & BB189
compression possible BB196 & BB205
compression possible BB180 & BB184
compression possible BB142 & BB146
compression possible BB257 & BB261
compression possible BB250 & BB254
compression possible BB236 & BB240
compression possible BB234 & BB394
compression possible BB299 & BB303
compression possible BB285 & BB289
compression possible BB278 & BB282
compression possible BB334 & BB338
compression possible BB327 & BB331
compression possible BB313 & BB317
compression possible BB308 & BB312
compression possible BB273 & BB277
compression possible BB227 & BB235
compression possible BB416 & BB420
compression possible BB409 & BB413
compression possible BB395 & BB399
compression possible BB458 & BB462
compression possible BB444 & BB448
compression possible BB437 & BB441
compression possible BB493 & BB497
compression possible BB486 & BB490
compression possible BB472 & BB476
compression possible BB467 & BB471
compression possible BB432 & BB436
compressing 0
Liveness took 9 loops
total_loop_time=0.0189669132232666
per_basic_block_time=0.017448902130126953
update_parent_time=0.0008800029754638672
Liveness time taken: 0.022321224212646484
unknown instruction->348:return,_temp_5
Int graph time taken: 0.004049539566040039
coloring done
Coloring time taken: 0.018168926239013672
Some variable spilled
can't be converted into x86. Spilling
can't be converted into x86. Spilling
Liveness took 9 loops
total_loop_time=0.01859116554260254
per_basic_block_time=0.017061710357666016
update_parent_time=0.0008606910705566406
Liveness time taken: 0.022324800491333008
unknown instruction->350:return,_temp_5
Int graph time taken: 0.0040130615234375
coloring done
Coloring time taken: 0.015900135040283203
Some variable spilled
But instructions ok
last_var =Variable(_temp_4)
stack_size=16
return stat
return
%edi %edi
done compiling
liveness_time=0.04464602470397949
interference_time=0.008062601089477539
coloring_time=0.034069061279296875
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $16, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl 12(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \nmovl %ebx, %eax \ncmpl 12(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif101 \nelse101: \nendif101: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \npushl 12(%ebp) \ncall project_int\nmovl %eax, %esi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl %esi, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif102 \nelse102: \nendif102: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl $0 \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif103 \nelse103: \nendif103: \njmp endif100 \nelse100: \npushl 12(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \npushl 12(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \ncmpl %edi, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif105 \nelse105: \nendif105: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \nmovl %ebx, %eax \ncmpl 12(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif106 \nelse106: \nendif106: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \npushl $0 \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif107 \nelse107: \nendif107: \njmp endif104 \nelse104: \npushl 12(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl $0 \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif109 \nelse109: \nendif109: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \npushl $0 \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif110 \nelse110: \nendif110: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl 12(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall equal\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif111 \nelse111: \nendif111: \njmp endif108 \nelse108: \nendif108: \nendif104: \nendif100: \npushl %esi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else112 \nif112: \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \njmp endif112 \nelse112: \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \nnegl %eax \nmovl %eax, %ebx \npushl 12(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else113 \nif113: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else114 \nif114: \npushl 12(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif114 \nelse114: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else115 \nif115: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif115 \nelse115: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else116 \nif116: \npushl 12(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif116 \nelse116: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif116: \nendif115: \nendif114: \njmp endif113 \nelse113: \npushl 12(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else117 \nif117: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else118 \nif118: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif118 \nelse118: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else119 \nif119: \npushl 12(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif119 \nelse119: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else120 \nif120: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif120 \nelse120: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif120: \nendif119: \nendif118: \njmp endif117 \nelse117: \npushl 12(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else121 \nif121: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else122 \nif122: \npushl 12(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif122 \nelse122: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else123 \nif123: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif123 \nelse123: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else124 \nif124: \npushl 12(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif124 \nelse124: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif124: \nendif123: \nendif122: \njmp endif121 \nelse121: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif121: \nendif117: \nendif113: \nmovl -12(%ebp), %eax \nmovl %eax, -12(%ebp) \npushl $1 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \npushl 16(%ebp) \ncall get_subscript\nmovl %eax, %ebx \naddl $8, %esp \npushl %edi \npushl %ebx \ncall get_subscript\nmovl %eax, %ebx \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \npushl 16(%ebp) \ncall get_subscript\nmovl %eax, -8(%ebp) \naddl $8, %esp \npushl $1 \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl -4(%ebp) \npushl 16(%ebp) \ncall get_subscript\nmovl %eax, -4(%ebp) \naddl $8, %esp \npushl %edi \npushl -4(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %ebx \ncall get_fun_ptr\nmovl %eax, %ebx \naddl $4, %esp \npushl %esi \npushl -8(%ebp) \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl -12(%ebp) \npushl %esi \ncall *%ebx\nmovl %eax, %ebx \naddl $12, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \npushl 16(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %esi \npushl %edi \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else125 \nif125: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else126 \nif126: \npushl %esi \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif126 \nelse126: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else127 \nif127: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif127 \nelse127: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else128 \nif128: \npushl %esi \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif128 \nelse128: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif128: \nendif127: \nendif126: \njmp endif125 \nelse125: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else129 \nif129: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else130 \nif130: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif130 \nelse130: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else131 \nif131: \npushl %esi \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif131 \nelse131: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else132 \nif132: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif132 \nelse132: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif132: \nendif131: \nendif130: \njmp endif129 \nelse129: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else133 \nif133: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else134 \nif134: \npushl %esi \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif134 \nelse134: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else135 \nif135: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif135 \nelse135: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else136 \nif136: \npushl %esi \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif136 \nelse136: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif136: \nendif135: \nendif134: \njmp endif133 \nelse133: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif133: \nendif129: \nendif125: \nmovl -16(%ebp), %eax \nmovl %eax, -16(%ebp) \nmovl -16(%ebp), %edi \nendif112: \nmovl %edi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
