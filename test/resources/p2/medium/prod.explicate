def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_7 = inject_int(0)
temp_41 = inject_big(create_list(inject_int(1)))
set_subscript(temp_41,inject_int(0),temp_7)
_prod = temp_41
temp_8 = inject_int(0)
def __func1(_a,_b,free_vars_1):
	temp_9 = inject_int(0)
	if is_int(_b):
		if is_int(temp_9):
			_temp_3 = inject_bool(_b == temp_9)
		
		if is_bool(temp_9):
			_temp_3 = inject_bool(project_int(_b) == project_bool(temp_9))
		
		if is_big(temp_9):
			_temp_3 = inject_bool(0)
		
	else:
		if is_bool(_b):
			if is_int(temp_9):
				_temp_3 = inject_bool(project_bool(_b) == project_int(temp_9))
			
			if is_bool(temp_9):
				_temp_3 = inject_bool(_b == temp_9)
			
			if is_big(temp_9):
				_temp_3 = inject_bool(0)
			
		else:
			if is_big(_b):
				if is_int(temp_9):
					_temp_3 = inject_bool(0)
				
				if is_bool(temp_9):
					_temp_3 = inject_bool(0)
				
				if is_big(temp_9):
					_temp_3 = inject_bool(equal(project_big(_b),project_big(temp_9)))
				
			
		
	
	_temp_3 = _temp_3
	temp_10 = is_true(_temp_3)
	temp_30 = is_true(temp_10)
	if temp_30:
		_temp_5 = inject_int(0)
	else:
		temp_11 = inject_int(1)
		_temp_0 = - temp_11
		if is_int(_b):
			if is_int(_temp_0):
				_temp_1 = inject_int((project_int(_b)) + (project_int(_temp_0)))
			else:
				if is_big(_temp_0):
					error_pyobj()
				else:
					if is_bool(_temp_0):
						_temp_1 = inject_int((project_int(_b)) + (project_bool(_temp_0)))
					else:
						error_pyobj()
					
				
			
		else:
			if is_big(_b):
				if is_int(_temp_0):
					error_pyobj()
				else:
					if is_big(_temp_0):
						_temp_1 = inject_big(add(project_big(_b),project_big(_temp_0)))
					else:
						if is_bool(_temp_0):
							error_pyobj()
						else:
							error_pyobj()
						
					
				
			else:
				if is_bool(_b):
					if is_int(_temp_0):
						_temp_1 = inject_int((project_bool(_b)) + (project_int(_temp_0)))
					else:
						if is_big(_temp_0):
							error_pyobj()
						else:
							if is_bool(_temp_0):
								_temp_1 = inject_bool((project_bool(_b)) + (project_bool(_temp_0)))
							else:
								error_pyobj()
							
						
					
				else:
					error_pyobj()
				
			
		
		_temp_1 = _temp_1
		temp_12 = inject_int(1)
		temp_13 = inject_int(0)
		temp_14 = get_subscript(free_vars_1,temp_12)
		temp_15 = get_subscript(temp_14,temp_13)
		temp_16 = inject_int(0)
		temp_17 = inject_int(0)
		temp_18 = get_subscript(free_vars_1,temp_16)
		temp_19 = inject_int(1)
		temp_20 = inject_int(0)
		temp_21 = get_subscript(free_vars_1,temp_19)
		temp_22 = get_subscript(temp_21,temp_20)
		temp_23 = get_fun_ptr(temp_15)
		temp_24 = get_subscript(temp_18,temp_17)
		temp_25 = get_free_vars(temp_22)
		_temp_2 = temp_23(temp_24,_temp_1,temp_25)
		temp_26 = inject_int(0)
		temp_27 = inject_int(0)
		temp_28 = get_subscript(free_vars_1,temp_26)
		temp_29 = get_subscript(temp_28,temp_27)
		if is_int(temp_29):
			if is_int(_temp_2):
				_temp_4 = inject_int((project_int(temp_29)) + (project_int(_temp_2)))
			else:
				if is_big(_temp_2):
					error_pyobj()
				else:
					if is_bool(_temp_2):
						_temp_4 = inject_int((project_int(temp_29)) + (project_bool(_temp_2)))
					else:
						error_pyobj()
					
				
			
		else:
			if is_big(temp_29):
				if is_int(_temp_2):
					error_pyobj()
				else:
					if is_big(_temp_2):
						_temp_4 = inject_big(add(project_big(temp_29),project_big(_temp_2)))
					else:
						if is_bool(_temp_2):
							error_pyobj()
						else:
							error_pyobj()
						
					
				
			else:
				if is_bool(temp_29):
					if is_int(_temp_2):
						_temp_4 = inject_int((project_bool(temp_29)) + (project_int(_temp_2)))
					else:
						if is_big(_temp_2):
							error_pyobj()
						else:
							if is_bool(_temp_2):
								_temp_4 = inject_bool((project_bool(temp_29)) + (project_bool(_temp_2)))
							else:
								error_pyobj()
							
						
					
				else:
					error_pyobj()
				
			
		
		_temp_4 = _temp_4
		_temp_5 = _temp_4
	
	return _temp_5

temp_42 = inject_big(create_list(inject_int(2)))
set_subscript(temp_42,inject_int(0),_a)
set_subscript(temp_42,inject_int(1),_prod)
temp_31 = temp_42
temp_32 = create_closure(__func1,temp_31)
set_subscript(_prod,temp_8,inject_big(temp_32))
temp_33 = inject_int(0)
temp_34 = get_subscript(_prod,temp_33)
temp_35 = inject_int(0)
temp_36 = get_subscript(_prod,temp_35)
temp_37 = get_fun_ptr(temp_34)
temp_38 = inject_int(4)
temp_39 = inject_int(3)
temp_40 = get_free_vars(temp_36)
_temp_6 = temp_37(temp_38,temp_39,temp_40)
print(_temp_6)