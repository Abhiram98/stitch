compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/medium/nested_lambda.py
valid p0
IN UNPARSE
<ast.Lambda object at 0x7f1c2fe5a980>
IN UNPARSE
<ast.arguments object at 0x7f1c2fe5a950>
IN UNPARSE
<ast.Lambda object at 0x7f1c2fe5a8c0>
IN UNPARSE
<ast.arguments object at 0x7f1c2fe5a890>
Visiting BinOp
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_2': set(), 'lambda_1': {'x'}}
fba.bound_vars={'__main__': {'temp_0', 'lambda_2', 'z', 'nl'}, 'lambda_2': {'x', 'lambda_1'}, 'lambda_1': {'y'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_2': set(), 'lambda_1': {'x'}}
fba.bound_vars={'__main__': {'temp_0', 'lambda_2', 'z', 'nl'}, 'lambda_2': {'x', 'lambda_1'}, 'lambda_1': {'y'}}
all_free=['x']
Before FLATTENING STAGE 1
lambda_2
inject_big
create_closure
x
x
lambda_1
inject_big
create_closure
free_vars_1
y
x
lambda_1
nl
lambda_2
z
get_fun_ptr
nl
get_free_vars
nl
print
temp_0
get_fun_ptr
z
get_free_vars
z
print
temp_0
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  left
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
collecting functiondef
collecting functiondef
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f1c2fe5a290>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f1c2fc7ded0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fe5b070>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fe5a530>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fc7d900>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf57e0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fe5abc0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf5c00>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fe5aa10>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf5780>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fc7da20>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf5750>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fc7dba0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf5810>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fc7dc90>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf5c30>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fe5a9b0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf58d0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fc7dd80>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf58a0>
From visit_Module, node in node.body
<ast.Expr object at 0x7f1c2fe5a740>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f1c2fcf56f0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fc7de40>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf6770>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fc7df60>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf6740>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fc7e050>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf6710>
From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fe5a350>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f1c2fcf66e0>
From visit_Module, node in node.body
<ast.Expr object at 0x7f1c2fe5a620>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f1c2fcf66b0>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_1)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_20)))], BB335:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_53)))], BB2:
)
dict_keys(['__func1', '__func2', 'module']) = 
Liveness took 3 loops
total_loop_time=0.0003542900085449219
per_basic_block_time=0.0003497600555419922
update_parent_time=1.1920928955078125e-06
Liveness time taken: 0.00040650367736816406
Int graph time taken: 0.00028252601623535156
coloring done
Coloring time taken: 0.0006186962127685547
stack_size=0
done compiling
liveness_time=0.00040650367736816406
interference_time=0.00028252601623535156
coloring_time=0.0006186962127685547
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func2 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall get_fun_ptr\nmovl %eax, %ebx \naddl $4, %esp \npushl $23 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %esi \ncall *%ebx\nmovl %eax, %ebx \naddl $8, %esp \npushl $124312 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npushl %ebx \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl $42 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %ebx \ncall get_free_vars\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %esi \ncall *%edi\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_1))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_2))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_1), Variable(temp_3))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_3), Variable(temp_2), Variable(temp_4))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_4), Variable(temp_49))), IrStat((Instruction(if), Variable(temp_49), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_31))), IrStat((Instruction(if), Variable(temp_31), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_4), Variable(temp_23))), IrStat((Instruction(call), Keyword(project_int), Variable(_y), Variable(temp_24))), IrStat((Instruction(movl), Variable(temp_24), Variable(temp_64))), IrStat((Instruction(addl), Variable(temp_23), Variable(temp_64))), IrStat((Instruction(movl), Variable(temp_64), Variable(temp_25))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_25), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_30))), IrStat((Instruction(if), Variable(temp_30), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_67))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_29))), IrStat((Instruction(if), Variable(temp_29), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_4), Variable(temp_26))), IrStat((Instruction(call), Keyword(project_bool), Variable(_y), Variable(temp_27))), IrStat((Instruction(movl), Variable(temp_27), Variable(temp_71))), IrStat((Instruction(addl), Variable(temp_26), Variable(temp_71))), IrStat((Instruction(movl), Variable(temp_71), Variable(temp_28))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_28), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_73))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_4), Variable(temp_48))), IrStat((Instruction(if), Variable(temp_48), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_37))), IrStat((Instruction(if), Variable(temp_37), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_76))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_36))), IrStat((Instruction(if), Variable(temp_36), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_4), Variable(temp_32))), IrStat((Instruction(call), Keyword(project_big), Variable(_y), Variable(temp_33))), IrStat((Instruction(call), Keyword(add), Variable(temp_32), Variable(temp_33), Variable(temp_34))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_34), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_35))), IrStat((Instruction(if), Variable(temp_35), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_83))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_84))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_4), Variable(temp_47))), IrStat((Instruction(if), Variable(temp_47), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_46))), IrStat((Instruction(if), Variable(temp_46), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_4), Variable(temp_38))), IrStat((Instruction(call), Keyword(project_int), Variable(_y), Variable(temp_39))), IrStat((Instruction(movl), Variable(temp_39), Variable(temp_89))), IrStat((Instruction(addl), Variable(temp_38), Variable(temp_89))), IrStat((Instruction(movl), Variable(temp_89), Variable(temp_40))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_40), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_45))), IrStat((Instruction(if), Variable(temp_45), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_92))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_44))), IrStat((Instruction(if), Variable(temp_44), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_4), Variable(temp_41))), IrStat((Instruction(call), Keyword(project_bool), Variable(_y), Variable(temp_42))), IrStat((Instruction(movl), Variable(temp_42), Variable(temp_96))), IrStat((Instruction(addl), Variable(temp_41), Variable(temp_96))), IrStat((Instruction(movl), Variable(temp_96), Variable(temp_43))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_43), Variable(temp_5))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_98))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_99))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(temp_5), Variable(temp_5))), IrStat((Instruction(return), Variable(temp_5)))]
compression possible BB104 & BB114
compression possible BB136 & BB140
compression possible BB129 & BB133
compression possible BB115 & BB119
compression possible BB178 & BB182
compression possible BB164 & BB168
compression possible BB157 & BB161
compression possible BB213 & BB217
compression possible BB206 & BB210
compression possible BB192 & BB196
compression possible BB187 & BB191
compression possible BB152 & BB156
compressing 0
Liveness took 5 loops
total_loop_time=0.003770112991333008
per_basic_block_time=0.003479480743408203
update_parent_time=0.0001614093780517578
Liveness time taken: 0.004251003265380859
unknown instruction->113:return,temp_5
Int graph time taken: 0.0009837150573730469
coloring done
Coloring time taken: 0.0021545886993408203
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%esi %esi
done compiling
liveness_time=0.004251003265380859
interference_time=0.0009837150573730469
coloring_time=0.0021545886993408203
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %edi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %ebx \npushl %edi \ncall get_subscript\nmovl %eax, %ebx \naddl $8, %esp \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \naddl %ebx, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif101 \nelse101: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif102 \nelse102: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl %ebx \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif103 \nelse103: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif103: \nendif102: \nendif101: \njmp endif100 \nelse100: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif105 \nelse105: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \npushl %ebx \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %esi \naddl $4, %esp \njmp endif106 \nelse106: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif107 \nelse107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif107: \nendif106: \nendif105: \njmp endif104 \nelse104: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \naddl %ebx, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif109 \nelse109: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif110 \nelse110: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl %ebx \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif111 \nelse111: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif111: \nendif110: \nendif109: \njmp endif108 \nelse108: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif108: \nendif104: \nendif100: \nmovl %esi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func2
[IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_20))), IrStat((Instruction(call), Keyword(create_list), Variable(temp_20), Variable(temp_21))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_21), Variable(temp_17))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_22))), IrStat((Instruction(call), Keyword(set_subscript), Variable(temp_17), Variable(temp_22), Variable(_x), Variable(temp_60))), IrStat((Instruction(movl), Variable(temp_17), Variable(_x))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_50))), IrStat((Instruction(call), Keyword(create_list), Variable(temp_50), Variable(temp_51))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_51), Variable(temp_18))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_52))), IrStat((Instruction(call), Keyword(set_subscript), Variable(temp_18), Variable(temp_52), Variable(_x), Variable(temp_65))), IrStat((Instruction(movl), Variable(temp_18), Variable(temp_6))), IrStat((Instruction(call), Keyword(create_closure), Immediate($__func1), Variable(temp_6), Variable(temp_7))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_7), Variable(_lambda_1))), IrStat((Instruction(return), Variable(_lambda_1)))]
Liveness took 3 loops
total_loop_time=0.0002143383026123047
per_basic_block_time=0.00021123886108398438
update_parent_time=9.5367431640625e-07
Liveness time taken: 0.00023102760314941406
unknown instruction->14:return,_lambda_1
Int graph time taken: 0.00015234947204589844
coloring done
Coloring time taken: 0.00032806396484375
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%edi %edi
done compiling
liveness_time=0.00023102760314941406
interference_time=0.00015234947204589844
coloring_time=0.00032806396484375
code = '\n__func2: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \npushl %edi \npushl %ebx \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %ebx, 8(%ebp) \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl 8(%ebp) \npushl %edi \npushl %ebx \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl %ebx, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
