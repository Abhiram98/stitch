def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

_x1 = inject_int(7)
def __func1(free_vars_1):
	_f1 = inject_int(7)

temp_24 = inject_int(0)
temp_25 = create_list(temp_24)
temp_20 = inject_big(temp_25)
temp_2 = temp_20
temp_3 = create_closure(__func1,temp_2)
_y1 = inject_big(temp_3)
def __func3(free_vars_3):
	temp_4 = inject_int(0)
	temp_26 = inject_int(1)
	temp_27 = create_list(temp_26)
	temp_21 = inject_big(temp_27)
	temp_28 = inject_int(0)
	set_subscript(temp_21,temp_28,temp_4)
	_x2 = temp_21
	def __func2(_y2,free_vars_2):
		temp_5 = inject_int(0)
		temp_6 = inject_int(0)
		temp_7 = get_subscript(free_vars_2,temp_5)
		temp_8 = get_subscript(temp_7,temp_6)
		temp_55 = is_int(temp_8)
		if temp_55:
			temp_37 = is_int(_y2)
			if temp_37:
				temp_29 = project_int(temp_8)
				temp_30 = project_int(_y2)
				temp_31 = temp_29 + temp_30
				temp_9 = inject_int(temp_31)
			else:
				temp_36 = is_big(_y2)
				if temp_36:
					error_pyobj()
				else:
					temp_35 = is_bool(_y2)
					if temp_35:
						temp_32 = project_int(temp_8)
						temp_33 = project_bool(_y2)
						temp_34 = temp_32 + temp_33
						temp_9 = inject_int(temp_34)
					else:
						error_pyobj()
					
				
			
		else:
			temp_54 = is_big(temp_8)
			if temp_54:
				temp_43 = is_int(_y2)
				if temp_43:
					error_pyobj()
				else:
					temp_42 = is_big(_y2)
					if temp_42:
						temp_38 = project_big(temp_8)
						temp_39 = project_big(_y2)
						temp_40 = add(temp_38,temp_39)
						temp_9 = inject_big(temp_40)
					else:
						temp_41 = is_bool(_y2)
						if temp_41:
							error_pyobj()
						else:
							error_pyobj()
						
					
				
			else:
				temp_53 = is_bool(temp_8)
				if temp_53:
					temp_52 = is_int(_y2)
					if temp_52:
						temp_44 = project_bool(temp_8)
						temp_45 = project_int(_y2)
						temp_46 = temp_44 + temp_45
						temp_9 = inject_int(temp_46)
					else:
						temp_51 = is_big(_y2)
						if temp_51:
							error_pyobj()
						else:
							temp_50 = is_bool(_y2)
							if temp_50:
								temp_47 = project_bool(temp_8)
								temp_48 = project_bool(_y2)
								temp_49 = temp_47 + temp_48
								temp_9 = inject_bool(temp_49)
							else:
								error_pyobj()
							
						
					
				else:
					error_pyobj()
				
			
		
		temp_9 = temp_9
		return temp_9
	
	temp_56 = inject_int(1)
	temp_57 = create_list(temp_56)
	temp_22 = inject_big(temp_57)
	temp_58 = inject_int(0)
	set_subscript(temp_22,temp_58,_x2)
	temp_10 = temp_22
	temp_11 = create_closure(__func2,temp_10)
	_lambda_1 = inject_big(temp_11)
	temp_12 = inject_int(0)
	temp_59 = inject_int(2)
	set_subscript(_x2,temp_12,temp_59)
	return _lambda_1

temp_60 = inject_int(0)
temp_61 = create_list(temp_60)
temp_23 = inject_big(temp_61)
temp_13 = temp_23
temp_14 = create_closure(__func3,temp_13)
_f2 = inject_big(temp_14)
temp_15 = get_fun_ptr(_f2)
temp_16 = get_free_vars(_f2)
_temp_0 = temp_15(temp_16)
temp_17 = get_fun_ptr(_temp_0)
temp_18 = inject_int(3)
temp_19 = get_free_vars(_temp_0)
_temp_1 = temp_17(temp_18,temp_19)
print(_temp_1)