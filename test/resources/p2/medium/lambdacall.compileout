compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/medium/lambdacall.py
valid p0
IN UNPARSE
<ast.Lambda object at 0x7f03a1432260>
IN UNPARSE
<ast.arguments object at 0x7f03a1432230>
visiting Call
Visiting BinOp
visiting Call
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_1': set()}
fba.bound_vars={'__main__': {'lambda_1', 'x'}, 'lambda_1': {'y'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'lambda_1': set()}
fba.bound_vars={'__main__': {'lambda_1', 'x'}, 'lambda_1': {'y'}}
all_free=[]
Before FLATTENING STAGE 1
lambda_1
inject_big
create_closure
y
x
get_fun_ptr
lambda_1
get_free_vars
lambda_1
print
x
visiting Call
visiting Call
Visiting BinOp
visiting Call
flattening node's  right
flattening node's  value
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
collecting functiondef
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f03a1431e70>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f03a1432e60>
From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1432b60>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1255780>
From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1432d10>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1254f40>
From visit_Module, node in node.body
<ast.Assign object at 0x7f03a14323e0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1254be0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1432dd0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1254fd0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1432ef0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1255000>
From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1432fe0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1254f10>
From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1432320>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f03a1254bb0>
From visit_Module, node in node.body
<ast.Expr object at 0x7f03a14322c0>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f03a1254b80>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_0)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_35)))], BB2:
)
dict_keys(['__func1', 'module']) = 
Liveness took 3 loops
total_loop_time=0.00018167495727539062
per_basic_block_time=0.00017690658569335938
update_parent_time=1.1920928955078125e-06
Liveness time taken: 0.0002079010009765625
Int graph time taken: 0.00012183189392089844
coloring done
Coloring time taken: 0.00028228759765625
stack_size=0
done compiling
liveness_time=0.0002079010009765625
interference_time=0.00012183189392089844
coloring_time=0.00028228759765625
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall get_fun_ptr\nmovl %eax, %ebx \naddl $4, %esp \npushl $23 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %esi \ncall *%ebx\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_0))), IrStat((Instruction(call), Keyword(is_int), Variable(_y), Variable(temp_34))), IrStat((Instruction(if), Variable(temp_34), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_0), Variable(temp_16))), IrStat((Instruction(if), Variable(temp_16), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(call), Keyword(project_int), Variable(_y), Variable(temp_8))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_0), Variable(temp_9))), IrStat((Instruction(movl), Variable(temp_9), Variable(temp_43))), IrStat((Instruction(addl), Variable(temp_8), Variable(temp_43))), IrStat((Instruction(movl), Variable(temp_43), Variable(temp_10))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_10), Variable(temp_1))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_0), Variable(temp_15))), IrStat((Instruction(if), Variable(temp_15), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_46))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_0), Variable(temp_14))), IrStat((Instruction(if), Variable(temp_14), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(project_int), Variable(_y), Variable(temp_11))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_0), Variable(temp_12))), IrStat((Instruction(movl), Variable(temp_12), Variable(temp_50))), IrStat((Instruction(addl), Variable(temp_11), Variable(temp_50))), IrStat((Instruction(movl), Variable(temp_50), Variable(temp_13))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_13), Variable(temp_1))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_52))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_big), Variable(_y), Variable(temp_33))), IrStat((Instruction(if), Variable(temp_33), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_0), Variable(temp_22))), IrStat((Instruction(if), Variable(temp_22), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_55))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_0), Variable(temp_21))), IrStat((Instruction(if), Variable(temp_21), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(call), Keyword(project_big), Variable(_y), Variable(temp_17))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_0), Variable(temp_18))), IrStat((Instruction(call), Keyword(add), Variable(temp_17), Variable(temp_18), Variable(temp_19))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_19), Variable(temp_1))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_0), Variable(temp_20))), IrStat((Instruction(if), Variable(temp_20), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_62))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_63))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_bool), Variable(_y), Variable(temp_32))), IrStat((Instruction(if), Variable(temp_32), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_0), Variable(temp_31))), IrStat((Instruction(if), Variable(temp_31), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(project_bool), Variable(_y), Variable(temp_23))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_0), Variable(temp_24))), IrStat((Instruction(movl), Variable(temp_24), Variable(temp_68))), IrStat((Instruction(addl), Variable(temp_23), Variable(temp_68))), IrStat((Instruction(movl), Variable(temp_68), Variable(temp_25))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_25), Variable(temp_1))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_0), Variable(temp_30))), IrStat((Instruction(if), Variable(temp_30), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_71))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_0), Variable(temp_29))), IrStat((Instruction(if), Variable(temp_29), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_bool), Variable(_y), Variable(temp_26))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_0), Variable(temp_27))), IrStat((Instruction(movl), Variable(temp_27), Variable(temp_75))), IrStat((Instruction(addl), Variable(temp_26), Variable(temp_75))), IrStat((Instruction(movl), Variable(temp_75), Variable(temp_28))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_28), Variable(temp_1))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_77))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_78))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(temp_1), Variable(temp_1))), IrStat((Instruction(return), Variable(temp_1)))]
compression possible BB104 & BB108
compression possible BB130 & BB134
compression possible BB123 & BB127
compression possible BB109 & BB113
compression possible BB172 & BB176
compression possible BB158 & BB162
compression possible BB151 & BB155
compression possible BB207 & BB211
compression possible BB200 & BB204
compression possible BB186 & BB190
compression possible BB181 & BB185
compression possible BB146 & BB150
compressing 0
Liveness took 5 loops
total_loop_time=0.0030825138092041016
per_basic_block_time=0.002854585647583008
update_parent_time=0.00012803077697753906
Liveness time taken: 0.003558635711669922
unknown instruction->110:return,temp_1
Int graph time taken: 0.0007774829864501953
coloring done
Coloring time taken: 0.0019562244415283203
Some variable spilled
But instructions ok
stack_size=0
return stat
return
%esi %esi
done compiling
liveness_time=0.003558635711669922
interference_time=0.0007774829864501953
coloring_time=0.0019562244415283203
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $0, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $1 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif101 \nelse101: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif102 \nelse102: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif103 \nelse103: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif103: \nendif102: \nendif101: \njmp endif100 \nelse100: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif105 \nelse105: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %esi \naddl $4, %esp \njmp endif106 \nelse106: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif107 \nelse107: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif107: \nendif106: \nendif105: \njmp endif104 \nelse104: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \njmp endif109 \nelse109: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif110 \nelse110: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %esi \naddl $4, %esp \njmp endif111 \nelse111: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif111: \nendif110: \nendif109: \njmp endif108 \nelse108: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif108: \nendif104: \nendif100: \nmovl %esi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
