def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

f = [0]
lambda_1 = inject_big(create_closure(def __func1(x,free_vars_1):
	return x
,[]))
f[0] = lambda_1
use_f = inject_big(create_closure(def __func2(free_vars_2):
	return free_vars_2[0][0]
,[f]))
create_f = inject_big(create_closure(def __func3(f,free_vars_3):
	return f[0]
,[]))
temp_0 = get_fun_ptr(create_f)(2,get_free_vars(create_f))
print(temp_0)
temp_1 = get_fun_ptr(use_f)(get_free_vars(use_f))
temp_2 = get_fun_ptr(temp_1)(4,get_free_vars(temp_1))
print(temp_2)