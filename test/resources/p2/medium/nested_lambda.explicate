def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func2(_x,free_vars_2):
	temp_17 = inject_big(create_list(inject_int(1)))
	set_subscript(temp_17,inject_int(0),_x)
	_x = temp_17
	def __func1(_y,free_vars_1):
		temp_1 = inject_int(0)
		temp_2 = inject_int(0)
		temp_3 = get_subscript(free_vars_1,temp_1)
		temp_4 = get_subscript(temp_3,temp_2)
		if is_int(temp_4):
			if is_int(_y):
				temp_5 = inject_int((project_int(temp_4)) + (project_int(_y)))
			else:
				if is_big(_y):
					error_pyobj()
				else:
					if is_bool(_y):
						temp_5 = inject_int((project_int(temp_4)) + (project_bool(_y)))
					else:
						error_pyobj()
					
				
			
		else:
			if is_big(temp_4):
				if is_int(_y):
					error_pyobj()
				else:
					if is_big(_y):
						temp_5 = inject_big(add(project_big(temp_4),project_big(_y)))
					else:
						if is_bool(_y):
							error_pyobj()
						else:
							error_pyobj()
						
					
				
			else:
				if is_bool(temp_4):
					if is_int(_y):
						temp_5 = inject_int((project_bool(temp_4)) + (project_int(_y)))
					else:
						if is_big(_y):
							error_pyobj()
						else:
							if is_bool(_y):
								temp_5 = inject_bool((project_bool(temp_4)) + (project_bool(_y)))
							else:
								error_pyobj()
							
						
					
				else:
					error_pyobj()
				
			
		
		temp_5 = temp_5
		return temp_5
	
	temp_18 = inject_big(create_list(inject_int(1)))
	set_subscript(temp_18,inject_int(0),_x)
	temp_6 = temp_18
	temp_7 = create_closure(__func1,temp_6)
	_lambda_1 = inject_big(temp_7)
	return _lambda_1

temp_19 = inject_big(create_list(inject_int(0)))
temp_8 = temp_19
temp_9 = create_closure(__func2,temp_8)
_lambda_2 = inject_big(temp_9)
_nl = _lambda_2
temp_10 = get_fun_ptr(_nl)
temp_11 = inject_int(23)
temp_12 = get_free_vars(_nl)
_z = temp_10(temp_11,temp_12)
temp_13 = inject_int(124312)
print(temp_13)
temp_14 = get_fun_ptr(_z)
temp_15 = inject_int(42)
temp_16 = get_free_vars(_z)
_temp_0 = temp_14(temp_15,temp_16)
print(_temp_0)