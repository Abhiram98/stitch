def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

prod = [0]
sum = inject_big(create_closure(def __func1(_a,b,free_vars_1):
	temp_0 = (free_vars_1[0][0]) + b
	return temp_0
,[a]))
prod[0] = inject_big(create_closure(def __func2(_a,b,free_vars_2):
	temp_4 = b == 0
	if is_true(temp_4):
		temp_6 = 0
	else:
		temp_1 = - 1
		temp_2 = b + temp_1
		temp_3 = get_fun_ptr(free_vars_2[1][0])(free_vars_2[0][0],temp_2,get_free_vars(free_vars_2[1][0]))
		temp_5 = (free_vars_2[0][0]) + temp_3
		temp_6 = temp_5
	
	return temp_6
,[a, prod]))
sub = inject_big(create_closure(def __func3(_a,b,free_vars_3):
	temp_7 = - b
	temp_8 = (free_vars_3[0][0]) + temp_7
	return temp_8
,[a]))
x = [sum, prod[0], sub]
temp_9 = x[0]
temp_10 = get_fun_ptr(temp_9)(1,2,get_free_vars(temp_9))
print(temp_10)
temp_11 = x[1]
temp_12 = get_fun_ptr(temp_11)(1,2,get_free_vars(temp_11))
print(temp_12)
temp_13 = x[2]
temp_14 = get_fun_ptr(temp_13)(1,2,get_free_vars(temp_13))
print(temp_14)