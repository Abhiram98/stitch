compiling /home/jovyan/lab5-team-tyler-and-luke-1/tests/autograde/p2/medium/fib.py
valid p0
Found IfExp in flat ast
IN UNPARSE
<ast.IfExp object at 0x7f8cc813e920>
Found IfExp in flat ast
IN UNPARSE
<ast.IfExp object at 0x7f8cc813e800>
visiting IfExp!
<class 'ast.Compare'>
visiting IfExp!
<class 'ast.Compare'>
Visiting BinOp
visiting Call
Visiting BinOp
Visiting UnaryOp
flattening node's  right
flattening node's  arg_i
visiting Call
Visiting BinOp
Visiting UnaryOp
flattening node's  right
flattening node's  arg_i
flattening node's  left
flattening node's  right
flattening IfExp test
flattening node's  test
flattening node's  orelse
flattening IfExp test
flattening node's  test
flattening node's  orelse
flattening node's  value
visiting Call
visiting Call
flattening node's  arg_i
collecting functiondef
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'fib': {'fib'}}
fba.bound_vars={'__main__': {'temp_11', 'fib'}, 'fib': {'temp_7', 'temp_6', 'n', 'temp_0', 'temp_8', 'temp_5', 'temp_4', 'temp_9', 'temp_2', 'temp_1', 'temp_10', 'temp_3'}}
Free-Bound analysis----
fba.free_vars={'__main__': set(), 'fib': {'fib'}}
fba.bound_vars={'__main__': {'temp_11', 'fib'}, 'fib': {'temp_7', 'temp_6', 'n', 'temp_0', 'temp_8', 'temp_5', 'temp_4', 'temp_9', 'temp_2', 'temp_1', 'temp_10', 'temp_3'}}
all_free=['fib']
found else while unparsing
found else while unparsing
Before FLATTENING STAGE 1
fib
fib
inject_big
create_closure
temp_8
n
is_true
is_true
temp_8
temp_10
temp_6
n
is_true
is_true
temp_6
temp_9
temp_0
temp_1
n
temp_0
temp_2
temp_3
n
temp_2
temp_4
get_fun_ptr
free_vars_1
temp_1
get_free_vars
free_vars_1
temp_5
get_fun_ptr
free_vars_1
temp_3
get_free_vars
free_vars_1
temp_7
temp_4
temp_5
temp_9
temp_7
temp_10
temp_9
temp_10
fib
temp_11
get_fun_ptr
fib
get_free_vars
fib
print
temp_11
found else while unparsing
found else while unparsing
visiting Call
flattening node's  to_flat
visiting Call
flattening node's  slice
visiting Call
visiting Call
visiting Call
flattening node's  to_flat
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  to_flat
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
Visiting UnaryOp
visiting Call
flattening node's  operand
Visiting BinOp
Visiting UnaryOp
visiting Call
flattening node's  operand
Visiting BinOp
visiting Call
visiting Call
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  arg_i
flattening node's  func
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  slice
visiting Call
flattening node's  slice
flattening node's  value
flattening node's  arg_i
flattening node's  func
flattening node's  arg_i
Visiting BinOp
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  slice
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  slice
flattening node's  arg_i
flattening node's  func
flattening node's  arg_i
flattening node's  arg_i
visiting Call
collecting functiondef
found else while unparsing
found else while unparsing
After FLATTENING STAGE 1
BEGIN EXPLICATE
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc813e860>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc813e6b0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc813e410>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc813e2f0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc813e530>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe8b80>
From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f8cc813ea10>
RETURN: From visit_Module, node in node.body
<ast.FunctionDef object at 0x7f8cc7fe8a30>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe80d0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe8a00>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe8160>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7eab3d0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc813fa90>
RETURN: From visit_Module, node in node.body
<ast.Call object at 0x7f8cc7eab370>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe82b0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7ea8370>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe8370>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7eab460>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe84c0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7eab490>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe8580>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7eab5e0>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe8400>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7eab610>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe8700>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7eab670>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7fe87f0>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7ea9870>
From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc813f460>
RETURN: From visit_Module, node in node.body
<ast.Assign object at 0x7f8cc7ea98a0>
From visit_Module, node in node.body
<ast.Expr object at 0x7f8cc813e9e0>
RETURN: From visit_Module, node in node.body
<ast.Expr object at 0x7f8cc7ea8700>
After Explicate Stage
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  left
flattening node's  to_flat
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
Visiting UnaryOp
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
Visiting UnaryOp
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
Visiting BinOp
visiting Call
visiting Call
flattening node's  left
flattening node's  right
flattening node's  arg_i
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
visiting Call
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
flattening test to  <class 'ast.If'>
flattening node's  test
not flattening test <class 'ast.Name'>
not flattening test <class 'ast.Name'>
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
flattening node's  arg_i
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
flattening node's  arg_i
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
visiting Call
collecting functiondef
After Flattening Stage 2
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
found else while unparsing
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_14)))], BB102:
)
self.visit(node.body[0]) =([IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_12)))], BB2:
)
dict_keys(['__func1', 'module']) = 
Liveness took 3 loops
total_loop_time=0.00042057037353515625
per_basic_block_time=0.00041604042053222656
update_parent_time=7.152557373046875e-07
Liveness time taken: 0.0004508495330810547
Int graph time taken: 0.0003960132598876953
coloring done
Coloring time taken: 0.0009164810180664062
Some variable spilled
But instructions ok
last_var =Variable(temp_52)
stack_size=4
done compiling
liveness_time=0.0004508495330810547
interference_time=0.0003960132598876953
coloring_time=0.0009164810180664062
code = '\n.globl main\nmain: \npushl %ebp \nmovl %esp, %ebp \nsubl $4, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \npushl %edi \npushl %ebx \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall create_list\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall inject_big\nmovl %eax, -4(%ebp) \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \npushl %edi \npushl -4(%ebp) \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \nmovl -4(%ebp), %eax \npushl %eax \npushl $__func1 \ncall create_closure\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %esi \npushl %ebx \ncall set_subscript\nmovl %eax, %eax \naddl $12, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %esi \ncall get_fun_ptr\nmovl %eax, %esi \naddl $4, %esp \npushl $6 \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \npushl %edi \ncall get_free_vars\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \npushl %ebx \ncall *%esi\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall print_any \naddl $4, %esp \npopl %edi \npopl %esi\npopl %ebx\nmovl $0, %eax \nmovl %ebp, %esp \npopl %ebp \nret\n\n'
GENERATING ASSEMBLY FOR:  __func1
[IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_14))), IrStat((Instruction(call), Keyword(is_int), Variable(_n), Variable(temp_78))), IrStat((Instruction(if), Variable(temp_78), Keyword(if100), Keyword(else100))), IrStat((Instruction(label), Keyword(if100))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_14), Variable(temp_57))), IrStat((Instruction(if), Variable(temp_57), Keyword(if101), Keyword(else101))), IrStat((Instruction(label), Keyword(if101))), IrStat((Instruction(comp_eq), Variable(_n), Variable(temp_14), Variable(temp_191))), IrStat((Instruction(movl), Variable(temp_191), Variable(temp_56))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_56), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif101))), IrStat((Instruction(label), Keyword(else101))), IrStat((Instruction(label), Keyword(endif101))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_14), Variable(temp_61))), IrStat((Instruction(if), Variable(temp_61), Keyword(if102), Keyword(else102))), IrStat((Instruction(label), Keyword(if102))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_58))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_14), Variable(temp_59))), IrStat((Instruction(comp_eq), Variable(temp_58), Variable(temp_59), Variable(temp_196))), IrStat((Instruction(movl), Variable(temp_196), Variable(temp_60))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_60), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif102))), IrStat((Instruction(label), Keyword(else102))), IrStat((Instruction(label), Keyword(endif102))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_14), Variable(temp_62))), IrStat((Instruction(if), Variable(temp_62), Keyword(if103), Keyword(else103))), IrStat((Instruction(label), Keyword(if103))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif103))), IrStat((Instruction(label), Keyword(else103))), IrStat((Instruction(label), Keyword(endif103))), IrStat((Instruction(jmp), Keyword(endif100))), IrStat((Instruction(label), Keyword(else100))), IrStat((Instruction(call), Keyword(is_bool), Variable(_n), Variable(temp_77))), IrStat((Instruction(if), Variable(temp_77), Keyword(if104), Keyword(else104))), IrStat((Instruction(label), Keyword(if104))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_14), Variable(temp_66))), IrStat((Instruction(if), Variable(temp_66), Keyword(if105), Keyword(else105))), IrStat((Instruction(label), Keyword(if105))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_63))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_14), Variable(temp_64))), IrStat((Instruction(comp_eq), Variable(temp_63), Variable(temp_64), Variable(temp_204))), IrStat((Instruction(movl), Variable(temp_204), Variable(temp_65))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_65), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif105))), IrStat((Instruction(label), Keyword(else105))), IrStat((Instruction(label), Keyword(endif105))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_14), Variable(temp_68))), IrStat((Instruction(if), Variable(temp_68), Keyword(if106), Keyword(else106))), IrStat((Instruction(label), Keyword(if106))), IrStat((Instruction(comp_eq), Variable(_n), Variable(temp_14), Variable(temp_207))), IrStat((Instruction(movl), Variable(temp_207), Variable(temp_67))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_67), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif106))), IrStat((Instruction(label), Keyword(else106))), IrStat((Instruction(label), Keyword(endif106))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_14), Variable(temp_69))), IrStat((Instruction(if), Variable(temp_69), Keyword(if107), Keyword(else107))), IrStat((Instruction(label), Keyword(if107))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif107))), IrStat((Instruction(label), Keyword(else107))), IrStat((Instruction(label), Keyword(endif107))), IrStat((Instruction(jmp), Keyword(endif104))), IrStat((Instruction(label), Keyword(else104))), IrStat((Instruction(call), Keyword(is_big), Variable(_n), Variable(temp_76))), IrStat((Instruction(if), Variable(temp_76), Keyword(if108), Keyword(else108))), IrStat((Instruction(label), Keyword(if108))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_14), Variable(temp_70))), IrStat((Instruction(if), Variable(temp_70), Keyword(if109), Keyword(else109))), IrStat((Instruction(label), Keyword(if109))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif109))), IrStat((Instruction(label), Keyword(else109))), IrStat((Instruction(label), Keyword(endif109))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_14), Variable(temp_71))), IrStat((Instruction(if), Variable(temp_71), Keyword(if110), Keyword(else110))), IrStat((Instruction(label), Keyword(if110))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif110))), IrStat((Instruction(label), Keyword(else110))), IrStat((Instruction(label), Keyword(endif110))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_14), Variable(temp_75))), IrStat((Instruction(if), Variable(temp_75), Keyword(if111), Keyword(else111))), IrStat((Instruction(label), Keyword(if111))), IrStat((Instruction(call), Keyword(project_big), Variable(_n), Variable(temp_72))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_14), Variable(temp_73))), IrStat((Instruction(call), Keyword(equal), Variable(temp_72), Variable(temp_73), Variable(temp_74))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_74), Variable(_temp_8))), IrStat((Instruction(jmp), Keyword(endif111))), IrStat((Instruction(label), Keyword(else111))), IrStat((Instruction(label), Keyword(endif111))), IrStat((Instruction(jmp), Keyword(endif108))), IrStat((Instruction(label), Keyword(else108))), IrStat((Instruction(label), Keyword(endif108))), IrStat((Instruction(label), Keyword(endif104))), IrStat((Instruction(label), Keyword(endif100))), IrStat((Instruction(movl), Variable(_temp_8), Variable(_temp_8))), IrStat((Instruction(call), Keyword(is_true), Variable(_temp_8), Variable(temp_15))), IrStat((Instruction(call), Keyword(is_true), Variable(temp_15), Variable(temp_41))), IrStat((Instruction(if), Variable(temp_41), Keyword(if112), Keyword(else112))), IrStat((Instruction(label), Keyword(if112))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(_temp_10))), IrStat((Instruction(jmp), Keyword(endif112))), IrStat((Instruction(label), Keyword(else112))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_16))), IrStat((Instruction(call), Keyword(is_int), Variable(_n), Variable(temp_101))), IrStat((Instruction(if), Variable(temp_101), Keyword(if113), Keyword(else113))), IrStat((Instruction(label), Keyword(if113))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_16), Variable(temp_80))), IrStat((Instruction(if), Variable(temp_80), Keyword(if114), Keyword(else114))), IrStat((Instruction(label), Keyword(if114))), IrStat((Instruction(comp_eq), Variable(_n), Variable(temp_16), Variable(temp_227))), IrStat((Instruction(movl), Variable(temp_227), Variable(temp_79))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_79), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif114))), IrStat((Instruction(label), Keyword(else114))), IrStat((Instruction(label), Keyword(endif114))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_16), Variable(temp_84))), IrStat((Instruction(if), Variable(temp_84), Keyword(if115), Keyword(else115))), IrStat((Instruction(label), Keyword(if115))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_81))), IrStat((Instruction(call), Keyword(project_bool), Variable(temp_16), Variable(temp_82))), IrStat((Instruction(comp_eq), Variable(temp_81), Variable(temp_82), Variable(temp_232))), IrStat((Instruction(movl), Variable(temp_232), Variable(temp_83))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_83), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif115))), IrStat((Instruction(label), Keyword(else115))), IrStat((Instruction(label), Keyword(endif115))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_16), Variable(temp_85))), IrStat((Instruction(if), Variable(temp_85), Keyword(if116), Keyword(else116))), IrStat((Instruction(label), Keyword(if116))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif116))), IrStat((Instruction(label), Keyword(else116))), IrStat((Instruction(label), Keyword(endif116))), IrStat((Instruction(jmp), Keyword(endif113))), IrStat((Instruction(label), Keyword(else113))), IrStat((Instruction(call), Keyword(is_bool), Variable(_n), Variable(temp_100))), IrStat((Instruction(if), Variable(temp_100), Keyword(if117), Keyword(else117))), IrStat((Instruction(label), Keyword(if117))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_16), Variable(temp_89))), IrStat((Instruction(if), Variable(temp_89), Keyword(if118), Keyword(else118))), IrStat((Instruction(label), Keyword(if118))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_86))), IrStat((Instruction(call), Keyword(project_int), Variable(temp_16), Variable(temp_87))), IrStat((Instruction(comp_eq), Variable(temp_86), Variable(temp_87), Variable(temp_240))), IrStat((Instruction(movl), Variable(temp_240), Variable(temp_88))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_88), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif118))), IrStat((Instruction(label), Keyword(else118))), IrStat((Instruction(label), Keyword(endif118))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_16), Variable(temp_91))), IrStat((Instruction(if), Variable(temp_91), Keyword(if119), Keyword(else119))), IrStat((Instruction(label), Keyword(if119))), IrStat((Instruction(comp_eq), Variable(_n), Variable(temp_16), Variable(temp_243))), IrStat((Instruction(movl), Variable(temp_243), Variable(temp_90))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_90), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif119))), IrStat((Instruction(label), Keyword(else119))), IrStat((Instruction(label), Keyword(endif119))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_16), Variable(temp_92))), IrStat((Instruction(if), Variable(temp_92), Keyword(if120), Keyword(else120))), IrStat((Instruction(label), Keyword(if120))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif120))), IrStat((Instruction(label), Keyword(else120))), IrStat((Instruction(label), Keyword(endif120))), IrStat((Instruction(jmp), Keyword(endif117))), IrStat((Instruction(label), Keyword(else117))), IrStat((Instruction(call), Keyword(is_big), Variable(_n), Variable(temp_99))), IrStat((Instruction(if), Variable(temp_99), Keyword(if121), Keyword(else121))), IrStat((Instruction(label), Keyword(if121))), IrStat((Instruction(call), Keyword(is_int), Variable(temp_16), Variable(temp_93))), IrStat((Instruction(if), Variable(temp_93), Keyword(if122), Keyword(else122))), IrStat((Instruction(label), Keyword(if122))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif122))), IrStat((Instruction(label), Keyword(else122))), IrStat((Instruction(label), Keyword(endif122))), IrStat((Instruction(call), Keyword(is_bool), Variable(temp_16), Variable(temp_94))), IrStat((Instruction(if), Variable(temp_94), Keyword(if123), Keyword(else123))), IrStat((Instruction(label), Keyword(if123))), IrStat((Instruction(call), Keyword(inject_bool), Immediate($0), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif123))), IrStat((Instruction(label), Keyword(else123))), IrStat((Instruction(label), Keyword(endif123))), IrStat((Instruction(call), Keyword(is_big), Variable(temp_16), Variable(temp_98))), IrStat((Instruction(if), Variable(temp_98), Keyword(if124), Keyword(else124))), IrStat((Instruction(label), Keyword(if124))), IrStat((Instruction(call), Keyword(project_big), Variable(_n), Variable(temp_95))), IrStat((Instruction(call), Keyword(project_big), Variable(temp_16), Variable(temp_96))), IrStat((Instruction(call), Keyword(equal), Variable(temp_95), Variable(temp_96), Variable(temp_97))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_97), Variable(_temp_6))), IrStat((Instruction(jmp), Keyword(endif124))), IrStat((Instruction(label), Keyword(else124))), IrStat((Instruction(label), Keyword(endif124))), IrStat((Instruction(jmp), Keyword(endif121))), IrStat((Instruction(label), Keyword(else121))), IrStat((Instruction(label), Keyword(endif121))), IrStat((Instruction(label), Keyword(endif117))), IrStat((Instruction(label), Keyword(endif113))), IrStat((Instruction(movl), Variable(_temp_6), Variable(_temp_6))), IrStat((Instruction(call), Keyword(is_true), Variable(_temp_6), Variable(temp_17))), IrStat((Instruction(call), Keyword(is_true), Variable(temp_17), Variable(temp_40))), IrStat((Instruction(if), Variable(temp_40), Keyword(if125), Keyword(else125))), IrStat((Instruction(label), Keyword(if125))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(_temp_9))), IrStat((Instruction(jmp), Keyword(endif125))), IrStat((Instruction(label), Keyword(else125))), IrStat((Instruction(call), Keyword(inject_int), Immediate($1), Variable(temp_18))), IrStat((Instruction(movl), Variable(temp_18), Variable(temp_261))), IrStat((Instruction(negl), Variable(temp_261))), IrStat((Instruction(movl), Variable(temp_261), Variable(_temp_0))), IrStat((Instruction(call), Keyword(is_int), Variable(_n), Variable(temp_128))), IrStat((Instruction(if), Variable(temp_128), Keyword(if126), Keyword(else126))), IrStat((Instruction(label), Keyword(if126))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_110))), IrStat((Instruction(if), Variable(temp_110), Keyword(if127), Keyword(else127))), IrStat((Instruction(label), Keyword(if127))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_102))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_0), Variable(temp_103))), IrStat((Instruction(movl), Variable(temp_103), Variable(temp_266))), IrStat((Instruction(addl), Variable(temp_102), Variable(temp_266))), IrStat((Instruction(movl), Variable(temp_266), Variable(temp_104))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_104), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif127))), IrStat((Instruction(label), Keyword(else127))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_109))), IrStat((Instruction(if), Variable(temp_109), Keyword(if128), Keyword(else128))), IrStat((Instruction(label), Keyword(if128))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_269))), IrStat((Instruction(jmp), Keyword(endif128))), IrStat((Instruction(label), Keyword(else128))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_108))), IrStat((Instruction(if), Variable(temp_108), Keyword(if129), Keyword(else129))), IrStat((Instruction(label), Keyword(if129))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_105))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_0), Variable(temp_106))), IrStat((Instruction(movl), Variable(temp_106), Variable(temp_273))), IrStat((Instruction(addl), Variable(temp_105), Variable(temp_273))), IrStat((Instruction(movl), Variable(temp_273), Variable(temp_107))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_107), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif129))), IrStat((Instruction(label), Keyword(else129))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_275))), IrStat((Instruction(label), Keyword(endif129))), IrStat((Instruction(label), Keyword(endif128))), IrStat((Instruction(label), Keyword(endif127))), IrStat((Instruction(jmp), Keyword(endif126))), IrStat((Instruction(label), Keyword(else126))), IrStat((Instruction(call), Keyword(is_big), Variable(_n), Variable(temp_127))), IrStat((Instruction(if), Variable(temp_127), Keyword(if130), Keyword(else130))), IrStat((Instruction(label), Keyword(if130))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_116))), IrStat((Instruction(if), Variable(temp_116), Keyword(if131), Keyword(else131))), IrStat((Instruction(label), Keyword(if131))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_278))), IrStat((Instruction(jmp), Keyword(endif131))), IrStat((Instruction(label), Keyword(else131))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_115))), IrStat((Instruction(if), Variable(temp_115), Keyword(if132), Keyword(else132))), IrStat((Instruction(label), Keyword(if132))), IrStat((Instruction(call), Keyword(project_big), Variable(_n), Variable(temp_111))), IrStat((Instruction(call), Keyword(project_big), Variable(_temp_0), Variable(temp_112))), IrStat((Instruction(call), Keyword(add), Variable(temp_111), Variable(temp_112), Variable(temp_113))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_113), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif132))), IrStat((Instruction(label), Keyword(else132))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_114))), IrStat((Instruction(if), Variable(temp_114), Keyword(if133), Keyword(else133))), IrStat((Instruction(label), Keyword(if133))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_285))), IrStat((Instruction(jmp), Keyword(endif133))), IrStat((Instruction(label), Keyword(else133))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_286))), IrStat((Instruction(label), Keyword(endif133))), IrStat((Instruction(label), Keyword(endif132))), IrStat((Instruction(label), Keyword(endif131))), IrStat((Instruction(jmp), Keyword(endif130))), IrStat((Instruction(label), Keyword(else130))), IrStat((Instruction(call), Keyword(is_bool), Variable(_n), Variable(temp_126))), IrStat((Instruction(if), Variable(temp_126), Keyword(if134), Keyword(else134))), IrStat((Instruction(label), Keyword(if134))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_0), Variable(temp_125))), IrStat((Instruction(if), Variable(temp_125), Keyword(if135), Keyword(else135))), IrStat((Instruction(label), Keyword(if135))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_117))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_0), Variable(temp_118))), IrStat((Instruction(movl), Variable(temp_118), Variable(temp_291))), IrStat((Instruction(addl), Variable(temp_117), Variable(temp_291))), IrStat((Instruction(movl), Variable(temp_291), Variable(temp_119))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_119), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif135))), IrStat((Instruction(label), Keyword(else135))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_0), Variable(temp_124))), IrStat((Instruction(if), Variable(temp_124), Keyword(if136), Keyword(else136))), IrStat((Instruction(label), Keyword(if136))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_294))), IrStat((Instruction(jmp), Keyword(endif136))), IrStat((Instruction(label), Keyword(else136))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_0), Variable(temp_123))), IrStat((Instruction(if), Variable(temp_123), Keyword(if137), Keyword(else137))), IrStat((Instruction(label), Keyword(if137))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_120))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_0), Variable(temp_121))), IrStat((Instruction(movl), Variable(temp_121), Variable(temp_298))), IrStat((Instruction(addl), Variable(temp_120), Variable(temp_298))), IrStat((Instruction(movl), Variable(temp_298), Variable(temp_122))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_122), Variable(_temp_1))), IrStat((Instruction(jmp), Keyword(endif137))), IrStat((Instruction(label), Keyword(else137))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_300))), IrStat((Instruction(label), Keyword(endif137))), IrStat((Instruction(label), Keyword(endif136))), IrStat((Instruction(label), Keyword(endif135))), IrStat((Instruction(jmp), Keyword(endif134))), IrStat((Instruction(label), Keyword(else134))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_301))), IrStat((Instruction(label), Keyword(endif134))), IrStat((Instruction(label), Keyword(endif130))), IrStat((Instruction(label), Keyword(endif126))), IrStat((Instruction(movl), Variable(_temp_1), Variable(_temp_1))), IrStat((Instruction(call), Keyword(inject_int), Immediate($2), Variable(temp_19))), IrStat((Instruction(movl), Variable(temp_19), Variable(temp_303))), IrStat((Instruction(negl), Variable(temp_303))), IrStat((Instruction(movl), Variable(temp_303), Variable(_temp_2))), IrStat((Instruction(call), Keyword(is_int), Variable(_n), Variable(temp_155))), IrStat((Instruction(if), Variable(temp_155), Keyword(if138), Keyword(else138))), IrStat((Instruction(label), Keyword(if138))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_2), Variable(temp_137))), IrStat((Instruction(if), Variable(temp_137), Keyword(if139), Keyword(else139))), IrStat((Instruction(label), Keyword(if139))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_129))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_2), Variable(temp_130))), IrStat((Instruction(movl), Variable(temp_130), Variable(temp_308))), IrStat((Instruction(addl), Variable(temp_129), Variable(temp_308))), IrStat((Instruction(movl), Variable(temp_308), Variable(temp_131))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_131), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif139))), IrStat((Instruction(label), Keyword(else139))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_2), Variable(temp_136))), IrStat((Instruction(if), Variable(temp_136), Keyword(if140), Keyword(else140))), IrStat((Instruction(label), Keyword(if140))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_311))), IrStat((Instruction(jmp), Keyword(endif140))), IrStat((Instruction(label), Keyword(else140))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_2), Variable(temp_135))), IrStat((Instruction(if), Variable(temp_135), Keyword(if141), Keyword(else141))), IrStat((Instruction(label), Keyword(if141))), IrStat((Instruction(call), Keyword(project_int), Variable(_n), Variable(temp_132))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_2), Variable(temp_133))), IrStat((Instruction(movl), Variable(temp_133), Variable(temp_315))), IrStat((Instruction(addl), Variable(temp_132), Variable(temp_315))), IrStat((Instruction(movl), Variable(temp_315), Variable(temp_134))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_134), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif141))), IrStat((Instruction(label), Keyword(else141))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_317))), IrStat((Instruction(label), Keyword(endif141))), IrStat((Instruction(label), Keyword(endif140))), IrStat((Instruction(label), Keyword(endif139))), IrStat((Instruction(jmp), Keyword(endif138))), IrStat((Instruction(label), Keyword(else138))), IrStat((Instruction(call), Keyword(is_big), Variable(_n), Variable(temp_154))), IrStat((Instruction(if), Variable(temp_154), Keyword(if142), Keyword(else142))), IrStat((Instruction(label), Keyword(if142))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_2), Variable(temp_143))), IrStat((Instruction(if), Variable(temp_143), Keyword(if143), Keyword(else143))), IrStat((Instruction(label), Keyword(if143))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_320))), IrStat((Instruction(jmp), Keyword(endif143))), IrStat((Instruction(label), Keyword(else143))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_2), Variable(temp_142))), IrStat((Instruction(if), Variable(temp_142), Keyword(if144), Keyword(else144))), IrStat((Instruction(label), Keyword(if144))), IrStat((Instruction(call), Keyword(project_big), Variable(_n), Variable(temp_138))), IrStat((Instruction(call), Keyword(project_big), Variable(_temp_2), Variable(temp_139))), IrStat((Instruction(call), Keyword(add), Variable(temp_138), Variable(temp_139), Variable(temp_140))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_140), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif144))), IrStat((Instruction(label), Keyword(else144))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_2), Variable(temp_141))), IrStat((Instruction(if), Variable(temp_141), Keyword(if145), Keyword(else145))), IrStat((Instruction(label), Keyword(if145))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_327))), IrStat((Instruction(jmp), Keyword(endif145))), IrStat((Instruction(label), Keyword(else145))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_328))), IrStat((Instruction(label), Keyword(endif145))), IrStat((Instruction(label), Keyword(endif144))), IrStat((Instruction(label), Keyword(endif143))), IrStat((Instruction(jmp), Keyword(endif142))), IrStat((Instruction(label), Keyword(else142))), IrStat((Instruction(call), Keyword(is_bool), Variable(_n), Variable(temp_153))), IrStat((Instruction(if), Variable(temp_153), Keyword(if146), Keyword(else146))), IrStat((Instruction(label), Keyword(if146))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_2), Variable(temp_152))), IrStat((Instruction(if), Variable(temp_152), Keyword(if147), Keyword(else147))), IrStat((Instruction(label), Keyword(if147))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_144))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_2), Variable(temp_145))), IrStat((Instruction(movl), Variable(temp_145), Variable(temp_333))), IrStat((Instruction(addl), Variable(temp_144), Variable(temp_333))), IrStat((Instruction(movl), Variable(temp_333), Variable(temp_146))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_146), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif147))), IrStat((Instruction(label), Keyword(else147))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_2), Variable(temp_151))), IrStat((Instruction(if), Variable(temp_151), Keyword(if148), Keyword(else148))), IrStat((Instruction(label), Keyword(if148))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_336))), IrStat((Instruction(jmp), Keyword(endif148))), IrStat((Instruction(label), Keyword(else148))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_2), Variable(temp_150))), IrStat((Instruction(if), Variable(temp_150), Keyword(if149), Keyword(else149))), IrStat((Instruction(label), Keyword(if149))), IrStat((Instruction(call), Keyword(project_bool), Variable(_n), Variable(temp_147))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_2), Variable(temp_148))), IrStat((Instruction(movl), Variable(temp_148), Variable(temp_340))), IrStat((Instruction(addl), Variable(temp_147), Variable(temp_340))), IrStat((Instruction(movl), Variable(temp_340), Variable(temp_149))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_149), Variable(_temp_3))), IrStat((Instruction(jmp), Keyword(endif149))), IrStat((Instruction(label), Keyword(else149))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_342))), IrStat((Instruction(label), Keyword(endif149))), IrStat((Instruction(label), Keyword(endif148))), IrStat((Instruction(label), Keyword(endif147))), IrStat((Instruction(jmp), Keyword(endif146))), IrStat((Instruction(label), Keyword(else146))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_343))), IrStat((Instruction(label), Keyword(endif146))), IrStat((Instruction(label), Keyword(endif142))), IrStat((Instruction(label), Keyword(endif138))), IrStat((Instruction(movl), Variable(_temp_3), Variable(_temp_3))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_20))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_21))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_20), Variable(temp_22))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_22), Variable(temp_21), Variable(temp_23))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_24))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_25))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_24), Variable(temp_26))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_26), Variable(temp_25), Variable(temp_27))), IrStat((Instruction(call), Keyword(get_fun_ptr), Variable(temp_23), Variable(temp_28))), IrStat((Instruction(call), Keyword(get_free_vars), Variable(temp_27), Variable(temp_29))), IrStat((Instruction(call), Variable(temp_28), Variable(_temp_1), Variable(temp_29), Variable(_temp_4))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_30))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_31))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_30), Variable(temp_32))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_32), Variable(temp_31), Variable(temp_33))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_34))), IrStat((Instruction(call), Keyword(inject_int), Immediate($0), Variable(temp_35))), IrStat((Instruction(call), Keyword(get_subscript), Variable(free_vars_1), Variable(temp_34), Variable(temp_36))), IrStat((Instruction(call), Keyword(get_subscript), Variable(temp_36), Variable(temp_35), Variable(temp_37))), IrStat((Instruction(call), Keyword(get_fun_ptr), Variable(temp_33), Variable(temp_38))), IrStat((Instruction(call), Keyword(get_free_vars), Variable(temp_37), Variable(temp_39))), IrStat((Instruction(call), Variable(temp_38), Variable(_temp_3), Variable(temp_39), Variable(_temp_5))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_4), Variable(temp_182))), IrStat((Instruction(if), Variable(temp_182), Keyword(if150), Keyword(else150))), IrStat((Instruction(label), Keyword(if150))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_5), Variable(temp_164))), IrStat((Instruction(if), Variable(temp_164), Keyword(if151), Keyword(else151))), IrStat((Instruction(label), Keyword(if151))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_4), Variable(temp_156))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_5), Variable(temp_157))), IrStat((Instruction(movl), Variable(temp_157), Variable(temp_370))), IrStat((Instruction(addl), Variable(temp_156), Variable(temp_370))), IrStat((Instruction(movl), Variable(temp_370), Variable(temp_158))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_158), Variable(_temp_7))), IrStat((Instruction(jmp), Keyword(endif151))), IrStat((Instruction(label), Keyword(else151))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_5), Variable(temp_163))), IrStat((Instruction(if), Variable(temp_163), Keyword(if152), Keyword(else152))), IrStat((Instruction(label), Keyword(if152))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_373))), IrStat((Instruction(jmp), Keyword(endif152))), IrStat((Instruction(label), Keyword(else152))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_5), Variable(temp_162))), IrStat((Instruction(if), Variable(temp_162), Keyword(if153), Keyword(else153))), IrStat((Instruction(label), Keyword(if153))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_4), Variable(temp_159))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_5), Variable(temp_160))), IrStat((Instruction(movl), Variable(temp_160), Variable(temp_377))), IrStat((Instruction(addl), Variable(temp_159), Variable(temp_377))), IrStat((Instruction(movl), Variable(temp_377), Variable(temp_161))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_161), Variable(_temp_7))), IrStat((Instruction(jmp), Keyword(endif153))), IrStat((Instruction(label), Keyword(else153))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_379))), IrStat((Instruction(label), Keyword(endif153))), IrStat((Instruction(label), Keyword(endif152))), IrStat((Instruction(label), Keyword(endif151))), IrStat((Instruction(jmp), Keyword(endif150))), IrStat((Instruction(label), Keyword(else150))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_4), Variable(temp_181))), IrStat((Instruction(if), Variable(temp_181), Keyword(if154), Keyword(else154))), IrStat((Instruction(label), Keyword(if154))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_5), Variable(temp_170))), IrStat((Instruction(if), Variable(temp_170), Keyword(if155), Keyword(else155))), IrStat((Instruction(label), Keyword(if155))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_382))), IrStat((Instruction(jmp), Keyword(endif155))), IrStat((Instruction(label), Keyword(else155))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_5), Variable(temp_169))), IrStat((Instruction(if), Variable(temp_169), Keyword(if156), Keyword(else156))), IrStat((Instruction(label), Keyword(if156))), IrStat((Instruction(call), Keyword(project_big), Variable(_temp_4), Variable(temp_165))), IrStat((Instruction(call), Keyword(project_big), Variable(_temp_5), Variable(temp_166))), IrStat((Instruction(call), Keyword(add), Variable(temp_165), Variable(temp_166), Variable(temp_167))), IrStat((Instruction(call), Keyword(inject_big), Variable(temp_167), Variable(_temp_7))), IrStat((Instruction(jmp), Keyword(endif156))), IrStat((Instruction(label), Keyword(else156))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_5), Variable(temp_168))), IrStat((Instruction(if), Variable(temp_168), Keyword(if157), Keyword(else157))), IrStat((Instruction(label), Keyword(if157))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_389))), IrStat((Instruction(jmp), Keyword(endif157))), IrStat((Instruction(label), Keyword(else157))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_390))), IrStat((Instruction(label), Keyword(endif157))), IrStat((Instruction(label), Keyword(endif156))), IrStat((Instruction(label), Keyword(endif155))), IrStat((Instruction(jmp), Keyword(endif154))), IrStat((Instruction(label), Keyword(else154))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_4), Variable(temp_180))), IrStat((Instruction(if), Variable(temp_180), Keyword(if158), Keyword(else158))), IrStat((Instruction(label), Keyword(if158))), IrStat((Instruction(call), Keyword(is_int), Variable(_temp_5), Variable(temp_179))), IrStat((Instruction(if), Variable(temp_179), Keyword(if159), Keyword(else159))), IrStat((Instruction(label), Keyword(if159))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_4), Variable(temp_171))), IrStat((Instruction(call), Keyword(project_int), Variable(_temp_5), Variable(temp_172))), IrStat((Instruction(movl), Variable(temp_172), Variable(temp_395))), IrStat((Instruction(addl), Variable(temp_171), Variable(temp_395))), IrStat((Instruction(movl), Variable(temp_395), Variable(temp_173))), IrStat((Instruction(call), Keyword(inject_int), Variable(temp_173), Variable(_temp_7))), IrStat((Instruction(jmp), Keyword(endif159))), IrStat((Instruction(label), Keyword(else159))), IrStat((Instruction(call), Keyword(is_big), Variable(_temp_5), Variable(temp_178))), IrStat((Instruction(if), Variable(temp_178), Keyword(if160), Keyword(else160))), IrStat((Instruction(label), Keyword(if160))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_398))), IrStat((Instruction(jmp), Keyword(endif160))), IrStat((Instruction(label), Keyword(else160))), IrStat((Instruction(call), Keyword(is_bool), Variable(_temp_5), Variable(temp_177))), IrStat((Instruction(if), Variable(temp_177), Keyword(if161), Keyword(else161))), IrStat((Instruction(label), Keyword(if161))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_4), Variable(temp_174))), IrStat((Instruction(call), Keyword(project_bool), Variable(_temp_5), Variable(temp_175))), IrStat((Instruction(movl), Variable(temp_175), Variable(temp_402))), IrStat((Instruction(addl), Variable(temp_174), Variable(temp_402))), IrStat((Instruction(movl), Variable(temp_402), Variable(temp_176))), IrStat((Instruction(call), Keyword(inject_bool), Variable(temp_176), Variable(_temp_7))), IrStat((Instruction(jmp), Keyword(endif161))), IrStat((Instruction(label), Keyword(else161))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_404))), IrStat((Instruction(label), Keyword(endif161))), IrStat((Instruction(label), Keyword(endif160))), IrStat((Instruction(label), Keyword(endif159))), IrStat((Instruction(jmp), Keyword(endif158))), IrStat((Instruction(label), Keyword(else158))), IrStat((Instruction(call), Keyword(error_pyobj), Variable(temp_405))), IrStat((Instruction(label), Keyword(endif158))), IrStat((Instruction(label), Keyword(endif154))), IrStat((Instruction(label), Keyword(endif150))), IrStat((Instruction(movl), Variable(_temp_7), Variable(_temp_7))), IrStat((Instruction(movl), Variable(_temp_7), Variable(_temp_9))), IrStat((Instruction(label), Keyword(endif125))), IrStat((Instruction(movl), Variable(_temp_9), Variable(_temp_10))), IrStat((Instruction(label), Keyword(endif112))), IrStat((Instruction(return), Variable(_temp_10)))]
compression possible BB104 & BB108
compression possible BB112 & BB123
compression possible BB109 & BB113
compression possible BB122 & BB137
compression possible BB107 & BB223
compression possible BB150 & BB165
compression possible BB147 & BB151
compression possible BB164 & BB175
compression possible BB188 & BB197
compression possible BB185 & BB189
compression possible BB196 & BB205
compression possible BB180 & BB184
compression possible BB142 & BB146
compression possible BB237 & BB248
compression possible BB234 & BB238
compression possible BB247 & BB262
compression possible BB232 & BB348
compression possible BB275 & BB290
compression possible BB272 & BB276
compression possible BB289 & BB300
compression possible BB313 & BB322
compression possible BB310 & BB314
compression possible BB321 & BB330
compression possible BB305 & BB309
compression possible BB267 & BB271
compression possible BB227 & BB233
compression possible BB382 & BB386
compression possible BB375 & BB379
compression possible BB361 & BB365
compression possible BB359 & BB485
compression possible BB424 & BB428
compression possible BB410 & BB414
compression possible BB403 & BB407
compression possible BB459 & BB463
compression possible BB452 & BB456
compression possible BB438 & BB442
compression possible BB433 & BB437
compression possible BB398 & BB402
compression possible BB352 & BB360
compression possible BB507 & BB511
compression possible BB500 & BB504
compression possible BB486 & BB490
compression possible BB484 & BB650
compression possible BB549 & BB553
compression possible BB535 & BB539
compression possible BB528 & BB532
compression possible BB584 & BB588
compression possible BB577 & BB581
compression possible BB563 & BB567
compression possible BB558 & BB562
compression possible BB523 & BB527
compression possible BB672 & BB676
compression possible BB665 & BB669
compression possible BB651 & BB655
compression possible BB714 & BB718
compression possible BB700 & BB704
compression possible BB693 & BB697
compression possible BB749 & BB753
compression possible BB742 & BB746
compression possible BB728 & BB732
compression possible BB723 & BB727
compression possible BB688 & BB692
compressing 0
Liveness took 11 loops
total_loop_time=0.03707098960876465
per_basic_block_time=0.03384137153625488
update_parent_time=0.0018558502197265625
Liveness time taken: 0.0475771427154541
unknown instruction->571:return,_temp_10
Int graph time taken: 0.007860183715820312
coloring done
Coloring time taken: 0.03839898109436035
Some variable spilled
can't be converted into x86. Spilling
can't be converted into x86. Spilling
can't be converted into x86. Spilling
can't be converted into x86. Spilling
Liveness took 11 loops
total_loop_time=0.03705763816833496
per_basic_block_time=0.03376364707946777
update_parent_time=0.0018897056579589844
Liveness time taken: 0.045998573303222656
unknown instruction->575:return,_temp_10
Int graph time taken: 0.007959842681884766
coloring done
Coloring time taken: 0.04496955871582031
Some variable spilled
But instructions ok
last_var =Variable(_temp_6)
stack_size=16
return stat
return
%edi %edi
done compiling
liveness_time=0.09357571601867676
interference_time=0.015820026397705078
coloring_time=0.08336853981018066
code = '\n__func1: \npushl %ebp \nmovl %esp, %ebp \nsubl $16, %esp \npushl %ebx \npushl %esi\npushl %edi\n    \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else100 \nif100: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else101 \nif101: \nmovl %esi, %eax \ncmpl 8(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif101 \nelse101: \nendif101: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else102 \nif102: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \nmovl -12(%ebp), %eax \ncmpl %edi, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif102 \nelse102: \nendif102: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else103 \nif103: \npushl $0 \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif103 \nelse103: \nendif103: \njmp endif100 \nelse100: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else104 \nif104: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else105 \nif105: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl -12(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif105 \nelse105: \nendif105: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else106 \nif106: \nmovl %esi, %eax \ncmpl 8(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif106 \nelse106: \nendif106: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else107 \nif107: \npushl $0 \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif107 \nelse107: \nendif107: \njmp endif104 \nelse104: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else108 \nif108: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else109 \nif109: \npushl $0 \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif109 \nelse109: \nendif109: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else110 \nif110: \npushl $0 \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif110 \nelse110: \nendif110: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else111 \nif111: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl %edi \ncall equal\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \njmp endif111 \nelse111: \nendif111: \njmp endif108 \nelse108: \nendif108: \nendif104: \nendif100: \nmovl -12(%ebp), %eax \nmovl %eax, -12(%ebp) \npushl -12(%ebp) \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else112 \nif112: \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \njmp endif112 \nelse112: \npushl $1 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else113 \nif113: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else114 \nif114: \nmovl %esi, %eax \ncmpl 8(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif114 \nelse114: \nendif114: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else115 \nif115: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, -12(%ebp) \naddl $4, %esp \nmovl -12(%ebp), %eax \ncmpl %edi, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif115 \nelse115: \nendif115: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else116 \nif116: \npushl $0 \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif116 \nelse116: \nendif116: \njmp endif113 \nelse113: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else117 \nif117: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else118 \nif118: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, -12(%ebp) \naddl $4, %esp \nmovl -12(%ebp), %eax \ncmpl %edi, %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif118 \nelse118: \nendif118: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else119 \nif119: \nmovl %esi, %eax \ncmpl 8(%ebp), %eax \nsete %al \nmovzbl %al, %eax \nand $3, %eax \nmovl %eax, %ecx \nmovl %ecx, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif119 \nelse119: \nendif119: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else120 \nif120: \npushl $0 \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif120 \nelse120: \nendif120: \njmp endif117 \nelse117: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else121 \nif121: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else122 \nif122: \npushl $0 \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif122 \nelse122: \nendif122: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else123 \nif123: \npushl $0 \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif123 \nelse123: \nendif123: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else124 \nif124: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl %edi \ncall equal\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_bool\nmovl %eax, -16(%ebp) \naddl $4, %esp \njmp endif124 \nelse124: \nendif124: \njmp endif121 \nelse121: \nendif121: \nendif117: \nendif113: \nmovl -16(%ebp), %eax \nmovl %eax, -16(%ebp) \npushl -16(%ebp) \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \npushl %edi \ncall is_true\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else125 \nif125: \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \njmp endif125 \nelse125: \npushl $1 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \nnegl %eax \nmovl %eax, %esi \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else126 \nif126: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else127 \nif127: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -8(%ebp) \naddl $4, %esp \njmp endif127 \nelse127: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else128 \nif128: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif128 \nelse128: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else129 \nif129: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -8(%ebp) \naddl $4, %esp \njmp endif129 \nelse129: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif129: \nendif128: \nendif127: \njmp endif126 \nelse126: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else130 \nif130: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else131 \nif131: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif131 \nelse131: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else132 \nif132: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, -8(%ebp) \naddl $4, %esp \njmp endif132 \nelse132: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else133 \nif133: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif133 \nelse133: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif133: \nendif132: \nendif131: \njmp endif130 \nelse130: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else134 \nif134: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else135 \nif135: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -8(%ebp) \naddl $4, %esp \njmp endif135 \nelse135: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else136 \nif136: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif136 \nelse136: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else137 \nif137: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %esi \naddl $4, %esp \nmovl %esi, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -8(%ebp) \naddl $4, %esp \njmp endif137 \nelse137: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif137: \nendif136: \nendif135: \njmp endif134 \nelse134: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif134: \nendif130: \nendif126: \nmovl -8(%ebp), %eax \nmovl %eax, -8(%ebp) \npushl $2 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \nnegl %eax \nmovl %eax, %esi \npushl 8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else138 \nif138: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else139 \nif139: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif139 \nelse139: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else140 \nif140: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif140 \nelse140: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else141 \nif141: \npushl 8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif141 \nelse141: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif141: \nendif140: \nendif139: \njmp endif138 \nelse138: \npushl 8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else142 \nif142: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else143 \nif143: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif143 \nelse143: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else144 \nif144: \npushl 8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, %ebx \naddl $4, %esp \njmp endif144 \nelse144: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else145 \nif145: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif145 \nelse145: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif145: \nendif144: \nendif143: \njmp endif142 \nelse142: \npushl 8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else146 \nif146: \npushl %esi \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else147 \nif147: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, %ebx \naddl $4, %esp \njmp endif147 \nelse147: \npushl %esi \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else148 \nif148: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif148 \nelse148: \npushl %esi \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else149 \nif149: \npushl 8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, %ebx \naddl $4, %esp \njmp endif149 \nelse149: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif149: \nendif148: \nendif147: \njmp endif146 \nelse146: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif146: \nendif142: \nendif138: \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl %edi \npushl %esi \ncall get_subscript\nmovl %eax, -12(%ebp) \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl %edi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %edi \naddl $8, %esp \npushl %esi \npushl %edi \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl -12(%ebp) \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall get_free_vars\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl -8(%ebp) \ncall *%edi\nmovl %eax, -8(%ebp) \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl %edi \npushl %esi \ncall get_subscript\nmovl %eax, -12(%ebp) \naddl $8, %esp \npushl $0 \ncall inject_int\nmovl %eax, %esi \naddl $4, %esp \npushl $0 \ncall inject_int\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \npushl 12(%ebp) \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl %edi \npushl %esi \ncall get_subscript\nmovl %eax, %esi \naddl $8, %esp \npushl -12(%ebp) \ncall get_fun_ptr\nmovl %eax, %edi \naddl $4, %esp \npushl %esi \ncall get_free_vars\nmovl %eax, %esi \naddl $4, %esp \npushl %esi \npushl %ebx \ncall *%edi\nmovl %eax, %ebx \naddl $8, %esp \npushl -8(%ebp) \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else150 \nif150: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else151 \nif151: \npushl -8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif151 \nelse151: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else152 \nif152: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif152 \nelse152: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else153 \nif153: \npushl -8(%ebp) \ncall project_int\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif153 \nelse153: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif153: \nendif152: \nendif151: \njmp endif150 \nelse150: \npushl -8(%ebp) \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else154 \nif154: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else155 \nif155: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif155 \nelse155: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else156 \nif156: \npushl -8(%ebp) \ncall project_big\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_big\nmovl %eax, %ebx \naddl $4, %esp \npushl %ebx \npushl %edi \ncall add\nmovl %eax, %edi \naddl $8, %esp \npushl %edi \ncall inject_big\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif156 \nelse156: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else157 \nif157: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif157 \nelse157: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif157: \nendif156: \nendif155: \njmp endif154 \nelse154: \npushl -8(%ebp) \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else158 \nif158: \npushl %ebx \ncall is_int\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else159 \nif159: \npushl -8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_int\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_int\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif159 \nelse159: \npushl %ebx \ncall is_big\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else160 \nif160: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \njmp endif160 \nelse160: \npushl %ebx \ncall is_bool\nmovl %eax, %edi \naddl $4, %esp \nmovl %edi, %eax \ncmpl $0, %eax \nje else161 \nif161: \npushl -8(%ebp) \ncall project_bool\nmovl %eax, %edi \naddl $4, %esp \npushl %ebx \ncall project_bool\nmovl %eax, %ebx \naddl $4, %esp \nmovl %ebx, %eax \naddl %edi, %eax \npushl %eax \ncall inject_bool\nmovl %eax, -4(%ebp) \naddl $4, %esp \njmp endif161 \nelse161: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif161: \nendif160: \nendif159: \njmp endif158 \nelse158: \ncall error_pyobj\nmovl %eax, %eax \naddl $0, %esp \nendif158: \nendif154: \nendif150: \nmovl -4(%ebp), %eax \nmovl %eax, -4(%ebp) \nmovl -4(%ebp), %edi \nendif125: \nendif112: \nmovl %edi, %eax\n\npopl %edi \npopl %esi\npopl %ebx\nmovl %ebp, %esp \npopl %ebp \nret\n\n'
