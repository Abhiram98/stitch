def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

callbefore = inject_big(create_closure(def __func1(x,free_vars_1):
	return x
,[]))
x = 12
temp_0 = get_fun_ptr(callbefore)(x,get_free_vars(callbefore))
print(temp_0)
callafter = inject_big(create_closure(def __func2(x,free_vars_2):
	return x
,[]))
temp_1 = get_fun_ptr(callafter)(x,get_free_vars(callafter))
print(temp_1)