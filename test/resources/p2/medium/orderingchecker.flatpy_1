def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func1(_x,free_vars_1):
	return _x

temp_12 = inject_int(0)
temp_13 = create_list(temp_12)
temp_10 = inject_big(temp_13)
temp_2 = temp_10
temp_3 = create_closure(__func1,temp_2)
_callbefore = inject_big(temp_3)
_x = inject_int(12)
temp_4 = get_fun_ptr(_callbefore)
temp_5 = get_free_vars(_callbefore)
_temp_0 = temp_4(_x,temp_5)
print(_temp_0)
def __func2(_x,free_vars_2):
	return _x

temp_14 = inject_int(0)
temp_15 = create_list(temp_14)
temp_11 = inject_big(temp_15)
temp_6 = temp_11
temp_7 = create_closure(__func2,temp_6)
_callafter = inject_big(temp_7)
temp_8 = get_fun_ptr(_callafter)
temp_9 = get_free_vars(_callafter)
_temp_1 = temp_8(_x,temp_9)
print(_temp_1)