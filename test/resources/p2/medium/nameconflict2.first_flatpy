def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

_x1 = inject_int(7)
def __func1(free_vars_1):
	_f1 = inject_int(7)

temp_2 = []
temp_3 = create_closure(__func1,temp_2)
_y1 = inject_big(temp_3)
def __func3(free_vars_3):
	temp_4 = inject_int(0)
	_x2 = [temp_4]
	def __func2(_y2,free_vars_2):
		temp_5 = inject_int(0)
		temp_6 = inject_int(0)
		temp_7 = free_vars_2[temp_5]
		temp_8 = temp_7[temp_6]
		temp_9 = temp_8 + _y2
		return temp_9
	
	temp_10 = [_x2]
	temp_11 = create_closure(__func2,temp_10)
	_lambda_1 = inject_big(temp_11)
	temp_12 = inject_int(0)
	_x2[temp_12] = inject_int(2)
	return _lambda_1

temp_13 = []
temp_14 = create_closure(__func3,temp_13)
_f2 = inject_big(temp_14)
temp_15 = get_fun_ptr(_f2)
temp_16 = get_free_vars(_f2)
_temp_0 = temp_15(temp_16)
temp_17 = get_fun_ptr(_temp_0)
temp_18 = inject_int(3)
temp_19 = get_free_vars(_temp_0)
_temp_1 = temp_17(temp_18,temp_19)
print(_temp_1)