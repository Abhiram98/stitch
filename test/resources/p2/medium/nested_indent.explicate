def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

def __func3(free_vars_3):
	def __func2(free_vars_2):
		def __func1(free_vars_1):
			temp_0 = inject_bool(1)
			return temp_0
		
		temp_7 = inject_big(create_list(inject_int(0)))
		temp_1 = temp_7
		temp_2 = create_closure(__func1,temp_1)
		_lvl3 = inject_big(temp_2)
	
	temp_8 = inject_big(create_list(inject_int(0)))
	temp_3 = temp_8
	temp_4 = create_closure(__func2,temp_3)
	_lvl2 = inject_big(temp_4)

temp_9 = inject_big(create_list(inject_int(0)))
temp_5 = temp_9
temp_6 = create_closure(__func3,temp_5)
_lvl1 = inject_big(temp_6)