def int_comp_eq(a,b):
    return int(a==b)

def int_comp_noteq(a,b):
    return int(a!=b)

inject_int=lambda x: int(x)
inject_big = lambda x: x
inject_bool = lambda x: bool(x)
project_int = lambda x: x
project_big = lambda x: x
project_bool = lambda x: x
is_true = lambda x: x 
is_int = lambda x: type(x) == int
is_bool = lambda x: type(x) == bool
is_big = lambda x: (is_int(x) or is_bool(x)) == False
create_list = lambda x: [1] * x
create_dict = lambda : dict()


def error_pyobj(msg):
    raise Exception("type error")
    

def set_subscript(l, i, v):
    l[i] = v
    return l
    

def get_subscript(l, i):
    return l[i]
    

temp_15 = inject_int(0)
_prod = [temp_15]
def __func1(_a,_b,free_vars_1):
	temp_16 = inject_int(0)
	temp_17 = inject_int(0)
	temp_18 = free_vars_1[temp_16]
	temp_19 = temp_18[temp_17]
	_temp_0 = temp_19 + _b
	return _temp_0

temp_20 = [_a]
temp_21 = create_closure(__func1,temp_20)
_sum = inject_big(temp_21)
temp_22 = inject_int(0)
def __func2(_a,_b,free_vars_2):
	temp_23 = inject_int(0)
	_temp_4 = _b == temp_23
	temp_24 = is_true(_temp_4)
	temp_44 = is_true(temp_24)
	if temp_44:
		_temp_6 = inject_int(0)
	else:
		temp_25 = inject_int(1)
		_temp_1 = - temp_25
		_temp_2 = _b + _temp_1
		temp_26 = inject_int(1)
		temp_27 = inject_int(0)
		temp_28 = free_vars_2[temp_26]
		temp_29 = temp_28[temp_27]
		temp_30 = inject_int(0)
		temp_31 = inject_int(0)
		temp_32 = free_vars_2[temp_30]
		temp_33 = inject_int(1)
		temp_34 = inject_int(0)
		temp_35 = free_vars_2[temp_33]
		temp_36 = temp_35[temp_34]
		temp_37 = get_fun_ptr(temp_29)
		temp_38 = temp_32[temp_31]
		temp_39 = get_free_vars(temp_36)
		_temp_3 = temp_37(temp_38,_temp_2,temp_39)
		temp_40 = inject_int(0)
		temp_41 = inject_int(0)
		temp_42 = free_vars_2[temp_40]
		temp_43 = temp_42[temp_41]
		_temp_5 = temp_43 + _temp_3
		_temp_6 = _temp_5
	
	return _temp_6

temp_45 = [_a, _prod]
temp_46 = create_closure(__func2,temp_45)
_prod[temp_22] = inject_big(temp_46)
def __func3(_a,_b,free_vars_3):
	_temp_7 = - _b
	temp_47 = inject_int(0)
	temp_48 = inject_int(0)
	temp_49 = free_vars_3[temp_47]
	temp_50 = temp_49[temp_48]
	_temp_8 = temp_50 + _temp_7
	return _temp_8

temp_51 = [_a]
temp_52 = create_closure(__func3,temp_51)
_sub = inject_big(temp_52)
temp_53 = inject_int(0)
temp_54 = _prod[temp_53]
_x = [_sum, temp_54, _sub]
temp_55 = inject_int(0)
_temp_9 = _x[temp_55]
temp_56 = get_fun_ptr(_temp_9)
temp_57 = inject_int(1)
temp_58 = inject_int(2)
temp_59 = get_free_vars(_temp_9)
_temp_10 = temp_56(temp_57,temp_58,temp_59)
print(_temp_10)
temp_60 = inject_int(1)
_temp_11 = _x[temp_60]
temp_61 = get_fun_ptr(_temp_11)
temp_62 = inject_int(1)
temp_63 = inject_int(2)
temp_64 = get_free_vars(_temp_11)
_temp_12 = temp_61(temp_62,temp_63,temp_64)
print(_temp_12)
temp_65 = inject_int(2)
_temp_13 = _x[temp_65]
temp_66 = get_fun_ptr(_temp_13)
temp_67 = inject_int(1)
temp_68 = inject_int(2)
temp_69 = get_free_vars(_temp_13)
_temp_14 = temp_66(temp_67,temp_68,temp_69)
print(_temp_14)