[
    "(Module (Expr (Call print (BinOp 1 Add True))))",
    "(Module (Assign x (List 1 2 3)) (Expr (Call print x)))",
    "(Module (Assign x 22) (Assign y 22) (Expr (Call print (Compare x Eq y))))",
    "(Module (Assign x (List 1 (List 2))) (Expr (Call print x)))",
    "(Module (Assign x 1) (Assign y 2) (Assign z (Dict x y)) (Expr (Call print z)))",
    "(Module (Assign x (IfExp (Call eval (Call input)) 42 (List 1 2 3))) (Expr (Call print x)))",
    "(Module (Assign a 1) (Assign b 2) (Assign c 3) (Assign x (List a b c)) (Expr (Call print x)))",
    "(Module (Assign x 1) (Assign y True) (Expr (Call print (Compare x Eq y))))",
    "(Module (Assign x 1) (Assign y True) (Expr (Call print (Compare x Is y))))",
    "(Module (Assign x (List (List 12 13 14) 2 3)) (Expr (Call print (Subscript (Subscript x 0) 1))))",
    "(Module (Assign x (List 1 2)) (Assign y (List 3 4)) (Expr (Call print (BinOp (BinOp (BinOp (Subscript x 0) Add (Subscript y 0)) Add (Subscript x 1)) Add (Subscript y 1)))))",
    "(Module (Assign a True) (Assign b False) (Assign x (BoolOp And (UnaryOp Not (Compare (BoolOp Or a b) Eq (UnaryOp Not a))) (UnaryOp Not b))) (Expr (Call print x)))",
    "(Module (Assign matrix2 (List (List 1 4 7) (List 2 5 8) (List 3 6 9))) (Assign matrix2_t2 (List (List (Subscript (Subscript matrix2 2) 0) (Subscript (Subscript matrix2 1) 0) (Subscript (Subscript matrix2 0) 0)) (List (Subscript (Subscript matrix2 2) 1) (Subscript (Subscript matrix2 1) 1) (Subscript (Subscript matrix2 0) 1)) (List (Subscript (Subscript matrix2 2) 2) (Subscript (Subscript matrix2 1) 2) (Subscript (Subscript matrix2 0) 2)))) (Assign tmp0 (Subscript (Subscript matrix2 0) 0)) (Assign (Subscript (Subscript matrix2 0) 0) (Subscript (Subscript matrix2 2) 0)) (Assign tmp2 (Subscript (Subscript matrix2 0) 1)) (Assign (Subscript (Subscript matrix2 0) 1) (Subscript (Subscript matrix2 1) 0)) (Assign tmp3 (Subscript (Subscript matrix2 0) 2)) (Assign (Subscript (Subscript matrix2 0) 2) tmp0) (Assign tmp4 (Subscript (Subscript matrix2 1) 0)) (Assign (Subscript (Subscript matrix2 1) 0) (Subscript (Subscript matrix2 2) 1)) (Assign tmp5 (Subscript (Subscript matrix2 1) 2)) (Assign (Subscript (Subscript matrix2 1) 2) tmp2) (Assign tmp6 (Subscript (Subscript matrix2 2) 0)) (Assign tmp7 (Subscript (Subscript matrix2 2) 2)) (Assign (Subscript (Subscript matrix2 2) 0) tmp7) (Assign (Subscript (Subscript matrix2 2) 1) tmp5) (Assign (Subscript (Subscript matrix2 2) 2) tmp3) (Expr (Call print (Compare matrix2 Eq matrix2_t2))))",
    "(Module (Assign x (Dict 1 2)) (Assign y (List 1 2 x)) (Assign (Subscript x 1) y) (Expr (Call print x)))",
    "(Module (Assign a False) (Assign b True) (Assign x (BoolOp Or (UnaryOp Not (Compare (BoolOp And a b) Eq (UnaryOp Not a))) (UnaryOp Not b))) (Expr (Call print x)))",
    "(Module (Assign x (List 15 25 35 45)) (Assign len 4) (Assign sum 0) (Assign idx 0) (While (Compare len NotEq 0) (Assign sum (BinOp sum Add (Subscript x idx))) (Assign len (BinOp len Add (UnaryOp USub 1))) (Assign idx (BinOp idx Add 1))) (Expr (Call print sum)))",
    "(Module (Assign matrix1 (List (List 1 2 3) (List 4 5 6) (List 7 8 9))) (Expr (Call print (BinOp (BinOp (Subscript (Subscript matrix1 0) 0) Add (Subscript (Subscript matrix1 1) 1)) Add (Subscript (Subscript matrix1 2) 2)))))",
    "(Module (Expr (Call print (Compare List Is 0))))",
    "(Module (Assign x (Dict 1 2)) (Assign y (Dict 2 x)) (Expr (Call print y)))",
    "(Module (Expr (Call print (Compare List Eq Dict))))",
    "(Module (Expr (Call print (BoolOp And List 1))))",
    "(Module (Assign a (List 1 2 3)) (Assign b (List 4 5 6)) (Expr (Call print a)) (Expr (Call print b)) (Assign tmp a) (Assign a b) (Assign b tmp) (Expr (Call print a)) (Expr (Call print b)))",
    "(Module (Expr (Call print (BoolOp And (List Dict) 2))))",
    "(Module (Assign x (List (BinOp 1 Add 2) (BinOp 3 Add 4))) (Expr (Call print x)))",
    "(Module (Assign x 12) (Assign positivity_counter 0) (While (Compare x NotEq 0) (Assign x (BinOp x Add (UnaryOp USub 1))) (Assign positivity_counter (BinOp positivity_counter Add 1))) (If (Compare positivity_counter NotEq 0) (Expr (Call print 1)) (Expr (Call print 0))))",
    "(Module (Assign x (Dict 1 2)) (Assign y (List 1 2 x)) (Expr (Call print y)))",
    "(Module (Assign x (List 1 2)) (Expr (Call print (BinOp (Subscript x 0) Add 1))) (Expr (Call print (BinOp (Subscript x 1) Add 1))))",
    "(Module (Expr (Call print (Compare List NotEq Dict))))",
    "(Module (Expr (Call print (BoolOp And Dict 1))))",
    "(Module (Assign x (List 1 2)) (Assign y (List 3 4)) (Expr (Call print (BinOp x Add y))))",
    "(Module (Assign x (Dict 1 2)) (Assign y (List 1 2 x)) (Assign (Subscript y 2) (Subscript x 1)) (Expr (Call print y)))",
    "(Module (Assign x 1) (Assign y 2) (Assign z (Dict (BinOp x Add y) (BinOp x Add (UnaryOp USub y)))))",
    "(Module (Assign x (List 1 (List 2))) (Assign y (List 3 (List 4))) (Expr (Call print (BinOp x Add y))))",
    "(Module (Expr (Call print (Compare List Is Dict))))",
    "(Module (Expr (Call print (BinOp (UnaryOp Not (UnaryOp Not List)) Add 1))))",
    "(Module (Assign x (Dict 1 2 3 True False 1 2 False 2 1)) (Assign y x) (Expr (Call print (Compare x Eq y))))",
    "(Module (Expr (Call print (BinOp (UnaryOp Not List) Add 1))))"
]