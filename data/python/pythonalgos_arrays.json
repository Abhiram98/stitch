[
    "(Module (Expr STRING_0) (FunctionDef find_median_sorted_arrays (arguments (arg nums1 (Subscript list int)) (arg nums2 (Subscript list int))) (Expr STRING_1) (If (BoolOp And (UnaryOp Not nums1) (UnaryOp Not nums2)) (Raise (Call ValueError STRING_2))) (Assign merged (Call sorted (BinOp nums1 Add nums2))) (Assign total (Call len merged)) (If (Compare (BinOp total Mod 2) Eq 1) (Return (Call float (Subscript merged (BinOp total FloorDiv 2))))) (Assign middle1 (Subscript merged (BinOp (BinOp total FloorDiv 2) Sub 1))) (Assign middle2 (Subscript merged (BinOp total FloorDiv 2))) (Return (BinOp (BinOp (Call float middle1) Add (Call float middle2)) Div 2.0)) float) (If (Compare __name__ Eq STRING_3) (Import (alias doctest)) (Expr (Call (Attribute doctest testmod)))))",
    "(Module (Expr STRING_0) (FunctionDef partition (arguments (arg arr (Subscript list int)) (arg low int) (arg high int)) (Expr STRING_1) (Assign pivot (Subscript arr high)) (Assign i (BinOp low Sub 1)) (For j (Call range low high) (If (Compare (Subscript arr j) GtE pivot) (AugAssign i Add 1) (Assign (Tuple (Subscript arr i) (Subscript arr j)) (Tuple (Subscript arr j) (Subscript arr i))))) (Assign (Tuple (Subscript arr (BinOp i Add 1)) (Subscript arr high)) (Tuple (Subscript arr high) (Subscript arr (BinOp i Add 1)))) (Return (BinOp i Add 1)) int) (FunctionDef kth_largest_element (arguments (arg arr (Subscript list int)) (arg position int)) (Expr STRING_2) (If (UnaryOp Not arr) (Return (UnaryOp USub 1))) (If (UnaryOp Not (Call isinstance position int)) (Raise (Call ValueError STRING_3))) (If (UnaryOp Not (Compare 1 LtE LtE position (Call len arr))) (Raise (Call ValueError STRING_4))) (Assign (Tuple low high) (Tuple 0 (BinOp (Call len arr) Sub 1))) (While (Compare low LtE high) (If (BoolOp Or (Compare low Gt (BinOp (Call len arr) Sub 1)) (Compare high Lt 0)) (Return (UnaryOp USub 1))) (Assign pivot_index (Call partition arr low high)) (If (Compare pivot_index Eq (BinOp position Sub 1)) (Return (Subscript arr pivot_index)) (If (Compare pivot_index Gt (BinOp position Sub 1)) (Assign high (BinOp pivot_index Sub 1)) (Assign low (BinOp pivot_index Add 1))))) (Return (UnaryOp USub 1)) int) (If (Compare __name__ Eq STRING_5) (Import (alias doctest)) (Expr (Call (Attribute doctest testmod)))))",
    "(Module (Expr STRING_0) (ImportFrom math (alias log2) 0) (FunctionDef build_sparse_table (arguments (arg number_list (Subscript list int))) (Expr STRING_1) (If (UnaryOp Not number_list) (Raise (Call ValueError STRING_2))) (Assign length (Call len number_list)) (Assign row (BinOp (Call int (Call log2 length)) Add 1)) (Assign sparse_table (ListComp (ListComp 0 (comprehension i (Call range length) 0)) (comprehension j (Call range row) 0))) (For (Tuple i value) (Call enumerate number_list) (Assign (Subscript (Subscript sparse_table 0) i) value)) (Assign j 1) (While (Compare (BinOp 1 LShift j) LtE length) (Assign i 0) (While (Compare (BinOp (BinOp i Add (BinOp 1 LShift j)) Sub 1) Lt length) (Assign (Subscript (Subscript sparse_table j) i) (Call min (Subscript (Subscript sparse_table (BinOp j Sub 1)) (BinOp i Add (BinOp 1 LShift (BinOp j Sub 1)))) (Subscript (Subscript sparse_table (BinOp j Sub 1)) i))) (AugAssign i Add 1)) (AugAssign j Add 1)) (Return sparse_table) (Subscript list (Subscript list int))) (FunctionDef query (arguments (arg sparse_table (Subscript list (Subscript list int))) (arg left_bound int) (arg right_bound int)) (Expr STRING_3) (If (BoolOp Or (Compare left_bound Lt 0) (Compare right_bound GtE (Call len (Subscript sparse_table 0)))) (Raise (Call IndexError STRING_4))) (Assign j (Call int (Call log2 (BinOp (BinOp right_bound Sub left_bound) Add 1)))) (Return (Call min (Subscript (Subscript sparse_table j) (BinOp (BinOp right_bound Sub (BinOp 1 LShift j)) Add 1)) (Subscript (Subscript sparse_table j) left_bound))) int) (If (Compare __name__ Eq STRING_5) (ImportFrom doctest (alias testmod) 0) (Expr (Call testmod)) (Expr (Call print (JoinedStr STRING_6 (FormattedValue (Call query (Call build_sparse_table (List 3 1 9)) 2 2) 114))))))",
    "(Module (ImportFrom itertools (alias combinations) 0) (FunctionDef find_triplets_with_0_sum (arguments (arg nums (Subscript list int))) (Expr STRING_0) (Return (ListComp (Call list x) (comprehension x (Call sorted (SetComp abc (comprehension abc (Call combinations (Call sorted nums) 3) (UnaryOp Not (Call sum abc)) 0))) 0))) (Subscript list (Subscript list int))) (FunctionDef find_triplets_with_0_sum_hashing (arguments (arg arr (Subscript list int))) (Expr STRING_1) (Assign target_sum 0) (Assign output_arr List) (For (Tuple index item) (Call enumerate (Subscript arr (Slice (UnaryOp USub 2)))) (Assign set_initialize (Call set)) (Assign current_sum (BinOp target_sum Sub item)) (For other_item (Subscript arr (Slice (BinOp index Add 1))) (Assign required_value (BinOp current_sum Sub other_item)) (If (Compare required_value In set_initialize) (Assign combination_array (Call sorted (List item other_item required_value))) (If (Compare combination_array NotIn output_arr) (Expr (Call (Attribute output_arr append) combination_array)))) (Expr (Call (Attribute set_initialize add) other_item)))) (Return output_arr) (Subscript list (Subscript list int))) (If (Compare __name__ Eq STRING_2) (ImportFrom doctest (alias testmod) 0) (Expr (Call testmod))))",
    "(Module (FunctionDef permute_recursive (arguments (arg nums (Subscript list int))) (Expr STRING_0) (AnnAssign result (Subscript list (Subscript list int)) List 1) (If (Compare (Call len nums) Eq 0) (Return (List List))) (For _ (Call range (Call len nums)) (Assign n (Call (Attribute nums pop) 0)) (Assign permutations (Call permute_recursive (Call (Attribute nums copy)))) (For perm permutations (Expr (Call (Attribute perm append) n))) (Expr (Call (Attribute result extend) permutations)) (Expr (Call (Attribute nums append) n))) (Return result) (Subscript list (Subscript list int))) (FunctionDef permute_backtrack (arguments (arg nums (Subscript list int))) (Expr STRING_1) (FunctionDef backtrack (arguments (arg start int)) (If (Compare start Eq (BinOp (Call len nums) Sub 1)) (Expr (Call (Attribute output append) (Subscript nums Slice))) (For i (Call range start (Call len nums)) (Assign (Tuple (Subscript nums start) (Subscript nums i)) (Tuple (Subscript nums i) (Subscript nums start))) (Expr (Call backtrack (BinOp start Add 1))) (Assign (Tuple (Subscript nums start) (Subscript nums i)) (Tuple (Subscript nums i) (Subscript nums start))))) None) (AnnAssign output (Subscript list (Subscript list int)) List 1) (Expr (Call backtrack 0)) (Return output) (Subscript list (Subscript list int))) (If (Compare __name__ Eq STRING_2) (Import (alias doctest)) (Assign result (Call permute_backtrack (List 1 2 3))) (Expr (Call print result)) (Expr (Call (Attribute doctest testmod)))))",
    "(Module (Expr STRING_0) (FunctionDef equilibrium_index (arguments (arg arr (Subscript list int))) (Expr STRING_1) (Assign total_sum (Call sum arr)) (Assign left_sum 0) (For (Tuple i value) (Call enumerate arr) (AugAssign total_sum Sub value) (If (Compare left_sum Eq total_sum) (Return i)) (AugAssign left_sum Add value)) (Return (UnaryOp USub 1)) int) (If (Compare __name__ Eq STRING_2) (Import (alias doctest)) (Expr (Call (Attribute doctest testmod)))))",
    "(Module (Expr STRING_0) (ImportFrom collections.abc (alias Iterator) 0) (ImportFrom dataclasses (alias dataclass) 0) (ClassDef Index2DArrayIterator (AnnAssign matrix (Subscript list (Subscript list int)) 1) (FunctionDef __iter__ (arguments (arg self)) (Expr STRING_1) (For row (Attribute self matrix) (Expr (YieldFrom row))) (Subscript Iterator int)) dataclass) (FunctionDef index_2d_array_in_1d (arguments (arg array (Subscript list (Subscript list int))) (arg index int)) (Expr STRING_2) (Assign rows (Call len array)) (Assign cols (Call len (Subscript array 0))) (If (BoolOp Or (Compare rows Eq 0) (Compare cols Eq 0)) (Raise (Call ValueError STRING_3))) (If (BoolOp Or (Compare index Lt 0) (Compare index GtE (BinOp rows Mult cols))) (Raise (Call ValueError STRING_4))) (Return (Subscript (Subscript array (BinOp index FloorDiv cols)) (BinOp index Mod cols))) int) (If (Compare __name__ Eq STRING_5) (Import (alias doctest)) (Expr (Call (Attribute doctest testmod)))))",
    "(Module (Expr STRING_0) (FunctionDef product_sum (arguments (arg arr (Subscript list (BinOp int BitOr list))) (arg depth int)) (Expr STRING_1) (Assign total_sum 0) (For ele arr (AugAssign total_sum Add (IfExp (Call isinstance ele list) (Call product_sum ele (BinOp depth Add 1)) ele))) (Return (BinOp total_sum Mult depth)) int) (FunctionDef product_sum_array (arguments (arg array (Subscript list (BinOp int BitOr list)))) (Expr STRING_2) (Return (Call product_sum array 1)) int) (If (Compare __name__ Eq STRING_3) (Import (alias doctest)) (Expr (Call (Attribute doctest testmod)))))",
    "(Module (FunctionDef is_monotonic (arguments (arg nums (Subscript list int))) (Expr STRING_0) (Return (BoolOp Or (Call all (GeneratorExp (Compare (Subscript nums i) LtE (Subscript nums (BinOp i Add 1))) (comprehension i (Call range (BinOp (Call len nums) Sub 1)) 0))) (Call all (GeneratorExp (Compare (Subscript nums i) GtE (Subscript nums (BinOp i Add 1))) (comprehension i (Call range (BinOp (Call len nums) Sub 1)) 0))))) bool) (If (Compare __name__ Eq STRING_1) (Expr (Call print (Call is_monotonic (List 1 2 2 3)))) (Expr (Call print (Call is_monotonic (List 6 5 4 4)))) (Expr (Call print (Call is_monotonic (List 1 3 2))))))",
    "(Module (Expr STRING_0) (ImportFrom itertools (alias combinations) 0) (FunctionDef pairs_with_sum (arguments (arg arr list) (arg req_sum int)) (Expr STRING_1) (Return (Call len (ListComp 1 (comprehension (Tuple a b) (Call combinations arr 2) (Compare (BinOp a Add b) Eq req_sum) 0)))) int) (If (Compare __name__ Eq STRING_2) (ImportFrom doctest (alias testmod) 0) (Expr (Call testmod))))",
    "(Module (Expr STRING_0) (ClassDef PrefixSum (FunctionDef __init__ (arguments (arg self) (arg array (Subscript list int))) (Assign len_array (Call len array)) (Assign (Attribute self prefix_sum) (BinOp (List 0) Mult len_array)) (If (Compare len_array Gt 0) (Assign (Subscript (Attribute self prefix_sum) 0) (Subscript array 0))) (For i (Call range 1 len_array) (Assign (Subscript (Attribute self prefix_sum) i) (BinOp (Subscript (Attribute self prefix_sum) (BinOp i Sub 1)) Add (Subscript array i)))) None) (FunctionDef get_sum (arguments (arg self) (arg start int) (arg end int)) (Expr STRING_1) (If (Compare start Eq 0) (Return (Subscript (Attribute self prefix_sum) end))) (Return (BinOp (Subscript (Attribute self prefix_sum) end) Sub (Subscript (Attribute self prefix_sum) (BinOp start Sub 1)))) int) (FunctionDef contains_sum (arguments (arg self) (arg target_sum int)) (Expr STRING_2) (Assign sums (Set 0)) (For sum_item (Attribute self prefix_sum) (If (Compare (BinOp sum_item Sub target_sum) In sums) (Return True)) (Expr (Call (Attribute sums add) sum_item))) (Return False) bool)) (If (Compare __name__ Eq STRING_3) (Import (alias doctest)) (Expr (Call (Attribute doctest testmod)))))",
    "(Module (Expr STRING_0) (Import (alias random)) (Import (alias time)) (FunctionDef cross (arguments (arg items_a) (arg items_b)) (Expr STRING_1) (Return (ListComp (BinOp a Add b) (comprehension a items_a 0) (comprehension b items_b 0)))) (Assign digits STRING_2) (Assign rows STRING_3) (Assign cols digits) (Assign squares (Call cross rows cols)) (Assign unitlist (BinOp (BinOp (ListComp (Call cross rows c) (comprehension c cols 0)) Add (ListComp (Call cross r cols) (comprehension r rows 0))) Add (ListComp (Call cross rs cs) (comprehension rs (Tuple STRING_4 STRING_5 STRING_6) 0) (comprehension cs (Tuple STRING_7 STRING_8 STRING_9) 0)))) (Assign units (DictComp s (ListComp u (comprehension u unitlist (Compare s In u) 0)) (comprehension s squares 0))) (Assign peers (DictComp s (BinOp (Call set (Call sum (Subscript units s) List)) Sub (Set s)) (comprehension s squares 0))) (FunctionDef test arguments (Expr STRING_10) (Assert (Compare (Call len squares) Eq 81)) (Assert (Compare (Call len unitlist) Eq 27)) (Assert (Call all (GeneratorExp (Compare (Call len (Subscript units s)) Eq 3) (comprehension s squares 0)))) (Assert (Call all (GeneratorExp (Compare (Call len (Subscript peers s)) Eq 20) (comprehension s squares 0)))) (Assert (Compare (Subscript units STRING_11) Eq (List (List STRING_12 STRING_13 STRING_11 STRING_14 STRING_15 STRING_16 STRING_17 STRING_18 STRING_19) (List STRING_20 STRING_11 STRING_21 STRING_22 STRING_23 STRING_24 STRING_25 STRING_26 STRING_27) (List STRING_28 STRING_12 STRING_29 STRING_30 STRING_13 STRING_31 STRING_20 STRING_11 STRING_21)))) (Assert (Compare (Subscript peers STRING_11) Eq (Set STRING_12 STRING_13 STRING_14 STRING_15 STRING_16 STRING_17 STRING_18 STRING_19 STRING_20 STRING_21 STRING_22 STRING_23 STRING_24 STRING_25 STRING_26 STRING_27 STRING_28 STRING_29 STRING_30 STRING_31))) (Expr (Call print STRING_32))) (FunctionDef parse_grid (arguments (arg grid)) (Expr STRING_33) (Assign values (DictComp s digits (comprehension s squares 0))) (For (Tuple s d) (Call (Attribute (Call grid_values grid) items)) (If (BoolOp And (Compare d In digits) (UnaryOp Not (Call assign values s d))) (Return False))) (Return values)) (FunctionDef grid_values (arguments (arg grid)) (Expr STRING_34) (Assign chars (ListComp c (comprehension c grid (BoolOp Or (Compare c In digits) (Compare c In STRING_35)) 0))) (Assert (Compare (Call len chars) Eq 81)) (Return (Call dict (Call zip squares chars)))) (FunctionDef assign (arguments (arg values) (arg s) (arg d)) (Expr STRING_36) (Assign other_values (Call (Attribute (Subscript values s) replace) d STRING_37)) (If (Call all (GeneratorExp (Call eliminate values s d2) (comprehension d2 other_values 0))) (Return values) (Return False))) (FunctionDef eliminate (arguments (arg values) (arg s) (arg d)) (Expr STRING_38) (If (Compare d NotIn (Subscript values s)) (Return values)) (Assign (Subscript values s) (Call (Attribute (Subscript values s) replace) d STRING_37)) (If (Compare (Call len (Subscript values s)) Eq 0) (Return False) (If (Compare (Call len (Subscript values s)) Eq 1) (Assign d2 (Subscript values s)) (If (UnaryOp Not (Call all (GeneratorExp (Call eliminate values s2 d2) (comprehension s2 (Subscript peers s) 0)))) (Return False)))) (For u (Subscript units s) (Assign dplaces (ListComp s (comprehension s u (Compare d In (Subscript values s)) 0))) (If (Compare (Call len dplaces) Eq 0) (Return False) (If (BoolOp And (Compare (Call len dplaces) Eq 1) (UnaryOp Not (Call assign values (Subscript dplaces 0) d))) (Return False)))) (Return values)) (FunctionDef display (arguments (arg values)) (Expr STRING_39) (Assign width (BinOp 1 Add (Call max (GeneratorExp (Call len (Subscript values s)) (comprehension s squares 0))))) (Assign line (Call (Attribute STRING_40 join) (BinOp (List (BinOp STRING_41 Mult (BinOp width Mult 3))) Mult 3))) (For r rows (Expr (Call print (Call (Attribute STRING_37 join) (GeneratorExp (BinOp (Call (Attribute (Subscript values (BinOp r Add c)) center) width) Add (IfExp (Compare c In STRING_42) STRING_43 STRING_37)) (comprehension c cols 0))))) (If (Compare r In STRING_44) (Expr (Call print line)))) (Expr (Call print))) (FunctionDef solve (arguments (arg grid)) (Return (Call search (Call parse_grid grid)))) (FunctionDef some (arguments (arg seq)) (Expr STRING_45) (For e seq (If e (Return e))) (Return False)) (FunctionDef search (arguments (arg values)) (Expr STRING_46) (If (Compare values Is False) (Return False)) (If (Call all (GeneratorExp (Compare (Call len (Subscript values s)) Eq 1) (comprehension s squares 0))) (Return values)) (Assign (Tuple n s) (Call min (GeneratorExp (Tuple (Call len (Subscript values s)) s) (comprehension s squares (Compare (Call len (Subscript values s)) Gt 1) 0)))) (Return (Call some (GeneratorExp (Call search (Call assign (Call (Attribute values copy)) s d)) (comprehension d (Subscript values s) 0))))) (FunctionDef solve_all (arguments (arg grids) (arg name) (arg showif) STRING_37 0.0) (Expr STRING_47) (FunctionDef time_solve (arguments (arg grid)) (Assign start (Call (Attribute time monotonic))) (Assign values (Call solve grid)) (Assign t (BinOp (Call (Attribute time monotonic)) Sub start)) (If (BoolOp And (Compare showif IsNot None) (Compare t Gt showif)) (Expr (Call display (Call grid_values grid))) (If values (Expr (Call display values))) (Expr (Call print (BinOp STRING_48 Mod t)))) (Return (Tuple t (Call solved values)))) (Assign (Tuple times results) (Call zip (Starred (ListComp (Call time_solve grid) (comprehension grid grids 0))))) (If (Compare (NamedExpr n (Call len grids)) Gt 1) (Expr (Call print (BinOp STRING_49 Mod (Tuple (Call sum results) n name (BinOp (Call sum times) Div n) (BinOp n Div (Call sum times)) (Call max times))))))) (FunctionDef solved (arguments (arg values)) (Expr STRING_50) (FunctionDef unitsolved (arguments (arg unit)) (Return (Compare (SetComp (Subscript values s) (comprehension s unit 0)) Eq (Call set digits)))) (Return (BoolOp And (Compare values IsNot False) (Call all (GeneratorExp (Call unitsolved unit) (comprehension unit unitlist 0)))))) (FunctionDef from_file (arguments (arg filename) (arg sep) STRING_51) (Expr STRING_52) (Return (Call (Attribute (Call (Attribute (Call (Attribute (Call open filename) read)) strip)) split) sep))) (FunctionDef random_puzzle (arguments (arg assignments) 17) (Expr STRING_53) (Assign values (DictComp s digits (comprehension s squares 0))) (For s (Call shuffled squares) (If (UnaryOp Not (Call assign values s (Call (Attribute random choice) (Subscript values s)))) Break) (Assign ds (ListComp (Subscript values s) (comprehension s squares (Compare (Call len (Subscript values s)) Eq 1) 0))) (If (BoolOp And (Compare (Call len ds) GtE assignments) (Compare (Call len (Call set ds)) GtE 8)) (Return (Call (Attribute STRING_37 join) (GeneratorExp (IfExp (Compare (Call len (Subscript values s)) Eq 1) (Subscript values s) STRING_54) (comprehension s squares 0)))))) (Return (Call random_puzzle assignments))) (FunctionDef shuffled (arguments (arg seq)) (Expr STRING_55) (Assign seq (Call list seq)) (Expr (Call (Attribute random shuffle) seq)) (Return seq)) (Assign grid1 STRING_56) (Assign grid2 STRING_57) (Assign hard1 STRING_58) (If (Compare __name__ Eq STRING_59) (Expr (Call test)) (Expr (Call solve_all (ListComp (Call random_puzzle) (comprehension _ (Call range 99) 0)) STRING_60 100.0)) (For puzzle (Tuple grid1 grid2) (Expr (Call display (Call parse_grid puzzle))) (Assign start (Call (Attribute time monotonic))) (Expr (Call solve puzzle)) (Assign t (BinOp (Call (Attribute time monotonic)) Sub start)) (Expr (Call print (BinOp STRING_61 Mod t))))))"
]