[
    "(Module (Assign climb 2) (Assign fall 1) (Assign peak 40) (While (Call int (Compare fall NotEq peak)) (Assign climb (BinOp fall Add 2)) (Assign fall (BinOp climb Add (UnaryOp USub 1)))))",
    "(Module (Assign x 0) (While (Call int (UnaryOp Not x)) (Assign x (Call eval (Call input)))))",
    "(Module (Assign x 1) (Assign y 2) (Assign z 0) (Assign loop_condition 1) (While (Call int (Compare x NotEq 5)) (If (BoolOp Or (Call int (Compare x Eq 1)) (Call int (Compare x Eq 4))) (If (Call int (Compare y Eq 2)) (Assign z (BinOp z Add 1)) (If (Call int (Compare y Eq 1)) (Assign z (BinOp z Add 2)) (Assign z (BinOp z Add 3)))) (If (BoolOp Or (Call int (Compare x Eq 2)) (Call int (Compare x Eq 5))) (If (Call int (Compare y Eq 2)) (Assign z (BinOp z Add 2)) (If (Call int (Compare y Eq 1)) (Assign z (BinOp z Add 3)) (Assign z (BinOp z Add 1)))) (If (Call int (Compare y Eq 2)) (Assign z (BinOp z Add 3)) (If (Call int (Compare y Eq 1)) (Assign z (BinOp z Add 1)) (Assign z (BinOp z Add 2)))))) (Assign x (BinOp x Add 1)) (Assign y (BinOp y Add (UnaryOp USub 1)))) (Expr (Call print z)))",
    "(Module (Assign x 2) (Assign y 10) (While (Call int (Compare x NotEq 23)) (If (Call int (Compare (BinOp x Add (UnaryOp USub y)) NotEq 12)) (Assign x (BinOp x Add y)) (Assign x (BinOp x Add 1)))))",
    "(Module (Assign is_odd 1) (Assign x (Call eval (Call input))) (Assign idx 1) (While (Call int (Compare idx NotEq x)) (Assign is_odd (Call int (UnaryOp Not is_odd))) (Assign idx (BinOp idx Add 1))) (Expr (Call print is_odd)))",
    "(Module (Assign n1 0) (Assign n2 1) (Assign count 0) (While (Call int (Compare count NotEq 10)) (Expr (Call print n1)) (Assign nth (BinOp n1 Add n2)) (Assign n1 n2) (Assign n2 nth) (Assign count (BinOp count Add 1))))",
    "(Module (Assign x (Call eval (Call input))) (If (Call int (Compare x NotEq 23)) (Assign y (Call eval (Call input))) (If (Call int (Compare y NotEq 42)) (Assign x (BinOp x Add 1)) (Assign x (BinOp x Add 2))) (Assign x (BinOp x Add 3))))",
    "(Module (Assign x 1) (Assign y 2) (Assign z 0) (While (Call int (Compare x NotEq 10)) (While (Call int (Compare y NotEq 0)) (Assign temp x) (Assign temp2 y) (Assign product 0) (While (Call int (Compare temp NotEq 0)) (Assign product (BinOp product Add temp2)) (Assign temp (BinOp temp Add (UnaryOp USub 1)))) (Assign z (BinOp z Add product)) (Assign y (BinOp y Add (UnaryOp USub 1)))) (Assign x (BinOp x Add 1)) (Assign y 2)) (Assign z (BinOp z Add z)) (Expr (Call print z)))",
    "(Module (Assign x 5) (Assign y 10) (Assign z 0) (While (Call int (Compare x NotEq 0)) (Assign x (BinOp x Add (UnaryOp USub 1))) (Assign y_copy y) (Assign inner_loop_done 0) (While (BoolOp And (Call int (Compare y_copy NotEq 0)) (Call int (UnaryOp Not inner_loop_done))) (Assign y_copy (BinOp y_copy Add (UnaryOp USub 1))) (If (Call int (Compare y_copy Eq 4)) (Assign z (BinOp z Add 1)) (If (Call int (Compare x Eq 3)) (Assign z (BinOp z Add 1)) (Assign y (BinOp y Add (UnaryOp USub 1))) (Assign x (BinOp x Add 1)) (Assign inner_loop_done 1) (If (Call int (Compare x Eq 2)) (Assign z (BinOp z Add 2)) (Assign z (BinOp z Add 3))) (Assign y (BinOp y Add (UnaryOp USub 1))) (Assign x (BinOp x Add 1)) (Assign inner_loop_done 1)))) (If (Call int (UnaryOp Not inner_loop_done)) (Assign y y_copy))) (Expr (Call print z)))"
]