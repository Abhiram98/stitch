[
    "(ProgramStatements (Expr STRING_0) (ImportFrom PIL (__list__ (alias Image)) 0) (FunctionDef change_contrast (arguments (__list__ (arg img Image) (arg level int))) (__list__ (Expr STRING_1) (Assign (__list__ factor) (BinOp (BinOp 259 Mult (BinOp level Add 255)) Div (BinOp 255 Mult (BinOp 259 Sub level)))) (FunctionDef contrast (arguments (__list__ (arg c int))) (__list__ (Expr STRING_2) (Return (Call int (__list__ (BinOp 128 Add (BinOp factor Mult (BinOp c Sub 128))))))) (__list__ ) int) (Return (Call (Attribute img point) (__list__ contrast)))) (__list__ ) Image) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (With (__list__ (withitem (Call (Attribute Image open) (__list__ STRING_4)) img)) (__list__ (Assign (__list__ cont_img) (Call change_contrast (__list__ img 170))) (Expr (Call (Attribute cont_img save) (__list__ STRING_5) (__list__ (keyword format STRING_6)))))))))",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (ImportFrom cv2 (__list__ (alias destroyAllWindows) (alias imread) (alias imshow) (alias waitKey)) 0) (FunctionDef make_sepia (arguments (__list__ (arg img) (arg factor int))) (__list__ (Expr STRING_1) (Assign (__list__ (Tuple (__list__ pixel_h pixel_v))) (Tuple (__list__ (Subscript (Attribute img shape) 0) (Subscript (Attribute img shape) 1)))) (FunctionDef to_grayscale (arguments (__list__ (arg blue) (arg green) (arg red))) (__list__ (Expr STRING_2) (Return (BinOp (BinOp (BinOp 0.2126 Mult red) Add (BinOp 0.587 Mult green)) Add (BinOp 0.114 Mult blue)))) (__list__ )) (FunctionDef normalize (arguments (__list__ (arg value))) (__list__ (Expr STRING_3) (Return (Call min (__list__ value 255)))) (__list__ )) (For i (Call range (__list__ pixel_h)) (__list__ (For j (Call range (__list__ pixel_v)) (__list__ (Assign (__list__ greyscale) (Call int (__list__ (Call to_grayscale (__list__ (Starred (Subscript (Subscript img i) j))))))) (Assign (__list__ (Subscript (Subscript img i) j)) (List (__list__ (Call normalize (__list__ greyscale)) (Call normalize (__list__ (BinOp greyscale Add factor))) (Call normalize (__list__ (BinOp greyscale Add (BinOp 2 Mult factor))))))))))) (Return img)) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ images) (DictComp percentage (Call imread (__list__ STRING_4 1)) (__list__ (comprehension percentage (Tuple (__list__ 10 20 30 40)) 0)))) (For (Tuple (__list__ percentage img)) (Call (Attribute images items)) (__list__ (Expr (Call make_sepia (__list__ img percentage))))) (For (Tuple (__list__ percentage img)) (Call (Attribute images items)) (__list__ (Expr (Call imshow (__list__ (JoinedStr (__list__ STRING_4 (FormattedValue percentage -1) STRING_5)) img))))) (Expr (Call waitKey (__list__ 0))) (Expr (Call destroyAllWindows)))))",
    "(ProgramStatements (Import (__list__ (alias numpy np))) (ClassDef IndexCalculation (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg red) (arg green) (arg blue) (arg red_edge) (arg nir)) (__list__ None None None None None)) (__list__ (Expr (Call (Attribute self set_matricies) (__list__ (keyword red red) (keyword green green) (keyword blue blue) (keyword red_edge red_edge) (keyword nir nir))))) (__list__ )) (FunctionDef set_matricies (arguments (__list__ (arg self) (arg red) (arg green) (arg blue) (arg red_edge) (arg nir)) (__list__ None None None None None)) (__list__ (If (Compare red (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute self red)) red))) (If (Compare green (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute self green)) green))) (If (Compare blue (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute self blue)) blue))) (If (Compare red_edge (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute self redEdge)) red_edge))) (If (Compare nir (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute self nir)) nir))) (Return True)) (__list__ )) (FunctionDef calculation (arguments (__list__ (arg self) (arg index) (arg red) (arg green) (arg blue) (arg red_edge) (arg nir)) (__list__ STRING_1 None None None None None)) (__list__ (Expr STRING_2) (Expr (Call (Attribute self set_matricies) (__list__ (keyword red red) (keyword green green) (keyword blue blue) (keyword red_edge red_edge) (keyword nir nir)))) (Assign (__list__ funcs) (Dict (__list__ STRING_3 STRING_4 STRING_5 STRING_6 STRING_7 STRING_8 STRING_9 STRING_10 STRING_11 STRING_12 STRING_13 STRING_14 STRING_15 STRING_16 STRING_17 STRING_18 STRING_19 STRING_20 STRING_21 STRING_22 STRING_23 STRING_24 STRING_25 STRING_26 STRING_27 STRING_28 STRING_29 STRING_30 STRING_31 STRING_32 STRING_33 STRING_34 STRING_35 STRING_36 STRING_37 STRING_38 STRING_39 STRING_40 STRING_41 STRING_42) (__list__ (Attribute self arv12) (Attribute self ccci) (Attribute self cvi) (Attribute self gli) (Attribute self ndvi) (Attribute self bndvi) (Attribute self red_edge_ndvi) (Attribute self gndvi) (Attribute self gbndvi) (Attribute self grndvi) (Attribute self rbndvi) (Attribute self pndvi) (Attribute self atsavi) (Attribute self bwdrvi) (Attribute self ci_green) (Attribute self ci_rededge) (Attribute self ci) (Attribute self ctvi) (Attribute self gdvi) (Attribute self evi) (Attribute self gemi) (Attribute self gosavi) (Attribute self gsavi) (Attribute self hue) (Attribute self ivi) (Attribute self ipvi) (Attribute self i) (Attribute self rvi) (Attribute self mrvi) (Attribute self m_savi) (Attribute self norm_g) (Attribute self norm_nir) (Attribute self norm_r) (Attribute self ngrdi) (Attribute self ri) (Attribute self s) (Attribute self _if) (Attribute self dvi) (Attribute self tvi) (Attribute self ndre)))) (Try (__list__ (Return (Call (Subscript funcs index)))) (__list__ (ExceptHandler KeyError (__list__ (Expr (Call print (__list__ STRING_43))) (Return False)))))) (__list__ )) (FunctionDef arv12 (arguments (__list__ (arg self))) (__list__ (Expr STRING_44) (Return (BinOp (UnaryOp USub 0.18) Add (BinOp 1.17 Mult (BinOp (BinOp (Attribute self nir) Sub (Attribute self red)) Div (BinOp (Attribute self nir) Add (Attribute self red))))))) (__list__ )) (FunctionDef ccci (arguments (__list__ (arg self))) (__list__ (Expr STRING_45) (Return (BinOp (BinOp (BinOp (Attribute self nir) Sub (Attribute self redEdge)) Div (BinOp (Attribute self nir) Add (Attribute self redEdge))) Div (BinOp (BinOp (Attribute self nir) Sub (Attribute self red)) Div (BinOp (Attribute self nir) Add (Attribute self red)))))) (__list__ )) (FunctionDef cvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_46) (Return (BinOp (Attribute self nir) Mult (BinOp (Attribute self red) Div (BinOp (Attribute self green) Pow 2))))) (__list__ )) (FunctionDef gli (arguments (__list__ (arg self))) (__list__ (Expr STRING_47) (Return (BinOp (BinOp (BinOp (BinOp 2 Mult (Attribute self green)) Sub (Attribute self red)) Sub (Attribute self blue)) Div (BinOp (BinOp (BinOp 2 Mult (Attribute self green)) Add (Attribute self red)) Add (Attribute self blue))))) (__list__ )) (FunctionDef ndvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_48) (Return (BinOp (BinOp (Attribute self nir) Sub (Attribute self red)) Div (BinOp (Attribute self nir) Add (Attribute self red))))) (__list__ )) (FunctionDef bndvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_49) (Return (BinOp (BinOp (Attribute self nir) Sub (Attribute self blue)) Div (BinOp (Attribute self nir) Add (Attribute self blue))))) (__list__ )) (FunctionDef red_edge_ndvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_50) (Return (BinOp (BinOp (Attribute self redEdge) Sub (Attribute self red)) Div (BinOp (Attribute self redEdge) Add (Attribute self red))))) (__list__ )) (FunctionDef gndvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_51) (Return (BinOp (BinOp (Attribute self nir) Sub (Attribute self green)) Div (BinOp (Attribute self nir) Add (Attribute self green))))) (__list__ )) (FunctionDef gbndvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_52) (Return (BinOp (BinOp (Attribute self nir) Sub (BinOp (Attribute self green) Add (Attribute self blue))) Div (BinOp (Attribute self nir) Add (BinOp (Attribute self green) Add (Attribute self blue)))))) (__list__ )) (FunctionDef grndvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_53) (Return (BinOp (BinOp (Attribute self nir) Sub (BinOp (Attribute self green) Add (Attribute self red))) Div (BinOp (Attribute self nir) Add (BinOp (Attribute self green) Add (Attribute self red)))))) (__list__ )) (FunctionDef rbndvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_54) (Return (BinOp (BinOp (Attribute self nir) Sub (BinOp (Attribute self blue) Add (Attribute self red))) Div (BinOp (Attribute self nir) Add (BinOp (Attribute self blue) Add (Attribute self red)))))) (__list__ )) (FunctionDef pndvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_55) (Return (BinOp (BinOp (Attribute self nir) Sub (BinOp (BinOp (Attribute self green) Add (Attribute self red)) Add (Attribute self blue))) Div (BinOp (Attribute self nir) Add (BinOp (BinOp (Attribute self green) Add (Attribute self red)) Add (Attribute self blue)))))) (__list__ )) (FunctionDef atsavi (arguments (__list__ (arg self) (arg x) (arg a) (arg b)) (__list__ 0.08 1.22 0.03)) (__list__ (Expr STRING_56) (Return (BinOp a Mult (BinOp (BinOp (BinOp (Attribute self nir) Sub (BinOp a Mult (Attribute self red))) Sub b) Div (BinOp (BinOp (BinOp (BinOp a Mult (Attribute self nir)) Add (Attribute self red)) Sub (BinOp a Mult b)) Add (BinOp x Mult (BinOp 1 Add (BinOp a Pow 2)))))))) (__list__ )) (FunctionDef bwdrvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_57) (Return (BinOp (BinOp (BinOp 0.1 Mult (Attribute self nir)) Sub (Attribute self blue)) Div (BinOp (BinOp 0.1 Mult (Attribute self nir)) Add (Attribute self blue))))) (__list__ )) (FunctionDef ci_green (arguments (__list__ (arg self))) (__list__ (Expr STRING_58) (Return (BinOp (BinOp (Attribute self nir) Div (Attribute self green)) Sub 1))) (__list__ )) (FunctionDef ci_rededge (arguments (__list__ (arg self))) (__list__ (Expr STRING_59) (Return (BinOp (BinOp (Attribute self nir) Div (Attribute self redEdge)) Sub 1))) (__list__ )) (FunctionDef ci (arguments (__list__ (arg self))) (__list__ (Expr STRING_60) (Return (BinOp (BinOp (Attribute self red) Sub (Attribute self blue)) Div (Attribute self red)))) (__list__ )) (FunctionDef ctvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_61) (Assign (__list__ ndvi) (Call (Attribute self ndvi))) (Return (BinOp (BinOp (BinOp ndvi Add 0.5) Div (Call abs (__list__ (BinOp ndvi Add 0.5)))) Mult (BinOp (Call abs (__list__ (BinOp ndvi Add 0.5))) Pow (BinOp 1 Div 2))))) (__list__ )) (FunctionDef gdvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_62) (Return (BinOp (Attribute self nir) Sub (Attribute self green)))) (__list__ )) (FunctionDef evi (arguments (__list__ (arg self))) (__list__ (Expr STRING_63) (Return (BinOp 2.5 Mult (BinOp (BinOp (Attribute self nir) Sub (Attribute self red)) Div (BinOp (BinOp (BinOp (Attribute self nir) Add (BinOp 6 Mult (Attribute self red))) Sub (BinOp 7.5 Mult (Attribute self blue))) Add 1))))) (__list__ )) (FunctionDef gemi (arguments (__list__ (arg self))) (__list__ (Expr STRING_64) (Assign (__list__ n) (BinOp (BinOp (BinOp (BinOp 2 Mult (BinOp (BinOp (Attribute self nir) Pow 2) Sub (BinOp (Attribute self red) Pow 2))) Add (BinOp 1.5 Mult (Attribute self nir))) Add (BinOp 0.5 Mult (Attribute self red))) Div (BinOp (BinOp (Attribute self nir) Add (Attribute self red)) Add 0.5))) (Return (BinOp (BinOp n Mult (BinOp 1 Sub (BinOp 0.25 Mult n))) Sub (BinOp (BinOp (Attribute self red) Sub 0.125) Div (BinOp 1 Sub (Attribute self red)))))) (__list__ )) (FunctionDef gosavi (arguments (__list__ (arg self) (arg y)) (__list__ 0.16)) (__list__ (Expr STRING_65) (Return (BinOp (BinOp (Attribute self nir) Sub (Attribute self green)) Div (BinOp (BinOp (Attribute self nir) Add (Attribute self green)) Add y)))) (__list__ )) (FunctionDef gsavi (arguments (__list__ (arg self) (arg n)) (__list__ 0.5)) (__list__ (Expr STRING_66) (Return (BinOp (BinOp (BinOp (Attribute self nir) Sub (Attribute self green)) Div (BinOp (BinOp (Attribute self nir) Add (Attribute self green)) Add n)) Mult (BinOp 1 Add n)))) (__list__ )) (FunctionDef hue (arguments (__list__ (arg self))) (__list__ (Expr STRING_67) (Return (Call (Attribute np arctan) (__list__ (BinOp (BinOp (BinOp (BinOp (BinOp 2 Mult (Attribute self red)) Sub (Attribute self green)) Sub (Attribute self blue)) Div 30.5) Mult (BinOp (Attribute self green) Sub (Attribute self blue))))))) (__list__ )) (FunctionDef ivi (arguments (__list__ (arg self) (arg a) (arg b)) (__list__ None None)) (__list__ (Expr STRING_68) (Return (BinOp (BinOp (Attribute self nir) Sub b) Div (BinOp a Mult (Attribute self red))))) (__list__ )) (FunctionDef ipvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_69) (Return (BinOp (BinOp (Attribute self nir) Div (BinOp (BinOp (Attribute self nir) Add (Attribute self red)) Div 2)) Mult (BinOp (Call (Attribute self ndvi)) Add 1)))) (__list__ )) (FunctionDef i (arguments (__list__ (arg self))) (__list__ (Expr STRING_70) (Return (BinOp (BinOp (BinOp (Attribute self red) Add (Attribute self green)) Add (Attribute self blue)) Div 30.5))) (__list__ )) (FunctionDef rvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_71) (Return (BinOp (Attribute self nir) Div (Attribute self red)))) (__list__ )) (FunctionDef mrvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_72) (Return (BinOp (BinOp (Call (Attribute self rvi)) Sub 1) Div (BinOp (Call (Attribute self rvi)) Add 1)))) (__list__ )) (FunctionDef m_savi (arguments (__list__ (arg self))) (__list__ (Expr STRING_73) (Return (BinOp (BinOp (BinOp (BinOp 2 Mult (Attribute self nir)) Add 1) Sub (BinOp (BinOp (BinOp (BinOp (BinOp 2 Mult (Attribute self nir)) Add 1) Pow 2) Sub (BinOp 8 Mult (BinOp (Attribute self nir) Sub (Attribute self red)))) Pow (BinOp 1 Div 2))) Div 2))) (__list__ )) (FunctionDef norm_g (arguments (__list__ (arg self))) (__list__ (Expr STRING_74) (Return (BinOp (Attribute self green) Div (BinOp (BinOp (Attribute self nir) Add (Attribute self red)) Add (Attribute self green))))) (__list__ )) (FunctionDef norm_nir (arguments (__list__ (arg self))) (__list__ (Expr STRING_75) (Return (BinOp (Attribute self nir) Div (BinOp (BinOp (Attribute self nir) Add (Attribute self red)) Add (Attribute self green))))) (__list__ )) (FunctionDef norm_r (arguments (__list__ (arg self))) (__list__ (Expr STRING_76) (Return (BinOp (Attribute self red) Div (BinOp (BinOp (Attribute self nir) Add (Attribute self red)) Add (Attribute self green))))) (__list__ )) (FunctionDef ngrdi (arguments (__list__ (arg self))) (__list__ (Expr STRING_77) (Return (BinOp (BinOp (Attribute self green) Sub (Attribute self red)) Div (BinOp (Attribute self green) Add (Attribute self red))))) (__list__ )) (FunctionDef ri (arguments (__list__ (arg self))) (__list__ (Expr STRING_78) (Return (BinOp (BinOp (Attribute self red) Sub (Attribute self green)) Div (BinOp (Attribute self red) Add (Attribute self green))))) (__list__ )) (FunctionDef s (arguments (__list__ (arg self))) (__list__ (Expr STRING_79) (Assign (__list__ max_value) (Call (Attribute np max) (__list__ (List (__list__ (Call (Attribute np max) (__list__ (Attribute self red))) (Call (Attribute np max) (__list__ (Attribute self green))) (Call (Attribute np max) (__list__ (Attribute self blue)))))))) (Assign (__list__ min_value) (Call (Attribute np min) (__list__ (List (__list__ (Call (Attribute np min) (__list__ (Attribute self red))) (Call (Attribute np min) (__list__ (Attribute self green))) (Call (Attribute np min) (__list__ (Attribute self blue)))))))) (Return (BinOp (BinOp max_value Sub min_value) Div max_value))) (__list__ )) (FunctionDef _if (arguments (__list__ (arg self))) (__list__ (Expr STRING_80) (Return (BinOp (BinOp (BinOp (BinOp 2 Mult (Attribute self red)) Sub (Attribute self green)) Sub (Attribute self blue)) Div (BinOp (Attribute self green) Sub (Attribute self blue))))) (__list__ )) (FunctionDef dvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_81) (Return (BinOp (Attribute self nir) Div (Attribute self red)))) (__list__ )) (FunctionDef tvi (arguments (__list__ (arg self))) (__list__ (Expr STRING_82) (Return (BinOp (BinOp (Call (Attribute self ndvi)) Add 0.5) Pow (BinOp 1 Div 2)))) (__list__ )) (FunctionDef ndre (arguments (__list__ (arg self))) (__list__ (Return (BinOp (BinOp (Attribute self nir) Sub (Attribute self redEdge)) Div (BinOp (Attribute self nir) Add (Attribute self redEdge))))) (__list__ )))) (Expr STRING_83))",
    "(ProgramStatements (ImportFrom PIL (__list__ (alias Image)) 0) (FunctionDef change_brightness (arguments (__list__ (arg img Image) (arg level float))) (__list__ (Expr STRING_0) (FunctionDef brightness (arguments (__list__ (arg c int))) (__list__ (Expr STRING_2) (Return (BinOp (BinOp 128 Add level) Add (BinOp c Sub 128)))) (__list__ ) float) (If (UnaryOp Not (Compare (UnaryOp USub 255.0) (__list__ LtE LtE) (__list__ level 255.0))) (__list__ (Raise (Call ValueError (__list__ STRING_1))))) (Return (Call (Attribute img point) (__list__ brightness)))) (__list__ ) Image) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (With (__list__ (withitem (Call (Attribute Image open) (__list__ STRING_4)) img)) (__list__ (Assign (__list__ brigt_img) (Call change_brightness (__list__ img 100))) (Expr (Call (Attribute brigt_img save) (__list__ STRING_2) (__list__ (keyword format STRING_6)))))))))",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias numpy np))) (ImportFrom cv2 (__list__ (alias COLOR_BGR2GRAY) (alias cvtColor) (alias imread)) 0) (ImportFrom numpy (__list__ (alias array) (alias uint8)) 0) (ImportFrom PIL (__list__ (alias Image)) 0) (ImportFrom digital_image_processing (__list__ (alias change_contrast cc)) 0) (ImportFrom digital_image_processing (__list__ (alias convert_to_negative cn)) 0) (ImportFrom digital_image_processing (__list__ (alias sepia sp)) 0) (ImportFrom digital_image_processing.dithering (__list__ (alias burkes bs)) 0) (ImportFrom digital_image_processing.edge_detection (__list__ (alias canny)) 0) (ImportFrom digital_image_processing.filters (__list__ (alias convolve conv)) 0) (ImportFrom digital_image_processing.filters (__list__ (alias gaussian_filter gg)) 0) (ImportFrom digital_image_processing.filters (__list__ (alias local_binary_pattern lbp)) 0) (ImportFrom digital_image_processing.filters (__list__ (alias median_filter med)) 0) (ImportFrom digital_image_processing.filters (__list__ (alias sobel_filter sob)) 0) (ImportFrom digital_image_processing.resize (__list__ (alias resize rs)) 0) (Assign (__list__ img) (Call imread (__list__ STRING_1))) (Assign (__list__ gray) (Call cvtColor (__list__ img COLOR_BGR2GRAY))) (FunctionDef test_convert_to_negative arguments (__list__ (Assign (__list__ negative_img) (Call (Attribute cn convert_to_negative) (__list__ img))) (Assert (Call (Attribute negative_img any)))) (__list__ )) (FunctionDef test_change_contrast arguments (__list__ (With (__list__ (withitem (Call (Attribute Image open) (__list__ STRING_1)) img)) (__list__ (Assert (Call (Attribute (Call str (__list__ (Call (Attribute cc change_contrast) (__list__ img 110)))) startswith) (__list__ STRING_2)))))) (__list__ )) (FunctionDef test_gen_gaussian_kernel arguments (__list__ (Assign (__list__ resp) (Call (Attribute canny gen_gaussian_kernel) (__list__ 9) (__list__ (keyword sigma 1.4)))) (Assert (Call (Attribute resp all)))) (__list__ )) (FunctionDef test_canny arguments (__list__ (Assign (__list__ canny_img) (Call imread (__list__ STRING_1 0))) (Assert (Call (Attribute canny_img all))) (Assign (__list__ canny_array) (Call (Attribute canny canny) (__list__ canny_img))) (Assert (Call (Attribute canny_array any)))) (__list__ )) (FunctionDef test_gen_gaussian_kernel_filter arguments (__list__ (Assert (Call (Attribute (Call (Attribute gg gaussian_filter) (__list__ gray 5) (__list__ (keyword sigma 0.9))) all)))) (__list__ )) (FunctionDef test_convolve_filter arguments (__list__ (Assign (__list__ laplace) (Call array (__list__ (List (__list__ (List (__list__ 0.25 0.5 0.25)) (List (__list__ 0.5 (UnaryOp USub 3) 0.5)) (List (__list__ 0.25 0.5 0.25))))))) (Assign (__list__ res) (Call (Attribute (Call (Attribute conv img_convolve) (__list__ gray laplace)) astype) (__list__ uint8))) (Assert (Call (Attribute res any)))) (__list__ )) (FunctionDef test_median_filter arguments (__list__ (Assert (Call (Attribute (Call (Attribute med median_filter) (__list__ gray 3)) any)))) (__list__ )) (FunctionDef test_sobel_filter arguments (__list__ (Assign (__list__ (Tuple (__list__ grad theta))) (Call (Attribute sob sobel_filter) (__list__ gray))) (Assert (Call (Attribute grad any))) (Assert (Call (Attribute theta any)))) (__list__ )) (FunctionDef test_sepia arguments (__list__ (Assign (__list__ sepia) (Call (Attribute sp make_sepia) (__list__ img 20))) (Assert (Call (Attribute sepia all)))) (__list__ )) (FunctionDef test_burkes (arguments (__list__ (arg file_path str)) (__list__ STRING_1)) (__list__ (Assign (__list__ burkes) (Call (Attribute bs Burkes) (__list__ (Call imread (__list__ file_path 1)) 120))) (Expr (Call (Attribute burkes process))) (Assert (Call (Attribute (Attribute burkes output_img) any)))) (__list__ )) (FunctionDef test_nearest_neighbour (arguments (__list__ (arg file_path str)) (__list__ STRING_1)) (__list__ (Assign (__list__ nn) (Call (Attribute rs NearestNeighbour) (__list__ (Call imread (__list__ file_path 1)) 400 200))) (Expr (Call (Attribute nn process))) (Assert (Call (Attribute (Attribute nn output) any)))) (__list__ )) (FunctionDef test_local_binary_pattern arguments (__list__ (ImportFrom os (__list__ (alias getenv)) 0) (Assign (__list__ file_name) (IfExp (Call getenv (__list__ STRING_19)) STRING_3 STRING_4)) (Assign (__list__ file_path) (JoinedStr (__list__ STRING_5 (FormattedValue file_name -1)))) (Assign (__list__ image) (Call imread (__list__ file_path 0))) (Assign (__list__ x_coordinate) 0) (Assign (__list__ y_coordinate) 0) (Assign (__list__ center) (Subscript (Subscript image x_coordinate) y_coordinate)) (Assign (__list__ neighbors_pixels) (Call (Attribute lbp get_neighbors_pixel) (__list__ image x_coordinate y_coordinate center))) (Assert (Compare neighbors_pixels (__list__ IsNot) (__list__ None))) (Assign (__list__ lbp_image) (Call (Attribute np zeros) (__list__ (Tuple (__list__ (Subscript (Attribute image shape) 0) (Subscript (Attribute image shape) 1)))))) (For i (Call range (__list__ (Subscript (Attribute image shape) 0))) (__list__ (For j (Call range (__list__ (Subscript (Attribute image shape) 1))) (__list__ (Assign (__list__ (Subscript (Subscript lbp_image i) j)) (Call (Attribute lbp local_binary_value) (__list__ image i j))))))) (Assert (Call (Attribute lbp_image any)))) (__list__ )))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom cv2 (__list__ (alias destroyAllWindows) (alias imread) (alias imshow) (alias waitKey)) 0) (FunctionDef convert_to_negative (arguments (__list__ (arg img))) (__list__ (Assign (__list__ (Tuple (__list__ pixel_h pixel_v))) (Tuple (__list__ (Subscript (Attribute img shape) 0) (Subscript (Attribute img shape) 1)))) (For i (Call range (__list__ pixel_h)) (__list__ (For j (Call range (__list__ pixel_v)) (__list__ (Assign (__list__ (Subscript (Subscript img i) j)) (BinOp (List (__list__ 255 255 255)) Sub (Subscript (Subscript img i) j))))))) (Return img)) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ img) (Call imread (__list__ STRING_4 1))) (Assign (__list__ neg) (Call convert_to_negative (__list__ img))) (Expr (Call imshow (__list__ STRING_1 img))) (Expr (Call waitKey (__list__ 0))) (Expr (Call destroyAllWindows)))))",
    "(ProgramStatements (ImportFrom cv2 (__list__ (alias COLOR_BGR2GRAY) (alias cvtColor) (alias imread) (alias imshow) (alias waitKey)) 0) (ImportFrom numpy (__list__ (alias array) (alias dot) (alias pad) (alias ravel) (alias uint8) (alias zeros)) 0) (FunctionDef im2col (arguments (__list__ (arg image) (arg block_size))) (__list__ (Assign (__list__ (Tuple (__list__ rows cols))) (Attribute image shape)) (Assign (__list__ dst_height) (BinOp (BinOp cols Sub (Subscript block_size 1)) Add 1)) (Assign (__list__ dst_width) (BinOp (BinOp rows Sub (Subscript block_size 0)) Add 1)) (Assign (__list__ image_array) (Call zeros (__list__ (Tuple (__list__ (BinOp dst_height Mult dst_width) (BinOp (Subscript block_size 1) Mult (Subscript block_size 0))))))) (Assign (__list__ row) 0) (For i (Call range (__list__ dst_height)) (__list__ (For j (Call range (__list__ dst_width)) (__list__ (Assign (__list__ window) (Call ravel (__list__ (Subscript image (Tuple (__list__ (Slice i (BinOp i Add (Subscript block_size 0))) (Slice j (BinOp j Add (Subscript block_size 1))))))))) (Assign (__list__ (Subscript image_array (Tuple (__list__ row Slice)))) window) (AugAssign row Add 1))))) (Return image_array)) (__list__ )) (FunctionDef img_convolve (arguments (__list__ (arg image) (arg filter_kernel))) (__list__ (Assign (__list__ (Tuple (__list__ height width))) (Tuple (__list__ (Subscript (Attribute image shape) 0) (Subscript (Attribute image shape) 1)))) (Assign (__list__ k_size) (Subscript (Attribute filter_kernel shape) 0)) (Assign (__list__ pad_size) (BinOp k_size FloorDiv 2)) (Assign (__list__ image_tmp) (Call pad (__list__ image pad_size) (__list__ (keyword mode STRING_0)))) (Assign (__list__ image_array) (Call im2col (__list__ image_tmp (Tuple (__list__ k_size k_size))))) (Assign (__list__ kernel_array) (Call ravel (__list__ filter_kernel))) (Assign (__list__ dst) (Call (Attribute (Call dot (__list__ image_array kernel_array)) reshape) (__list__ height width))) (Return dst)) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ img) (Call imread (__list__ STRING_1))) (Assign (__list__ gray) (Call cvtColor (__list__ img COLOR_BGR2GRAY))) (Assign (__list__ Laplace_kernel) (Call array (__list__ (List (__list__ (List (__list__ 0 1 0)) (List (__list__ 1 (UnaryOp USub 4) 1)) (List (__list__ 0 1 0))))))) (Assign (__list__ out) (Call (Attribute (Call img_convolve (__list__ gray Laplace_kernel)) astype) (__list__ uint8))) (Expr (Call imshow (__list__ STRING_2 out))) (Expr (Call waitKey (__list__ 0))))))",
    "(ProgramStatements (Import (__list__ (alias numpy np))) (ImportFrom cv2 (__list__ (alias COLOR_BGR2GRAY) (alias cvtColor) (alias imread) (alias imshow) (alias waitKey)) 0) (ImportFrom digital_image_processing.filters.convolve (__list__ (alias img_convolve)) 0) (FunctionDef sobel_filter (arguments (__list__ (arg image))) (__list__ (Assign (__list__ kernel_x) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ (UnaryOp USub 1) 0 1)) (List (__list__ (UnaryOp USub 2) 0 2)) (List (__list__ (UnaryOp USub 1) 0 1))))))) (Assign (__list__ kernel_y) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 1 2 1)) (List (__list__ 0 0 0)) (List (__list__ (UnaryOp USub 1) (UnaryOp USub 2) (UnaryOp USub 1)))))))) (Assign (__list__ dst_x) (Call (Attribute np abs) (__list__ (Call img_convolve (__list__ image kernel_x))))) (Assign (__list__ dst_y) (Call (Attribute np abs) (__list__ (Call img_convolve (__list__ image kernel_y))))) (Assign (__list__ dst_x) (BinOp (BinOp dst_x Mult 255) Div (Call (Attribute np max) (__list__ dst_x)))) (Assign (__list__ dst_y) (BinOp (BinOp dst_y Mult 255) Div (Call (Attribute np max) (__list__ dst_y)))) (Assign (__list__ dst_xy) (Call (Attribute np sqrt) (__list__ (BinOp (Call (Attribute np square) (__list__ dst_x)) Add (Call (Attribute np square) (__list__ dst_y)))))) (Assign (__list__ dst_xy) (BinOp (BinOp dst_xy Mult 255) Div (Call (Attribute np max) (__list__ dst_xy)))) (Assign (__list__ dst) (Call (Attribute dst_xy astype) (__list__ (Attribute np uint8)))) (Assign (__list__ theta) (Call (Attribute np arctan2) (__list__ dst_y dst_x))) (Return (Tuple (__list__ dst theta)))) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ img) (Call imread (__list__ STRING_1))) (Assign (__list__ gray) (Call cvtColor (__list__ img COLOR_BGR2GRAY))) (Assign (__list__ (Tuple (__list__ sobel_grad sobel_theta))) (Call sobel_filter (__list__ gray))) (Expr (Call imshow (__list__ STRING_0 sobel_grad))) (Expr (Call imshow (__list__ STRING_1 sobel_theta))) (Expr (Call waitKey (__list__ 0))))))",
    "(ProgramStatements )",
    "(ProgramStatements (Import (__list__ (alias numpy np))) (ImportFrom cv2 (__list__ (alias COLOR_BGR2GRAY) (alias CV_8UC3) (alias cvtColor) (alias filter2D) (alias imread) (alias imshow) (alias waitKey)) 0) (FunctionDef gabor_filter_kernel (arguments (__list__ (arg ksize int) (arg sigma int) (arg theta int) (arg lambd int) (arg gamma int) (arg psi int))) (__list__ (Expr STRING_0) (If (Compare (BinOp ksize Mod 2) (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ ksize) (BinOp ksize Add 1)))) (Assign (__list__ gabor) (Call (Attribute np zeros) (__list__ (Tuple (__list__ ksize ksize))) (__list__ (keyword dtype (Attribute np float32))))) (For y (Call range (__list__ ksize)) (__list__ (For x (Call range (__list__ ksize)) (__list__ (Assign (__list__ px) (BinOp x Sub (BinOp ksize FloorDiv 2))) (Assign (__list__ py) (BinOp y Sub (BinOp ksize FloorDiv 2))) (Assign (__list__ _theta) (BinOp (BinOp theta Div 180) Mult (Attribute np pi))) (Assign (__list__ cos_theta) (Call (Attribute np cos) (__list__ _theta))) (Assign (__list__ sin_theta) (Call (Attribute np sin) (__list__ _theta))) (Assign (__list__ _x) (BinOp (BinOp cos_theta Mult px) Add (BinOp sin_theta Mult py))) (Assign (__list__ _y) (BinOp (BinOp (UnaryOp USub sin_theta) Mult px) Add (BinOp cos_theta Mult py))) (Assign (__list__ (Subscript gabor (Tuple (__list__ y x)))) (BinOp (Call (Attribute np exp) (__list__ (BinOp (UnaryOp USub (BinOp (BinOp _x Pow 2) Add (BinOp (BinOp gamma Pow 2) Mult (BinOp _y Pow 2)))) Div (BinOp 2 Mult (BinOp sigma Pow 2))))) Mult (Call (Attribute np cos) (__list__ (BinOp (BinOp (BinOp (BinOp 2 Mult (Attribute np pi)) Mult _x) Div lambd) Add psi))))))))) (Return gabor)) (__list__ ) (Attribute np ndarray)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Assign (__list__ img) (Call imread (__list__ STRING_1))) (Assign (__list__ gray) (Call cvtColor (__list__ img COLOR_BGR2GRAY))) (Assign (__list__ out) (Call (Attribute np zeros) (__list__ (Subscript (Attribute gray shape) (Slice 2))))) (For theta (List (__list__ 0 30 60 90 120 150)) (__list__ (Expr STRING_1) (Assign (__list__ kernel_10) (Call gabor_filter_kernel (__list__ 10 8 theta 10 0 0))) (AugAssign out Add (Call filter2D (__list__ gray CV_8UC3 kernel_10))))) (Assign (__list__ out) (BinOp (BinOp out Div (Call (Attribute out max))) Mult 255)) (Assign (__list__ out) (Call (Attribute out astype) (__list__ (Attribute np uint8)))) (Expr (Call imshow (__list__ STRING_2 gray))) (Expr (Call imshow (__list__ STRING_3 out))) (Expr (Call waitKey (__list__ 0))))))",
    "(ProgramStatements (Import (__list__ (alias cv2))) (Import (__list__ (alias numpy np))) (FunctionDef get_neighbors_pixel (arguments (__list__ (arg image (Attribute np ndarray)) (arg x_coordinate int) (arg y_coordinate int) (arg center int))) (__list__ (Expr STRING_0) (Try (__list__ (Return (Call int (__list__ (Compare (Subscript (Subscript image x_coordinate) y_coordinate) (__list__ GtE) (__list__ center)))))) (__list__ (ExceptHandler (Tuple (__list__ IndexError TypeError)) (__list__ (Return 0)))))) (__list__ ) int) (FunctionDef local_binary_value (arguments (__list__ (arg image (Attribute np ndarray)) (arg x_coordinate int) (arg y_coordinate int))) (__list__ (Expr STRING_1) (Assign (__list__ center) (Subscript (Subscript image x_coordinate) y_coordinate)) (Assign (__list__ powers) (List (__list__ 1 2 4 8 16 32 64 128))) (If (Compare center (__list__ Is) (__list__ None)) (__list__ (Return 0))) (Assign (__list__ binary_values) (List (__list__ (Call get_neighbors_pixel (__list__ image (BinOp x_coordinate Sub 1) (BinOp y_coordinate Add 1) center)) (Call get_neighbors_pixel (__list__ image x_coordinate (BinOp y_coordinate Add 1) center)) (Call get_neighbors_pixel (__list__ image (BinOp x_coordinate Sub 1) y_coordinate center)) (Call get_neighbors_pixel (__list__ image (BinOp x_coordinate Add 1) (BinOp y_coordinate Add 1) center)) (Call get_neighbors_pixel (__list__ image (BinOp x_coordinate Add 1) y_coordinate center)) (Call get_neighbors_pixel (__list__ image (BinOp x_coordinate Add 1) (BinOp y_coordinate Sub 1) center)) (Call get_neighbors_pixel (__list__ image x_coordinate (BinOp y_coordinate Sub 1) center)) (Call get_neighbors_pixel (__list__ image (BinOp x_coordinate Sub 1) (BinOp y_coordinate Sub 1) center))))) (Return (Call sum (__list__ (GeneratorExp (BinOp binary_value Mult power) (__list__ (comprehension (Tuple (__list__ binary_value power)) (Call zip (__list__ binary_values powers)) 0))))))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ image) (Call (Attribute cv2 imread) (__list__ STRING_2 (Attribute cv2 IMREAD_GRAYSCALE)))) (Assign (__list__ lbp_image) (Call (Attribute np zeros) (__list__ (Tuple (__list__ (Subscript (Attribute image shape) 0) (Subscript (Attribute image shape) 1)))))) (For i (Call range (__list__ (Subscript (Attribute image shape) 0))) (__list__ (For j (Call range (__list__ (Subscript (Attribute image shape) 1))) (__list__ (Assign (__list__ (Subscript (Subscript lbp_image i) j)) (Call local_binary_value (__list__ image i j))))))) (Expr (Call (Attribute cv2 imshow) (__list__ STRING_3 lbp_image))) (Expr (Call (Attribute cv2 waitKey) (__list__ 0))) (Expr (Call (Attribute cv2 destroyAllWindows))))))",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias math))) (Import (__list__ (alias sys))) (Import (__list__ (alias cv2))) (Import (__list__ (alias numpy np))) (FunctionDef vec_gaussian (arguments (__list__ (arg img (Attribute np ndarray)) (arg variance float))) (__list__ (Assign (__list__ sigma) (Call (Attribute math sqrt) (__list__ variance))) (Assign (__list__ cons) (BinOp 1 Div (BinOp sigma Mult (Call (Attribute math sqrt) (__list__ (BinOp 2 Mult (Attribute math pi))))))) (Return (BinOp cons Mult (Call (Attribute np exp) (__list__ (BinOp (UnaryOp USub (BinOp (BinOp img Div sigma) Pow 2)) Mult 0.5)))))) (__list__ ) (Attribute np ndarray)) (FunctionDef get_slice (arguments (__list__ (arg img (Attribute np ndarray)) (arg x int) (arg y int) (arg kernel_size int))) (__list__ (Assign (__list__ half) (BinOp kernel_size FloorDiv 2)) (Return (Subscript img (Tuple (__list__ (Slice (BinOp x Sub half) (BinOp (BinOp x Add half) Add 1)) (Slice (BinOp y Sub half) (BinOp (BinOp y Add half) Add 1))))))) (__list__ ) (Attribute np ndarray)) (FunctionDef get_gauss_kernel (arguments (__list__ (arg kernel_size int) (arg spatial_variance float))) (__list__ (Assign (__list__ arr) (Call (Attribute np zeros) (__list__ (Tuple (__list__ kernel_size kernel_size))))) (For i (Call range (__list__ kernel_size)) (__list__ (For j (Call range (__list__ kernel_size)) (__list__ (Assign (__list__ (Subscript arr (Tuple (__list__ i j)))) (Call (Attribute math sqrt) (__list__ (BinOp (BinOp (Call abs (__list__ (BinOp i Sub (BinOp kernel_size FloorDiv 2)))) Pow 2) Add (BinOp (Call abs (__list__ (BinOp j Sub (BinOp kernel_size FloorDiv 2)))) Pow 2))))))))) (Return (Call vec_gaussian (__list__ arr spatial_variance)))) (__list__ ) (Attribute np ndarray)) (FunctionDef bilateral_filter (arguments (__list__ (arg img (Attribute np ndarray)) (arg spatial_variance float) (arg intensity_variance float) (arg kernel_size int))) (__list__ (Assign (__list__ img2) (Call (Attribute np zeros) (__list__ (Attribute img shape)))) (Assign (__list__ gauss_ker) (Call get_gauss_kernel (__list__ kernel_size spatial_variance))) (Assign (__list__ (Tuple (__list__ size_x size_y))) (Attribute img shape)) (For i (Call range (__list__ (BinOp kernel_size FloorDiv 2) (BinOp size_x Sub (BinOp kernel_size FloorDiv 2)))) (__list__ (For j (Call range (__list__ (BinOp kernel_size FloorDiv 2) (BinOp size_y Sub (BinOp kernel_size FloorDiv 2)))) (__list__ (Assign (__list__ img_s) (Call get_slice (__list__ img i j kernel_size))) (Assign (__list__ img_i) (BinOp img_s Sub (Subscript img_s (Tuple (__list__ (BinOp kernel_size FloorDiv 2) (BinOp kernel_size FloorDiv 2)))))) (Assign (__list__ img_ig) (Call vec_gaussian (__list__ img_i intensity_variance))) (Assign (__list__ weights) (Call (Attribute np multiply) (__list__ gauss_ker img_ig))) (Assign (__list__ vals) (Call (Attribute np multiply) (__list__ img_s weights))) (Assign (__list__ val) (BinOp (Call (Attribute np sum) (__list__ vals)) Div (Call (Attribute np sum) (__list__ weights)))) (Assign (__list__ (Subscript img2 (Tuple (__list__ i j)))) val))))) (Return img2)) (__list__ ) (Attribute np ndarray)) (FunctionDef parse_args (arguments (__list__ (arg args list))) (__list__ (Assign (__list__ filename) (IfExp (Subscript args (Slice 1)) (Subscript args 1) STRING_1)) (Assign (__list__ spatial_variance) (IfExp (Subscript args (Slice 2)) (Call float (__list__ (Subscript args 2))) 1.0)) (Assign (__list__ intensity_variance) (IfExp (Subscript args (Slice 3)) (Call float (__list__ (Subscript args 3))) 1.0)) (If (Subscript args (Slice 4)) (__list__ (Assign (__list__ kernel_size) (Call int (__list__ (Subscript args 4)))) (Assign (__list__ kernel_size) (BinOp kernel_size Add (Call abs (__list__ (BinOp (BinOp kernel_size Mod 2) Sub 1)))))) (__list__ (Assign (__list__ kernel_size) 5))) (Return (Tuple (__list__ filename spatial_variance intensity_variance kernel_size)))) (__list__ ) tuple) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ (Tuple (__list__ filename spatial_variance intensity_variance kernel_size))) (Call parse_args (__list__ (Attribute sys argv)))) (Assign (__list__ img) (Call (Attribute cv2 imread) (__list__ filename 0))) (Expr (Call (Attribute cv2 imshow) (__list__ STRING_1 img))) (Assign (__list__ out) (BinOp img Div 255)) (Assign (__list__ out) (Call (Attribute out astype) (__list__ STRING_2))) (Assign (__list__ out) (Call bilateral_filter (__list__ out spatial_variance intensity_variance kernel_size))) (Assign (__list__ out) (BinOp out Mult 255)) (Assign (__list__ out) (Call (Attribute np uint8) (__list__ out))) (Expr (Call (Attribute cv2 imshow) (__list__ STRING_3 out))) (Expr (Call (Attribute cv2 waitKey) (__list__ 0))) (Expr (Call (Attribute cv2 destroyAllWindows))))))",
    "(ProgramStatements (Import (__list__ (alias numpy np))) (ImportFrom cv2 (__list__ (alias BORDER_DEFAULT) (alias COLOR_BGR2GRAY) (alias CV_64F) (alias cvtColor) (alias filter2D) (alias imread) (alias imshow) (alias waitKey)) 0) (ImportFrom digital_image_processing.filters.gaussian_filter (__list__ (alias gaussian_filter)) 0) (FunctionDef my_laplacian (arguments (__list__ (arg src (Attribute np ndarray)) (arg ksize int))) (__list__ (Expr STRING_0) (Assign (__list__ kernels) (Dict (__list__ 1 3 5 7) (__list__ (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 0 (UnaryOp USub 1) 0)) (List (__list__ (UnaryOp USub 1) 4 (UnaryOp USub 1))) (List (__list__ 0 (UnaryOp USub 1) 0)))))) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 0 1 0)) (List (__list__ 1 (UnaryOp USub 4) 1)) (List (__list__ 0 1 0)))))) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 0 0 (UnaryOp USub 1) 0 0)) (List (__list__ 0 (UnaryOp USub 1) (UnaryOp USub 2) (UnaryOp USub 1) 0)) (List (__list__ (UnaryOp USub 1) (UnaryOp USub 2) 16 (UnaryOp USub 2) (UnaryOp USub 1))) (List (__list__ 0 (UnaryOp USub 1) (UnaryOp USub 2) (UnaryOp USub 1) 0)) (List (__list__ 0 0 (UnaryOp USub 1) 0 0)))))) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 0 0 0 (UnaryOp USub 1) 0 0 0)) (List (__list__ 0 0 (UnaryOp USub 2) (UnaryOp USub 3) (UnaryOp USub 2) 0 0)) (List (__list__ 0 (UnaryOp USub 2) (UnaryOp USub 7) (UnaryOp USub 10) (UnaryOp USub 7) (UnaryOp USub 2) 0)) (List (__list__ (UnaryOp USub 1) (UnaryOp USub 3) (UnaryOp USub 10) 68 (UnaryOp USub 10) (UnaryOp USub 3) (UnaryOp USub 1))) (List (__list__ 0 (UnaryOp USub 2) (UnaryOp USub 7) (UnaryOp USub 10) (UnaryOp USub 7) (UnaryOp USub 2) 0)) (List (__list__ 0 0 (UnaryOp USub 2) (UnaryOp USub 3) (UnaryOp USub 2) 0 0)) (List (__list__ 0 0 0 (UnaryOp USub 1) 0 0 0))))))))) (If (Compare ksize (__list__ NotIn) (__list__ kernels)) (__list__ (Assign (__list__ msg) (JoinedStr (__list__ STRING_1 (FormattedValue (Call tuple (__list__ kernels)) -1)))) (Raise (Call ValueError (__list__ msg))))) (Return (Call filter2D (__list__ src CV_64F (Subscript kernels ksize) 0) (__list__ (keyword borderType BORDER_DEFAULT) (keyword anchor (Tuple (__list__ 0 0))))))) (__list__ ) (Attribute np ndarray)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ img) (Call imread (__list__ STRING_1))) (Assign (__list__ gray) (Call cvtColor (__list__ img COLOR_BGR2GRAY))) (Assign (__list__ blur_image) (Call gaussian_filter (__list__ gray 3) (__list__ (keyword sigma 1)))) (Assign (__list__ laplacian_image) (Call my_laplacian (__list__ (keyword ksize 3) (keyword src blur_image)))) (Expr (Call imshow (__list__ STRING_2 img))) (Expr (Call imshow (__list__ STRING_3 laplacian_image))) (Expr (Call waitKey (__list__ 0))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom cv2 (__list__ (alias COLOR_BGR2GRAY) (alias cvtColor) (alias imread) (alias imshow) (alias waitKey)) 0) (ImportFrom numpy (__list__ (alias divide) (alias int8) (alias multiply) (alias ravel) (alias sort) (alias zeros_like)) 0) (FunctionDef median_filter (arguments (__list__ (arg gray_img) (arg mask)) (__list__ 3)) (__list__ (Expr STRING_1) (Assign (__list__ bd) (Call int (__list__ (BinOp mask Div 2)))) (Assign (__list__ median_img) (Call zeros_like (__list__ gray_img))) (For i (Call range (__list__ bd (BinOp (Subscript (Attribute gray_img shape) 0) Sub bd))) (__list__ (For j (Call range (__list__ bd (BinOp (Subscript (Attribute gray_img shape) 1) Sub bd))) (__list__ (Assign (__list__ kernel) (Call ravel (__list__ (Subscript gray_img (Tuple (__list__ (Slice (BinOp i Sub bd) (BinOp (BinOp i Add bd) Add 1)) (Slice (BinOp j Sub bd) (BinOp (BinOp j Add bd) Add 1)))))))) (Assign (__list__ median) (Subscript (Call sort (__list__ kernel)) (Call int8 (__list__ (BinOp (Call divide (__list__ (Call multiply (__list__ mask mask)) 2)) Add 1))))) (Assign (__list__ (Subscript median_img (Tuple (__list__ i j)))) median))))) (Return median_img)) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ img) (Call imread (__list__ STRING_1))) (Assign (__list__ gray) (Call cvtColor (__list__ img COLOR_BGR2GRAY))) (Assign (__list__ median3x3) (Call median_filter (__list__ gray 3))) (Assign (__list__ median5x5) (Call median_filter (__list__ gray 5))) (Expr (Call imshow (__list__ STRING_2 median3x3))) (Expr (Call imshow (__list__ STRING_3 median5x5))) (Expr (Call waitKey (__list__ 0))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom itertools (__list__ (alias product)) 0) (ImportFrom cv2 (__list__ (alias COLOR_BGR2GRAY) (alias cvtColor) (alias imread) (alias imshow) (alias waitKey)) 0) (ImportFrom numpy (__list__ (alias dot) (alias exp) (alias mgrid) (alias pi) (alias ravel) (alias square) (alias uint8) (alias zeros)) 0) (FunctionDef gen_gaussian_kernel (arguments (__list__ (arg k_size) (arg sigma))) (__list__ (Assign (__list__ center) (BinOp k_size FloorDiv 2)) (Assign (__list__ (Tuple (__list__ x y))) (Subscript mgrid (Tuple (__list__ (Slice (BinOp 0 Sub center) (BinOp k_size Sub center)) (Slice (BinOp 0 Sub center) (BinOp k_size Sub center)))))) (Assign (__list__ g) (BinOp (BinOp 1 Div (BinOp (BinOp 2 Mult pi) Mult sigma)) Mult (Call exp (__list__ (BinOp (UnaryOp USub (BinOp (Call square (__list__ x)) Add (Call square (__list__ y)))) Div (BinOp 2 Mult (Call square (__list__ sigma)))))))) (Return g)) (__list__ )) (FunctionDef gaussian_filter (arguments (__list__ (arg image) (arg k_size) (arg sigma))) (__list__ (Assign (__list__ (Tuple (__list__ height width))) (Tuple (__list__ (Subscript (Attribute image shape) 0) (Subscript (Attribute image shape) 1)))) (Assign (__list__ dst_height) (BinOp (BinOp height Sub k_size) Add 1)) (Assign (__list__ dst_width) (BinOp (BinOp width Sub k_size) Add 1)) (Assign (__list__ image_array) (Call zeros (__list__ (Tuple (__list__ (BinOp dst_height Mult dst_width) (BinOp k_size Mult k_size)))))) (For (Tuple (__list__ row (Tuple (__list__ i j)))) (Call enumerate (__list__ (Call product (__list__ (Call range (__list__ dst_height)) (Call range (__list__ dst_width)))))) (__list__ (Assign (__list__ window) (Call ravel (__list__ (Subscript image (Tuple (__list__ (Slice i (BinOp i Add k_size)) (Slice j (BinOp j Add k_size)))))))) (Assign (__list__ (Subscript image_array (Tuple (__list__ row Slice)))) window))) (Assign (__list__ gaussian_kernel) (Call gen_gaussian_kernel (__list__ k_size sigma))) (Assign (__list__ filter_array) (Call ravel (__list__ gaussian_kernel))) (Assign (__list__ dst) (Call (Attribute (Call (Attribute (Call dot (__list__ image_array filter_array)) reshape) (__list__ dst_height dst_width)) astype) (__list__ uint8))) (Return dst)) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ img) (Call imread (__list__ STRING_1))) (Assign (__list__ gray) (Call cvtColor (__list__ img COLOR_BGR2GRAY))) (Assign (__list__ gaussian3x3) (Call gaussian_filter (__list__ gray 3) (__list__ (keyword sigma 1)))) (Assign (__list__ gaussian5x5) (Call gaussian_filter (__list__ gray 5) (__list__ (keyword sigma 0.8)))) (Expr (Call imshow (__list__ STRING_1 gaussian3x3))) (Expr (Call imshow (__list__ STRING_2 gaussian5x5))) (Expr (Call waitKey)))))",
    "(ProgramStatements (ImportFrom pathlib (__list__ (alias Path)) 0) (Import (__list__ (alias numpy np))) (ImportFrom PIL (__list__ (alias Image)) 0) (FunctionDef rgb_to_gray (arguments (__list__ (arg rgb (Attribute np ndarray)))) (__list__ (Expr STRING_0) (Assign (__list__ (Tuple (__list__ r g b))) (Tuple (__list__ (Subscript rgb (Tuple (__list__ Slice Slice 0))) (Subscript rgb (Tuple (__list__ Slice Slice 1))) (Subscript rgb (Tuple (__list__ Slice Slice 2)))))) (Return (BinOp (BinOp (BinOp 0.2989 Mult r) Add (BinOp 0.587 Mult g)) Add (BinOp 0.114 Mult b)))) (__list__ ) (Attribute np ndarray)) (FunctionDef gray_to_binary (arguments (__list__ (arg gray (Attribute np ndarray)))) (__list__ (Expr STRING_1) (Return (BinOp (Compare gray (__list__ Gt) (__list__ 127)) BitAnd (Compare gray (__list__ LtE) (__list__ 255))))) (__list__ ) (Attribute np ndarray)) (FunctionDef erosion (arguments (__list__ (arg image (Attribute np ndarray)) (arg kernel (Attribute np ndarray)))) (__list__ (Expr STRING_2) (Assign (__list__ output) (Call (Attribute np zeros_like) (__list__ image))) (Assign (__list__ image_padded) (Call (Attribute np zeros) (__list__ (Tuple (__list__ (BinOp (BinOp (Subscript (Attribute image shape) 0) Add (Subscript (Attribute kernel shape) 0)) Sub 1) (BinOp (BinOp (Subscript (Attribute image shape) 1) Add (Subscript (Attribute kernel shape) 1)) Sub 1)))))) (Assign (__list__ (Subscript image_padded (Tuple (__list__ (Slice (BinOp (Subscript (Attribute kernel shape) 0) Sub 2) (UnaryOp USub 1)) (Slice (BinOp (Subscript (Attribute kernel shape) 1) Sub 2) (UnaryOp USub 1)))))) image) (For x (Call range (__list__ (Subscript (Attribute image shape) 1))) (__list__ (For y (Call range (__list__ (Subscript (Attribute image shape) 0))) (__list__ (Assign (__list__ summation) (Call (Attribute (BinOp kernel Mult (Subscript image_padded (Tuple (__list__ (Slice y (BinOp y Add (Subscript (Attribute kernel shape) 0))) (Slice x (BinOp x Add (Subscript (Attribute kernel shape) 1))))))) sum))) (Assign (__list__ (Subscript output (Tuple (__list__ y x)))) (Call int (__list__ (Compare summation (__list__ Eq) (__list__ 5))))))))) (Return output)) (__list__ ) (Attribute np ndarray)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ lena_path) (BinOp (BinOp (Attribute (Call (Attribute (Call Path (__list__ __file__)) resolve)) parent) Div STRING_3) Div STRING_4)) (Assign (__list__ lena) (Call (Attribute np array) (__list__ (Call (Attribute Image open) (__list__ lena_path))))) (Assign (__list__ structuring_element) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 0 1 0)) (List (__list__ 1 1 1)) (List (__list__ 0 1 0))))))) (Assign (__list__ output) (Call erosion (__list__ (Call gray_to_binary (__list__ (Call rgb_to_gray (__list__ lena)))) structuring_element))) (Assign (__list__ pil_img) (Call (Attribute (Call (Attribute Image fromarray) (__list__ output)) convert) (__list__ STRING_4))) (Expr (Call (Attribute pil_img save) (__list__ STRING_5))))))",
    "(ProgramStatements (ImportFrom pathlib (__list__ (alias Path)) 0) (Import (__list__ (alias numpy np))) (ImportFrom PIL (__list__ (alias Image)) 0) (FunctionDef rgb_to_gray (arguments (__list__ (arg rgb (Attribute np ndarray)))) (__list__ (Expr STRING_0) (Assign (__list__ (Tuple (__list__ r g b))) (Tuple (__list__ (Subscript rgb (Tuple (__list__ Slice Slice 0))) (Subscript rgb (Tuple (__list__ Slice Slice 1))) (Subscript rgb (Tuple (__list__ Slice Slice 2)))))) (Return (BinOp (BinOp (BinOp 0.2989 Mult r) Add (BinOp 0.587 Mult g)) Add (BinOp 0.114 Mult b)))) (__list__ ) (Attribute np ndarray)) (FunctionDef gray_to_binary (arguments (__list__ (arg gray (Attribute np ndarray)))) (__list__ (Expr STRING_1) (Return (BinOp (Compare gray (__list__ Gt) (__list__ 127)) BitAnd (Compare gray (__list__ LtE) (__list__ 255))))) (__list__ ) (Attribute np ndarray)) (FunctionDef dilation (arguments (__list__ (arg image (Attribute np ndarray)) (arg kernel (Attribute np ndarray)))) (__list__ (Expr STRING_2) (Assign (__list__ output) (Call (Attribute np zeros_like) (__list__ image))) (Assign (__list__ image_padded) (Call (Attribute np zeros) (__list__ (Tuple (__list__ (BinOp (BinOp (Subscript (Attribute image shape) 0) Add (Subscript (Attribute kernel shape) 0)) Sub 1) (BinOp (BinOp (Subscript (Attribute image shape) 1) Add (Subscript (Attribute kernel shape) 1)) Sub 1)))))) (Assign (__list__ (Subscript image_padded (Tuple (__list__ (Slice (BinOp (Subscript (Attribute kernel shape) 0) Sub 2) (UnaryOp USub 1)) (Slice (BinOp (Subscript (Attribute kernel shape) 1) Sub 2) (UnaryOp USub 1)))))) image) (For x (Call range (__list__ (Subscript (Attribute image shape) 1))) (__list__ (For y (Call range (__list__ (Subscript (Attribute image shape) 0))) (__list__ (Assign (__list__ summation) (Call (Attribute (BinOp kernel Mult (Subscript image_padded (Tuple (__list__ (Slice y (BinOp y Add (Subscript (Attribute kernel shape) 0))) (Slice x (BinOp x Add (Subscript (Attribute kernel shape) 1))))))) sum))) (Assign (__list__ (Subscript output (Tuple (__list__ y x)))) (Call int (__list__ (Compare summation (__list__ Gt) (__list__ 0))))))))) (Return output)) (__list__ ) (Attribute np ndarray)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ lena_path) (BinOp (BinOp (Attribute (Call (Attribute (Call Path (__list__ __file__)) resolve)) parent) Div STRING_3) Div STRING_4)) (Assign (__list__ lena) (Call (Attribute np array) (__list__ (Call (Attribute Image open) (__list__ lena_path))))) (Assign (__list__ structuring_element) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 0 1 0)) (List (__list__ 1 1 1)) (List (__list__ 0 1 0))))))) (Assign (__list__ output) (Call dilation (__list__ (Call gray_to_binary (__list__ (Call rgb_to_gray (__list__ lena)))) structuring_element))) (Assign (__list__ pil_img) (Call (Attribute (Call (Attribute Image fromarray) (__list__ output)) convert) (__list__ STRING_4))) (Expr (Call (Attribute pil_img save) (__list__ STRING_3))))))",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias copy))) (Import (__list__ (alias os))) (Import (__list__ (alias cv2))) (Import (__list__ (alias numpy np))) (ImportFrom matplotlib (__list__ (alias pyplot plt)) 0) (ClassDef ConstantStretch (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self img)) STRING_1) (Assign (__list__ (Attribute self original_image)) STRING_1) (Assign (__list__ (Attribute self last_list)) List) (Assign (__list__ (Attribute self rem)) 0) (Assign (__list__ (Attribute self L)) 256) (Assign (__list__ (Attribute self sk)) 0) (Assign (__list__ (Attribute self k)) 0) (Assign (__list__ (Attribute self number_of_rows)) 0) (Assign (__list__ (Attribute self number_of_cols)) 0)) (__list__ )) (FunctionDef stretch (arguments (__list__ (arg self) (arg input_image))) (__list__ (Assign (__list__ (Attribute self img)) (Call (Attribute cv2 imread) (__list__ input_image 0))) (Assign (__list__ (Attribute self original_image)) (Call (Attribute copy deepcopy) (__list__ (Attribute self img)))) (Assign (__list__ (Tuple (__list__ x _ _))) (Call (Attribute plt hist) (__list__ (Call (Attribute (Attribute self img) ravel)) 256 (List (__list__ 0 256))) (__list__ (keyword label STRING_1)))) (Assign (__list__ (Attribute self k)) (Call (Attribute np sum) (__list__ x))) (For i (Call range (__list__ (Call len (__list__ x)))) (__list__ (Assign (__list__ prk) (BinOp (Subscript x i) Div (Attribute self k))) (AugAssign (Attribute self sk) Add prk) (Assign (__list__ last) (BinOp (BinOp (Attribute self L) Sub 1) Mult (Attribute self sk))) (If (Compare (Attribute self rem) (__list__ NotEq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute self rem)) (Call int (__list__ (BinOp last Mod last)))))) (Assign (__list__ last) (Call int (__list__ (IfExp (Compare (Attribute self rem) (__list__ GtE) (__list__ 0.5)) (BinOp last Add 1) last)))) (Expr (Call (Attribute (Attribute self last_list) append) (__list__ last))) (Assign (__list__ (Attribute self number_of_rows)) (Call int (__list__ (BinOp (Call (Attribute (Attribute np ma) count) (__list__ (Attribute self img))) Div (Attribute (Subscript (Attribute self img) 1) size))))) (Assign (__list__ (Attribute self number_of_cols)) (Attribute (Subscript (Attribute self img) 1) size)))) (For i (Call range (__list__ (Attribute self number_of_cols))) (__list__ (For j (Call range (__list__ (Attribute self number_of_rows))) (__list__ (Assign (__list__ num) (Subscript (Subscript (Attribute self img) j) i)) (If (Compare num (__list__ NotEq) (__list__ (Subscript (Attribute self last_list) num))) (__list__ (Assign (__list__ (Subscript (Subscript (Attribute self img) j) i)) (Subscript (Attribute self last_list) num)))))))) (Expr (Call (Attribute cv2 imwrite) (__list__ STRING_2 (Attribute self img))))) (__list__ )) (FunctionDef plot_histogram (arguments (__list__ (arg self))) (__list__ (Expr (Call (Attribute plt hist) (__list__ (Call (Attribute (Attribute self img) ravel)) 256 (List (__list__ 0 256)))))) (__list__ )) (FunctionDef show_image (arguments (__list__ (arg self))) (__list__ (Expr (Call (Attribute cv2 imshow) (__list__ STRING_3 (Attribute self img)))) (Expr (Call (Attribute cv2 imshow) (__list__ STRING_4 (Attribute self original_image)))) (Expr (Call (Attribute cv2 waitKey) (__list__ 5000))) (Expr (Call (Attribute cv2 destroyAllWindows)))) (__list__ )))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ file_path) (Call (Attribute (Attribute os path) join) (__list__ (Call (Attribute (Attribute os path) basename) (__list__ __file__)) STRING_5))) (Assign (__list__ stretcher) (Call ConstantStretch)) (Expr (Call (Attribute stretcher stretch) (__list__ file_path))) (Expr (Call (Attribute stretcher plot_histogram))) (Expr (Call (Attribute stretcher show_image))))))",
    "(ProgramStatements )",
    "(ProgramStatements )",
    "(ProgramStatements )",
    "(ProgramStatements )",
    "(ProgramStatements (Import (__list__ (alias cv2))) (Import (__list__ (alias numpy np))) (ImportFrom digital_image_processing.filters.convolve (__list__ (alias img_convolve)) 0) (ImportFrom digital_image_processing.filters.sobel_filter (__list__ (alias sobel_filter)) 0) (Assign (__list__ PI) 180) (FunctionDef gen_gaussian_kernel (arguments (__list__ (arg k_size) (arg sigma))) (__list__ (Assign (__list__ center) (BinOp k_size FloorDiv 2)) (Assign (__list__ (Tuple (__list__ x y))) (Subscript (Attribute np mgrid) (Tuple (__list__ (Slice (BinOp 0 Sub center) (BinOp k_size Sub center)) (Slice (BinOp 0 Sub center) (BinOp k_size Sub center)))))) (Assign (__list__ g) (BinOp (BinOp 1 Div (BinOp (BinOp 2 Mult (Attribute np pi)) Mult sigma)) Mult (Call (Attribute np exp) (__list__ (BinOp (UnaryOp USub (BinOp (Call (Attribute np square) (__list__ x)) Add (Call (Attribute np square) (__list__ y)))) Div (BinOp 2 Mult (Call (Attribute np square) (__list__ sigma)))))))) (Return g)) (__list__ )) (FunctionDef suppress_non_maximum (arguments (__list__ (arg image_shape) (arg gradient_direction) (arg sobel_grad))) (__list__ (Expr STRING_0) (Assign (__list__ destination) (Call (Attribute np zeros) (__list__ image_shape))) (For row (Call range (__list__ 1 (BinOp (Subscript image_shape 0) Sub 1))) (__list__ (For col (Call range (__list__ 1 (BinOp (Subscript image_shape 1) Sub 1))) (__list__ (Assign (__list__ direction) (Subscript gradient_direction (Tuple (__list__ row col)))) (If (BoolOp Or (__list__ (Compare 0 (__list__ LtE Lt) (__list__ direction (BinOp PI Div 8))) (Compare (BinOp (BinOp 15 Mult PI) Div 8) (__list__ LtE LtE) (__list__ direction (BinOp 2 Mult PI))) (Compare (BinOp (BinOp 7 Mult PI) Div 8) (__list__ LtE LtE) (__list__ direction (BinOp (BinOp 9 Mult PI) Div 8))))) (__list__ (Assign (__list__ w) (Subscript sobel_grad (Tuple (__list__ row (BinOp col Sub 1))))) (Assign (__list__ e) (Subscript sobel_grad (Tuple (__list__ row (BinOp col Add 1))))) (If (BoolOp And (__list__ (Compare (Subscript sobel_grad (Tuple (__list__ row col))) (__list__ GtE) (__list__ w)) (Compare (Subscript sobel_grad (Tuple (__list__ row col))) (__list__ GtE) (__list__ e)))) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) (Subscript sobel_grad (Tuple (__list__ row col))))))) (__list__ (If (BoolOp Or (__list__ (Compare (BinOp PI Div 8) (__list__ LtE Lt) (__list__ direction (BinOp (BinOp 3 Mult PI) Div 8))) (Compare (BinOp (BinOp 9 Mult PI) Div 8) (__list__ LtE Lt) (__list__ direction (BinOp (BinOp 11 Mult PI) Div 8))))) (__list__ (Assign (__list__ sw) (Subscript sobel_grad (Tuple (__list__ (BinOp row Add 1) (BinOp col Sub 1))))) (Assign (__list__ ne) (Subscript sobel_grad (Tuple (__list__ (BinOp row Sub 1) (BinOp col Add 1))))) (If (BoolOp And (__list__ (Compare (Subscript sobel_grad (Tuple (__list__ row col))) (__list__ GtE) (__list__ sw)) (Compare (Subscript sobel_grad (Tuple (__list__ row col))) (__list__ GtE) (__list__ ne)))) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) (Subscript sobel_grad (Tuple (__list__ row col))))))) (__list__ (If (BoolOp Or (__list__ (Compare (BinOp (BinOp 3 Mult PI) Div 8) (__list__ LtE Lt) (__list__ direction (BinOp (BinOp 5 Mult PI) Div 8))) (Compare (BinOp (BinOp 11 Mult PI) Div 8) (__list__ LtE Lt) (__list__ direction (BinOp (BinOp 13 Mult PI) Div 8))))) (__list__ (Assign (__list__ n) (Subscript sobel_grad (Tuple (__list__ (BinOp row Sub 1) col)))) (Assign (__list__ s) (Subscript sobel_grad (Tuple (__list__ (BinOp row Add 1) col)))) (If (BoolOp And (__list__ (Compare (Subscript sobel_grad (Tuple (__list__ row col))) (__list__ GtE) (__list__ n)) (Compare (Subscript sobel_grad (Tuple (__list__ row col))) (__list__ GtE) (__list__ s)))) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) (Subscript sobel_grad (Tuple (__list__ row col))))))) (__list__ (If (BoolOp Or (__list__ (Compare (BinOp (BinOp 5 Mult PI) Div 8) (__list__ LtE Lt) (__list__ direction (BinOp (BinOp 7 Mult PI) Div 8))) (Compare (BinOp (BinOp 13 Mult PI) Div 8) (__list__ LtE Lt) (__list__ direction (BinOp (BinOp 15 Mult PI) Div 8))))) (__list__ (Assign (__list__ nw) (Subscript sobel_grad (Tuple (__list__ (BinOp row Sub 1) (BinOp col Sub 1))))) (Assign (__list__ se) (Subscript sobel_grad (Tuple (__list__ (BinOp row Add 1) (BinOp col Add 1))))) (If (BoolOp And (__list__ (Compare (Subscript sobel_grad (Tuple (__list__ row col))) (__list__ GtE) (__list__ nw)) (Compare (Subscript sobel_grad (Tuple (__list__ row col))) (__list__ GtE) (__list__ se)))) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) (Subscript sobel_grad (Tuple (__list__ row col)))))))))))))))))) (Return destination)) (__list__ )) (FunctionDef detect_high_low_threshold (arguments (__list__ (arg image_shape) (arg destination) (arg threshold_low) (arg threshold_high) (arg weak) (arg strong))) (__list__ (Expr STRING_1) (For row (Call range (__list__ 1 (BinOp (Subscript image_shape 0) Sub 1))) (__list__ (For col (Call range (__list__ 1 (BinOp (Subscript image_shape 1) Sub 1))) (__list__ (If (Compare (Subscript destination (Tuple (__list__ row col))) (__list__ GtE) (__list__ threshold_high)) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) strong)) (__list__ (If (Compare (Subscript destination (Tuple (__list__ row col))) (__list__ LtE) (__list__ threshold_low)) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) 0)) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) weak)))))))))) (__list__ )) (FunctionDef track_edge (arguments (__list__ (arg image_shape) (arg destination) (arg weak) (arg strong))) (__list__ (Expr STRING_2) (For row (Call range (__list__ 1 (Subscript image_shape 0))) (__list__ (For col (Call range (__list__ 1 (Subscript image_shape 1))) (__list__ (If (Compare (Subscript destination (Tuple (__list__ row col))) (__list__ Eq) (__list__ weak)) (__list__ (If (Compare 255 (__list__ In) (__list__ (Tuple (__list__ (Subscript destination (Tuple (__list__ row (BinOp col Add 1)))) (Subscript destination (Tuple (__list__ row (BinOp col Sub 1)))) (Subscript destination (Tuple (__list__ (BinOp row Sub 1) col))) (Subscript destination (Tuple (__list__ (BinOp row Add 1) col))) (Subscript destination (Tuple (__list__ (BinOp row Sub 1) (BinOp col Sub 1)))) (Subscript destination (Tuple (__list__ (BinOp row Add 1) (BinOp col Sub 1)))) (Subscript destination (Tuple (__list__ (BinOp row Sub 1) (BinOp col Add 1)))) (Subscript destination (Tuple (__list__ (BinOp row Add 1) (BinOp col Add 1)))))))) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) strong)) (__list__ (Assign (__list__ (Subscript destination (Tuple (__list__ row col)))) 0)))))))))) (__list__ )) (FunctionDef canny (arguments (__list__ (arg image) (arg threshold_low) (arg threshold_high) (arg weak) (arg strong)) (__list__ 15 30 128 255)) (__list__ (Assign (__list__ gaussian_out) (Call img_convolve (__list__ image (Call gen_gaussian_kernel (__list__ 9) (__list__ (keyword sigma 1.4)))))) (Assign (__list__ (Tuple (__list__ sobel_grad sobel_theta))) (Call sobel_filter (__list__ gaussian_out))) (Assign (__list__ gradient_direction) (BinOp PI Add (Call (Attribute np rad2deg) (__list__ sobel_theta)))) (Assign (__list__ destination) (Call suppress_non_maximum (__list__ (Attribute image shape) gradient_direction sobel_grad))) (Expr (Call detect_high_low_threshold (__list__ (Attribute image shape) destination threshold_low threshold_high weak strong))) (Expr (Call track_edge (__list__ (Attribute image shape) destination weak strong))) (Return destination)) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ lena) (Call (Attribute cv2 imread) (__list__ STRING_1 0))) (Assign (__list__ canny_destination) (Call canny (__list__ lena))) (Expr (Call (Attribute cv2 imshow) (__list__ STRING_3 canny_destination))) (Expr (Call (Attribute cv2 waitKey) (__list__ 0))))))",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias numpy np))) (ImportFrom cv2 (__list__ (alias destroyAllWindows) (alias imread) (alias imshow) (alias waitKey)) 0) (ClassDef Burkes (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg input_img) (arg threshold int))) (__list__ (Assign (__list__ (Attribute self min_threshold)) 0) (Assign (__list__ (Attribute self max_threshold)) (Call int (__list__ (Call (Attribute self get_greyscale) (__list__ 255 255 255))))) (If (UnaryOp Not (Compare (Attribute self min_threshold) (__list__ Lt Lt) (__list__ threshold (Attribute self max_threshold)))) (__list__ (Assign (__list__ msg) (JoinedStr (__list__ STRING_2 (FormattedValue (Attribute self max_threshold) -1)))) (Raise (Call ValueError (__list__ msg))))) (Assign (__list__ (Attribute self input_img)) input_img) (Assign (__list__ (Attribute self threshold)) threshold) (Assign (__list__ (Tuple (__list__ (Attribute self width) (Attribute self height)))) (Tuple (__list__ (Subscript (Attribute (Attribute self input_img) shape) 1) (Subscript (Attribute (Attribute self input_img) shape) 0)))) (Assign (__list__ (Attribute self error_table)) (ListComp (ListComp 0 (__list__ (comprehension _ (Call range (__list__ (BinOp (Attribute self height) Add 4))) 0))) (__list__ (comprehension __ (Call range (__list__ (BinOp (Attribute self width) Add 1))) 0)))) (Assign (__list__ (Attribute self output_img)) (BinOp (Call (Attribute np ones) (__list__ (Tuple (__list__ (Attribute self width) (Attribute self height) 3)) (Attribute np uint8))) Mult 255))) (__list__ )) (FunctionDef get_greyscale (arguments (__list__ (arg cls) (arg blue int) (arg green int) (arg red int))) (__list__ (Expr STRING_3) (Expr STRING_4) (Return (BinOp (BinOp (BinOp 0.114 Mult blue) Add (BinOp 0.587 Mult green)) Add (BinOp 0.299 Mult red)))) (__list__ classmethod) float) (FunctionDef process (arguments (__list__ (arg self))) (__list__ (For y (Call range (__list__ (Attribute self height))) (__list__ (For x (Call range (__list__ (Attribute self width))) (__list__ (Assign (__list__ greyscale) (Call int (__list__ (Call (Attribute self get_greyscale) (__list__ (Starred (Subscript (Subscript (Attribute self input_img) y) x))))))) (If (Compare (Attribute self threshold) (__list__ Gt) (__list__ (BinOp greyscale Add (Subscript (Subscript (Attribute self error_table) y) x)))) (__list__ (Assign (__list__ (Subscript (Subscript (Attribute self output_img) y) x)) (Tuple (__list__ 0 0 0))) (Assign (__list__ current_error) (BinOp greyscale Add (Subscript (Subscript (Attribute self error_table) y) x)))) (__list__ (Assign (__list__ (Subscript (Subscript (Attribute self output_img) y) x)) (Tuple (__list__ 255 255 255))) (Assign (__list__ current_error) (BinOp (BinOp greyscale Add (Subscript (Subscript (Attribute self error_table) y) x)) Sub 255)))) (Expr STRING_5) (AugAssign (Subscript (Subscript (Attribute self error_table) y) (BinOp x Add 1)) Add (Call int (__list__ (BinOp (BinOp 8 Div 32) Mult current_error)))) (AugAssign (Subscript (Subscript (Attribute self error_table) y) (BinOp x Add 2)) Add (Call int (__list__ (BinOp (BinOp 4 Div 32) Mult current_error)))) (AugAssign (Subscript (Subscript (Attribute self error_table) (BinOp y Add 1)) x) Add (Call int (__list__ (BinOp (BinOp 8 Div 32) Mult current_error)))) (AugAssign (Subscript (Subscript (Attribute self error_table) (BinOp y Add 1)) (BinOp x Add 1)) Add (Call int (__list__ (BinOp (BinOp 4 Div 32) Mult current_error)))) (AugAssign (Subscript (Subscript (Attribute self error_table) (BinOp y Add 1)) (BinOp x Add 2)) Add (Call int (__list__ (BinOp (BinOp 2 Div 32) Mult current_error)))) (AugAssign (Subscript (Subscript (Attribute self error_table) (BinOp y Add 1)) (BinOp x Sub 1)) Add (Call int (__list__ (BinOp (BinOp 4 Div 32) Mult current_error)))) (AugAssign (Subscript (Subscript (Attribute self error_table) (BinOp y Add 1)) (BinOp x Sub 2)) Add (Call int (__list__ (BinOp (BinOp 2 Div 32) Mult current_error))))))))) (__list__ ) None))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ burkes_instances) (ListComp (Call Burkes (__list__ (Call imread (__list__ STRING_4 1)) threshold)) (__list__ (comprehension threshold (Tuple (__list__ 1 126 130 140)) 0)))) (For burkes burkes_instances (__list__ (Expr (Call (Attribute burkes process))))) (For burkes burkes_instances (__list__ (Expr (Call imshow (__list__ (JoinedStr (__list__ STRING_6 (FormattedValue (Attribute burkes threshold) -1))) (Attribute burkes output_img)))))) (Expr (Call waitKey (__list__ 0))) (Expr (Call destroyAllWindows)))))",
    "(ProgramStatements )",
    "(ProgramStatements )",
    "(ProgramStatements (ImportFrom pathlib (__list__ (alias Path)) 0) (Import (__list__ (alias cv2))) (Import (__list__ (alias numpy np))) (ImportFrom matplotlib (__list__ (alias pyplot plt)) 0) (FunctionDef get_rotation (arguments (__list__ (arg img (Attribute np ndarray)) (arg pt1 (Attribute np ndarray)) (arg pt2 (Attribute np ndarray)) (arg rows int) (arg cols int))) (__list__ (Expr STRING_0) (Assign (__list__ matrix) (Call (Attribute cv2 getAffineTransform) (__list__ pt1 pt2))) (Return (Call (Attribute cv2 warpAffine) (__list__ img matrix (Tuple (__list__ rows cols)))))) (__list__ ) (Attribute np ndarray)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ image) (Call (Attribute cv2 imread) (__list__ (Call str (__list__ (BinOp (BinOp (Attribute (Attribute (Call (Attribute (Call Path (__list__ __file__)) resolve)) parent) parent) Div STRING_3) Div STRING_4)))))) (Assign (__list__ gray_img) (Call (Attribute cv2 cvtColor) (__list__ image (Attribute cv2 COLOR_BGR2GRAY)))) (Assign (__list__ (Tuple (__list__ img_rows img_cols))) (Attribute gray_img shape)) (Assign (__list__ pts1) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 50 50)) (List (__list__ 200 50)) (List (__list__ 50 200)))) (Attribute np float32)))) (Assign (__list__ pts2) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 10 100)) (List (__list__ 200 50)) (List (__list__ 100 250)))) (Attribute np float32)))) (Assign (__list__ pts3) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 50 50)) (List (__list__ 150 50)) (List (__list__ 120 200)))) (Attribute np float32)))) (Assign (__list__ pts4) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 10 100)) (List (__list__ 80 50)) (List (__list__ 180 250)))) (Attribute np float32)))) (Assign (__list__ images) (List (__list__ gray_img (Call get_rotation (__list__ gray_img pts1 pts2 img_rows img_cols)) (Call get_rotation (__list__ gray_img pts2 pts3 img_rows img_cols)) (Call get_rotation (__list__ gray_img pts2 pts4 img_rows img_cols))))) (Assign (__list__ fig) (Call (Attribute plt figure) (__list__ 1))) (Assign (__list__ titles) (List (__list__ STRING_2 STRING_1 STRING_2 STRING_3))) (For (Tuple (__list__ i image)) (Call enumerate (__list__ images)) (__list__ (Expr (Tuple (__list__ (Call (Attribute plt subplot) (__list__ 2 2 (BinOp i Add 1))) (Call (Attribute plt imshow) (__list__ image STRING_4))))) (Expr (Call (Attribute plt title) (__list__ (Subscript titles i)))) (Expr (Call (Attribute plt axis) (__list__ STRING_5))) (Expr (Call (Attribute plt subplots_adjust) (__list__ (keyword left 0.0) (keyword bottom 0.05) (keyword right 1.0) (keyword top 0.95)))))) (Expr (Call (Attribute plt show))))))",
    "(ProgramStatements )",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias numpy np))) (ImportFrom cv2 (__list__ (alias destroyAllWindows) (alias imread) (alias imshow) (alias waitKey)) 0) (ClassDef NearestNeighbour (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg img) (arg dst_width int) (arg dst_height int))) (__list__ (If (BoolOp Or (__list__ (Compare dst_width (__list__ Lt) (__list__ 0)) (Compare dst_height (__list__ Lt) (__list__ 0)))) (__list__ (Raise (Call ValueError (__list__ STRING_2))))) (Assign (__list__ (Attribute self img)) img) (Assign (__list__ (Attribute self src_w)) (Subscript (Attribute img shape) 1)) (Assign (__list__ (Attribute self src_h)) (Subscript (Attribute img shape) 0)) (Assign (__list__ (Attribute self dst_w)) dst_width) (Assign (__list__ (Attribute self dst_h)) dst_height) (Assign (__list__ (Attribute self ratio_x)) (BinOp (Attribute self src_w) Div (Attribute self dst_w))) (Assign (__list__ (Attribute self ratio_y)) (BinOp (Attribute self src_h) Div (Attribute self dst_h))) (Assign (__list__ (Attribute self output) (Attribute self output_img)) (BinOp (Call (Attribute np ones) (__list__ (Tuple (__list__ (Attribute self dst_h) (Attribute self dst_w) 3)) (Attribute np uint8))) Mult 255))) (__list__ )) (FunctionDef process (arguments (__list__ (arg self))) (__list__ (For i (Call range (__list__ (Attribute self dst_h))) (__list__ (For j (Call range (__list__ (Attribute self dst_w))) (__list__ (Assign (__list__ (Subscript (Subscript (Attribute self output) i) j)) (Subscript (Subscript (Attribute self img) (Call (Attribute self get_y) (__list__ i))) (Call (Attribute self get_x) (__list__ j))))))))) (__list__ )) (FunctionDef get_x (arguments (__list__ (arg self) (arg x int))) (__list__ (Expr STRING_3) (Return (Call int (__list__ (BinOp (Attribute self ratio_x) Mult x))))) (__list__ ) int) (FunctionDef get_y (arguments (__list__ (arg self) (arg y int))) (__list__ (Expr STRING_4) (Return (Call int (__list__ (BinOp (Attribute self ratio_y) Mult y))))) (__list__ ) int))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ (Tuple (__list__ dst_w dst_h))) (Tuple (__list__ 800 600))) (Assign (__list__ im) (Call imread (__list__ STRING_4 1))) (Assign (__list__ n) (Call NearestNeighbour (__list__ im dst_w dst_h))) (Expr (Call (Attribute n process))) (Expr (Call imshow (__list__ (JoinedStr (__list__ STRING_5 (FormattedValue (Subscript (Attribute im shape) 1) -1) STRING_1 (FormattedValue (Subscript (Attribute im shape) 0) -1) STRING_6 (FormattedValue dst_w -1) STRING_1 (FormattedValue dst_h -1))) (Attribute n output)))) (Expr (Call waitKey (__list__ 0))) (Expr (Call destroyAllWindows)))))"
]