[
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias numpy np))) (Import (__list__ (alias tensorflow tf))) (ImportFrom keras (__list__ (alias layers) (alias models)) 0) (If (Compare __name__ (__list__ Eq) (__list__ STRING_1)) (__list__ (Assign (__list__ classifier) (Call (Attribute models Sequential))) (Expr (Call (Attribute classifier add) (__list__ (Call (Attribute layers Conv2D) (__list__ 32 (Tuple (__list__ 3 3))) (__list__ (keyword input_shape (Tuple (__list__ 64 64 3))) (keyword activation STRING_2)))))) (Expr (Call (Attribute classifier add) (__list__ (Call (Attribute layers MaxPooling2D) (__list__ (keyword pool_size (Tuple (__list__ 2 2)))))))) (Expr (Call (Attribute classifier add) (__list__ (Call (Attribute layers Conv2D) (__list__ 32 (Tuple (__list__ 3 3))) (__list__ (keyword activation STRING_2)))))) (Expr (Call (Attribute classifier add) (__list__ (Call (Attribute layers MaxPooling2D) (__list__ (keyword pool_size (Tuple (__list__ 2 2)))))))) (Expr (Call (Attribute classifier add) (__list__ (Call (Attribute layers Flatten))))) (Expr (Call (Attribute classifier add) (__list__ (Call (Attribute layers Dense) (__list__ (keyword units 128) (keyword activation STRING_2)))))) (Expr (Call (Attribute classifier add) (__list__ (Call (Attribute layers Dense) (__list__ (keyword units 1) (keyword activation STRING_3)))))) (Expr (Call (Attribute classifier compile) (__list__ (keyword optimizer STRING_4) (keyword loss STRING_5) (keyword metrics (List (__list__ STRING_6)))))) (Assign (__list__ train_datagen) (Call (Attribute (Attribute (Attribute (Attribute tf keras) preprocessing) image) ImageDataGenerator) (__list__ (keyword rescale (BinOp 1.0 Div 255)) (keyword shear_range 0.2) (keyword zoom_range 0.2) (keyword horizontal_flip True)))) (Assign (__list__ test_datagen) (Call (Attribute (Attribute (Attribute (Attribute tf keras) preprocessing) image) ImageDataGenerator) (__list__ (keyword rescale (BinOp 1.0 Div 255))))) (Assign (__list__ training_set) (Call (Attribute train_datagen flow_from_directory) (__list__ STRING_7) (__list__ (keyword target_size (Tuple (__list__ 64 64))) (keyword batch_size 32) (keyword class_mode STRING_8)))) (Assign (__list__ test_set) (Call (Attribute test_datagen flow_from_directory) (__list__ STRING_9) (__list__ (keyword target_size (Tuple (__list__ 64 64))) (keyword batch_size 32) (keyword class_mode STRING_8)))) (Expr (Call (Attribute classifier fit_generator) (__list__ training_set) (__list__ (keyword steps_per_epoch 5) (keyword epochs 30) (keyword validation_data test_set)))) (Expr (Call (Attribute classifier save) (__list__ STRING_10))) (Assign (__list__ test_image) (Call (Attribute (Attribute (Attribute (Attribute tf keras) preprocessing) image) load_img) (__list__ STRING_11) (__list__ (keyword target_size (Tuple (__list__ 64 64)))))) (Assign (__list__ test_image) (Call (Attribute (Attribute (Attribute (Attribute tf keras) preprocessing) image) img_to_array) (__list__ test_image))) (Assign (__list__ test_image) (Call (Attribute np expand_dims) (__list__ test_image) (__list__ (keyword axis 0)))) (Assign (__list__ result) (Call (Attribute classifier predict) (__list__ test_image))) (If (Compare (Subscript (Subscript result 0) 0) (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ prediction) STRING_12))) (If (Compare (Subscript (Subscript result 0) 0) (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ prediction) STRING_13))))))",
    "(ProgramStatements (Import (__list__ (alias numpy np))) (ImportFrom PIL (__list__ (alias Image)) 0) (FunctionDef maxpooling (arguments (__list__ (arg arr (Attribute np ndarray)) (arg size int) (arg stride int))) (__list__ (Expr STRING_0) (Assign (__list__ arr) (Call (Attribute np array) (__list__ arr))) (If (Compare (Subscript (Attribute arr shape) 0) (__list__ NotEq) (__list__ (Subscript (Attribute arr shape) 1))) (__list__ (Raise (Call ValueError (__list__ STRING_1))))) (Assign (__list__ i) 0) (Assign (__list__ j) 0) (Assign (__list__ mat_i) 0) (Assign (__list__ mat_j) 0) (Assign (__list__ maxpool_shape) (BinOp (BinOp (BinOp (Subscript (Attribute arr shape) 0) Sub size) FloorDiv stride) Add 1)) (Assign (__list__ updated_arr) (Call (Attribute np zeros) (__list__ (Tuple (__list__ maxpool_shape maxpool_shape))))) (While (Compare i (__list__ Lt) (__list__ (Subscript (Attribute arr shape) 0))) (__list__ (If (Compare (BinOp i Add size) (__list__ Gt) (__list__ (Subscript (Attribute arr shape) 0))) (__list__ Break)) (While (Compare j (__list__ Lt) (__list__ (Subscript (Attribute arr shape) 1))) (__list__ (If (Compare (BinOp j Add size) (__list__ Gt) (__list__ (Subscript (Attribute arr shape) 1))) (__list__ Break)) (Assign (__list__ (Subscript (Subscript updated_arr mat_i) mat_j)) (Call (Attribute np max) (__list__ (Subscript arr (Tuple (__list__ (Slice i (BinOp i Add size)) (Slice j (BinOp j Add size)))))))) (AugAssign j Add stride) (AugAssign mat_j Add 1))) (AugAssign i Add stride) (AugAssign mat_i Add 1) (Assign (__list__ j) 0) (Assign (__list__ mat_j) 0))) (Return updated_arr)) (__list__ ) (Attribute np ndarray)) (FunctionDef avgpooling (arguments (__list__ (arg arr (Attribute np ndarray)) (arg size int) (arg stride int))) (__list__ (Expr STRING_2) (Assign (__list__ arr) (Call (Attribute np array) (__list__ arr))) (If (Compare (Subscript (Attribute arr shape) 0) (__list__ NotEq) (__list__ (Subscript (Attribute arr shape) 1))) (__list__ (Raise (Call ValueError (__list__ STRING_1))))) (Assign (__list__ i) 0) (Assign (__list__ j) 0) (Assign (__list__ mat_i) 0) (Assign (__list__ mat_j) 0) (Assign (__list__ avgpool_shape) (BinOp (BinOp (BinOp (Subscript (Attribute arr shape) 0) Sub size) FloorDiv stride) Add 1)) (Assign (__list__ updated_arr) (Call (Attribute np zeros) (__list__ (Tuple (__list__ avgpool_shape avgpool_shape))))) (While (Compare i (__list__ Lt) (__list__ (Subscript (Attribute arr shape) 0))) (__list__ (If (Compare (BinOp i Add size) (__list__ Gt) (__list__ (Subscript (Attribute arr shape) 0))) (__list__ Break)) (While (Compare j (__list__ Lt) (__list__ (Subscript (Attribute arr shape) 1))) (__list__ (If (Compare (BinOp j Add size) (__list__ Gt) (__list__ (Subscript (Attribute arr shape) 1))) (__list__ Break)) (Assign (__list__ (Subscript (Subscript updated_arr mat_i) mat_j)) (Call int (__list__ (Call (Attribute np average) (__list__ (Subscript arr (Tuple (__list__ (Slice i (BinOp i Add size)) (Slice j (BinOp j Add size)))))))))) (AugAssign j Add stride) (AugAssign mat_j Add 1))) (AugAssign i Add stride) (AugAssign mat_i Add 1) (Assign (__list__ j) 0) (Assign (__list__ mat_j) 0))) (Return updated_arr)) (__list__ ) (Attribute np ndarray)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_1)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod (__list__ (keyword name STRING_3) (keyword verbose True)))) (Assign (__list__ image) (Call (Attribute Image open) (__list__ STRING_4))) (Expr (Call (Attribute (Call (Attribute Image fromarray) (__list__ (Call maxpooling (__list__ (Call (Attribute np array) (__list__ image))) (__list__ (keyword size 3) (keyword stride 2))))) show))) (Expr (Call (Attribute (Call (Attribute Image fromarray) (__list__ (Call avgpooling (__list__ (Call (Attribute np array) (__list__ image))) (__list__ (keyword size 3) (keyword stride 2))))) show))))))",
    "(ProgramStatements (Import (__list__ (alias cv2))) (Import (__list__ (alias numpy np))) (Expr STRING_0) (ClassDef HarrisCorner (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg k float) (arg window_size int))) (__list__ (Expr STRING_1) (If (Compare k (__list__ In) (__list__ (Tuple (__list__ 0.04 0.06)))) (__list__ (Assign (__list__ (Attribute self k)) k) (Assign (__list__ (Attribute self window_size)) window_size)) (__list__ (Raise (Call ValueError (__list__ STRING_2)))))) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (Call str (__list__ (Attribute self k))))) (__list__ ) str) (FunctionDef detect (arguments (__list__ (arg self) (arg img_path str))) (__list__ (Expr STRING_3) (Assign (__list__ img) (Call (Attribute cv2 imread) (__list__ img_path 0))) (Assign (__list__ (Tuple (__list__ h w))) (Attribute img shape)) (AnnAssign corner_list (Subscript list (Subscript list int)) List 1) (Assign (__list__ color_img) (Call (Attribute img copy))) (Assign (__list__ color_img) (Call (Attribute cv2 cvtColor) (__list__ color_img (Attribute cv2 COLOR_GRAY2RGB)))) (Assign (__list__ (Tuple (__list__ dy dx))) (Call (Attribute np gradient) (__list__ img))) (Assign (__list__ ixx) (BinOp dx Pow 2)) (Assign (__list__ iyy) (BinOp dy Pow 2)) (Assign (__list__ ixy) (BinOp dx Mult dy)) (Assign (__list__ k) 0.04) (Assign (__list__ offset) (BinOp (Attribute self window_size) FloorDiv 2)) (For y (Call range (__list__ offset (BinOp h Sub offset))) (__list__ (For x (Call range (__list__ offset (BinOp w Sub offset))) (__list__ (Assign (__list__ wxx) (Call (Attribute (Subscript ixx (Tuple (__list__ (Slice (BinOp y Sub offset) (BinOp (BinOp y Add offset) Add 1)) (Slice (BinOp x Sub offset) (BinOp (BinOp x Add offset) Add 1))))) sum))) (Assign (__list__ wyy) (Call (Attribute (Subscript iyy (Tuple (__list__ (Slice (BinOp y Sub offset) (BinOp (BinOp y Add offset) Add 1)) (Slice (BinOp x Sub offset) (BinOp (BinOp x Add offset) Add 1))))) sum))) (Assign (__list__ wxy) (Call (Attribute (Subscript ixy (Tuple (__list__ (Slice (BinOp y Sub offset) (BinOp (BinOp y Add offset) Add 1)) (Slice (BinOp x Sub offset) (BinOp (BinOp x Add offset) Add 1))))) sum))) (Assign (__list__ det) (BinOp (BinOp wxx Mult wyy) Sub (BinOp wxy Pow 2))) (Assign (__list__ trace) (BinOp wxx Add wyy)) (Assign (__list__ r) (BinOp det Sub (BinOp k Mult (BinOp trace Pow 2)))) (If (Compare r (__list__ Gt) (__list__ 0.5)) (__list__ (Expr (Call (Attribute corner_list append) (__list__ (List (__list__ x y r))))) (Expr (Call (Attribute color_img itemset) (__list__ (Tuple (__list__ y x 0)) 0))) (Expr (Call (Attribute color_img itemset) (__list__ (Tuple (__list__ y x 1)) 0))) (Expr (Call (Attribute color_img itemset) (__list__ (Tuple (__list__ y x 2)) 255))))))))) (Return (Tuple (__list__ color_img corner_list)))) (__list__ ) (Subscript tuple (Tuple (__list__ (Attribute cv2 Mat) (Subscript list (Subscript list int)))))))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_1)) (__list__ (Assign (__list__ edge_detect) (Call HarrisCorner (__list__ 0.04 3))) (Assign (__list__ (Tuple (__list__ color_img _))) (Call (Attribute edge_detect detect) (__list__ STRING_4))) (Expr (Call (Attribute cv2 imwrite) (__list__ STRING_4 color_img))))))",
    "(ProgramStatements (ImportFrom PIL (__list__ (alias Image)) 0) (Expr STRING_0) (FunctionDef mean_threshold (arguments (__list__ (arg image Image))) (__list__ (Expr STRING_1) (Assign (__list__ (Tuple (__list__ height width))) (Attribute image size)) (Assign (__list__ mean) 0) (Assign (__list__ pixels) (Call (Attribute image load))) (For i (Call range (__list__ width)) (__list__ (For j (Call range (__list__ height)) (__list__ (Assign (__list__ pixel) (Subscript pixels (Tuple (__list__ j i)))) (AugAssign mean Add pixel))))) (AugAssign mean FloorDiv (BinOp width Mult height)) (For j (Call range (__list__ width)) (__list__ (For i (Call range (__list__ height)) (__list__ (Assign (__list__ (Subscript pixels (Tuple (__list__ i j)))) (IfExp (Compare (Subscript pixels (Tuple (__list__ i j))) (__list__ Gt) (__list__ mean)) 255 0)))))) (Return image)) (__list__ ) Image) (If (Compare __name__ (__list__ Eq) (__list__ STRING_1)) (__list__ (Assign (__list__ image) (Call mean_threshold (__list__ (Call (Attribute (Call (Attribute Image open) (__list__ STRING_4)) convert) (__list__ STRING_2))))) (Expr (Call (Attribute image save) (__list__ STRING_3))))))",
    "(ProgramStatements )",
    "(ProgramStatements (Import (__list__ (alias glob))) (Import (__list__ (alias os))) (Import (__list__ (alias random))) (ImportFrom string (__list__ (alias ascii_lowercase) (alias digits)) 0) (Import (__list__ (alias cv2))) (Expr STRING_0) (Assign (__list__ LABEL_DIR) STRING_1) (Assign (__list__ IMAGE_DIR) STRING_1) (Assign (__list__ OUTPUT_DIR) STRING_1) (Assign (__list__ FLIP_TYPE) 1) (FunctionDef main arguments (__list__ (Expr STRING_2) (Assign (__list__ (Tuple (__list__ img_paths annos))) (Call get_dataset (__list__ LABEL_DIR IMAGE_DIR))) (Expr (Call print (__list__ STRING_3))) (Assign (__list__ (Tuple (__list__ new_images new_annos paths))) (Call update_image_and_anno (__list__ img_paths annos FLIP_TYPE))) (For (Tuple (__list__ index image)) (Call enumerate (__list__ new_images)) (__list__ (Assign (__list__ letter_code) (Call random_chars (__list__ 32))) (Assign (__list__ file_name) (Subscript (Call (Attribute (Subscript (Call (Attribute (Subscript paths index) split) (__list__ (Attribute os sep))) (UnaryOp USub 1)) rsplit) (__list__ STRING_4 1)) 0)) (Assign (__list__ file_root) (JoinedStr (__list__ (FormattedValue OUTPUT_DIR -1) STRING_5 (FormattedValue file_name -1) STRING_6 (FormattedValue letter_code -1)))) (Expr (Call (Attribute cv2 imwrite) (__list__ (JoinedStr (__list__ (FormattedValue file_root -1) STRING_7)) image (List (__list__ (Attribute cv2 IMWRITE_JPEG_QUALITY) 85))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_8 (FormattedValue (BinOp index Add 1) -1) STRING_5 (FormattedValue (Call len (__list__ new_images)) -1) STRING_9 (FormattedValue file_name -1)))))) (Assign (__list__ annos_list) List) (For anno (Subscript new_annos index) (__list__ (Assign (__list__ obj) (JoinedStr (__list__ (FormattedValue (Subscript anno 0) -1) STRING_10 (FormattedValue (Subscript anno 1) -1) STRING_10 (FormattedValue (Subscript anno 2) -1) STRING_10 (FormattedValue (Subscript anno 3) -1) STRING_10 (FormattedValue (Subscript anno 4) -1)))) (Expr (Call (Attribute annos_list append) (__list__ obj))))) (With (__list__ (withitem (Call open (__list__ (JoinedStr (__list__ (FormattedValue file_root -1) STRING_11)) STRING_12)) outfile)) (__list__ (Expr (Call (Attribute outfile write) (__list__ (Call (Attribute STRING_13 join) (__list__ (GeneratorExp line (__list__ (comprehension line annos_list 0))))))))))))) (__list__ ) None) (FunctionDef get_dataset (arguments (__list__ (arg label_dir str) (arg img_dir str))) (__list__ (Expr STRING_14) (Assign (__list__ img_paths) List) (Assign (__list__ labels) List) (For label_file (Call (Attribute glob glob) (__list__ (Call (Attribute (Attribute os path) join) (__list__ label_dir STRING_15)))) (__list__ (Assign (__list__ label_name) (Subscript (Call (Attribute (Subscript (Call (Attribute label_file split) (__list__ (Attribute os sep))) (UnaryOp USub 1)) rsplit) (__list__ STRING_4 1)) 0)) (With (__list__ (withitem (Call open (__list__ label_file)) in_file)) (__list__ (Assign (__list__ obj_lists) (Call (Attribute in_file readlines))))) (Assign (__list__ img_path) (Call (Attribute (Attribute os path) join) (__list__ img_dir (JoinedStr (__list__ (FormattedValue label_name -1) STRING_7))))) (Assign (__list__ boxes) List) (For obj_list obj_lists (__list__ (Assign (__list__ obj) (Call (Attribute (Call (Attribute obj_list rstrip) (__list__ STRING_13)) split) (__list__ STRING_10))) (Expr (Call (Attribute boxes append) (__list__ (List (__list__ (Call int (__list__ (Subscript obj 0))) (Call float (__list__ (Subscript obj 1))) (Call float (__list__ (Subscript obj 2))) (Call float (__list__ (Subscript obj 3))) (Call float (__list__ (Subscript obj 4)))))))))) (If (UnaryOp Not boxes) (__list__ Continue)) (Expr (Call (Attribute img_paths append) (__list__ img_path))) (Expr (Call (Attribute labels append) (__list__ boxes))))) (Return (Tuple (__list__ img_paths labels)))) (__list__ ) (Subscript tuple (Tuple (__list__ list list)))) (FunctionDef update_image_and_anno (arguments (__list__ (arg img_list list) (arg anno_list list) (arg flip_type int)) (__list__ 1)) (__list__ (Expr STRING_16) (Assign (__list__ new_annos_lists) List) (Assign (__list__ path_list) List) (Assign (__list__ new_imgs_list) List) (For idx (Call range (__list__ (Call len (__list__ img_list)))) (__list__ (Assign (__list__ new_annos) List) (Assign (__list__ path) (Subscript img_list idx)) (Expr (Call (Attribute path_list append) (__list__ path))) (Assign (__list__ img_annos) (Subscript anno_list idx)) (Assign (__list__ img) (Call (Attribute cv2 imread) (__list__ path))) (If (Compare flip_type (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ new_img) (Call (Attribute cv2 flip) (__list__ img flip_type))) (For bbox img_annos (__list__ (Assign (__list__ x_center_new) (BinOp 1 Sub (Subscript bbox 1))) (Expr (Call (Attribute new_annos append) (__list__ (List (__list__ (Subscript bbox 0) x_center_new (Subscript bbox 2) (Subscript bbox 3) (Subscript bbox 4))))))))) (__list__ (If (Compare flip_type (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ new_img) (Call (Attribute cv2 flip) (__list__ img flip_type))) (For bbox img_annos (__list__ (Assign (__list__ y_center_new) (BinOp 1 Sub (Subscript bbox 2))) (Expr (Call (Attribute new_annos append) (__list__ (List (__list__ (Subscript bbox 0) (Subscript bbox 1) y_center_new (Subscript bbox 3) (Subscript bbox 4)))))))))))) (Expr (Call (Attribute new_annos_lists append) (__list__ new_annos))) (Expr (Call (Attribute new_imgs_list append) (__list__ new_img))))) (Return (Tuple (__list__ new_imgs_list new_annos_lists path_list)))) (__list__ ) (Subscript tuple (Tuple (__list__ list list list)))) (FunctionDef random_chars (arguments (__list__ (arg number_char int)) (__list__ 32)) (__list__ (Expr STRING_17) (Assert (Compare number_char (__list__ Gt) (__list__ 1)) STRING_18) (Assign (__list__ letter_code) (BinOp ascii_lowercase Add digits)) (Return (Call (Attribute STRING_1 join) (__list__ (GeneratorExp (Call (Attribute random choice) (__list__ letter_code)) (__list__ (comprehension _ (Call range (__list__ number_char)) 0))))))) (__list__ ) str) (If (Compare __name__ (__list__ Eq) (__list__ STRING_1)) (__list__ (Expr (Call main)) (Expr (Call print (__list__ STRING_19))))))",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias glob))) (Import (__list__ (alias os))) (Import (__list__ (alias random))) (ImportFrom string (__list__ (alias ascii_lowercase) (alias digits)) 0) (Import (__list__ (alias cv2))) (Import (__list__ (alias numpy np))) (Assign (__list__ OUTPUT_SIZE) (Tuple (__list__ 720 1280))) (Assign (__list__ SCALE_RANGE) (Tuple (__list__ 0.4 0.6))) (Assign (__list__ FILTER_TINY_SCALE) (BinOp 1 Div 100)) (Assign (__list__ LABEL_DIR) STRING_1) (Assign (__list__ IMG_DIR) STRING_1) (Assign (__list__ OUTPUT_DIR) STRING_1) (Assign (__list__ NUMBER_IMAGES) 250) (FunctionDef main arguments (__list__ (Expr STRING_2) (Assign (__list__ (Tuple (__list__ img_paths annos))) (Call get_dataset (__list__ LABEL_DIR IMG_DIR))) (For index (Call range (__list__ NUMBER_IMAGES)) (__list__ (Assign (__list__ idxs) (Call (Attribute random sample) (__list__ (Call range (__list__ (Call len (__list__ annos)))) 4))) (Assign (__list__ (Tuple (__list__ new_image new_annos path))) (Call update_image_and_anno (__list__ img_paths annos idxs OUTPUT_SIZE SCALE_RANGE) (__list__ (keyword filter_scale FILTER_TINY_SCALE)))) (Assign (__list__ letter_code) (Call random_chars (__list__ 32))) (Assign (__list__ file_name) (Subscript (Call (Attribute (Subscript (Call (Attribute path split) (__list__ (Attribute os sep))) (UnaryOp USub 1)) rsplit) (__list__ STRING_4 1)) 0)) (Assign (__list__ file_root) (JoinedStr (__list__ (FormattedValue OUTPUT_DIR -1) STRING_5 (FormattedValue file_name -1) STRING_1 (FormattedValue letter_code -1)))) (Expr (Call (Attribute cv2 imwrite) (__list__ (JoinedStr (__list__ (FormattedValue file_root -1) STRING_7)) new_image (List (__list__ (Attribute cv2 IMWRITE_JPEG_QUALITY) 85))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_2 (FormattedValue (BinOp index Add 1) -1) STRING_5 (FormattedValue NUMBER_IMAGES -1) STRING_9 (FormattedValue file_name -1)))))) (Assign (__list__ annos_list) List) (For anno new_annos (__list__ (Assign (__list__ width) (BinOp (Subscript anno 3) Sub (Subscript anno 1))) (Assign (__list__ height) (BinOp (Subscript anno 4) Sub (Subscript anno 2))) (Assign (__list__ x_center) (BinOp (Subscript anno 1) Add (BinOp width Div 2))) (Assign (__list__ y_center) (BinOp (Subscript anno 2) Add (BinOp height Div 2))) (Assign (__list__ obj) (JoinedStr (__list__ (FormattedValue (Subscript anno 0) -1) STRING_10 (FormattedValue x_center -1) STRING_10 (FormattedValue y_center -1) STRING_10 (FormattedValue width -1) STRING_10 (FormattedValue height -1)))) (Expr (Call (Attribute annos_list append) (__list__ obj))))) (With (__list__ (withitem (Call open (__list__ (JoinedStr (__list__ (FormattedValue file_root -1) STRING_11)) STRING_12)) outfile)) (__list__ (Expr (Call (Attribute outfile write) (__list__ (Call (Attribute STRING_13 join) (__list__ (GeneratorExp line (__list__ (comprehension line annos_list 0))))))))))))) (__list__ ) None) (FunctionDef get_dataset (arguments (__list__ (arg label_dir str) (arg img_dir str))) (__list__ (Expr STRING_14) (Assign (__list__ img_paths) List) (Assign (__list__ labels) List) (For label_file (Call (Attribute glob glob) (__list__ (Call (Attribute (Attribute os path) join) (__list__ label_dir STRING_15)))) (__list__ (Assign (__list__ label_name) (Subscript (Call (Attribute (Subscript (Call (Attribute label_file split) (__list__ (Attribute os sep))) (UnaryOp USub 1)) rsplit) (__list__ STRING_4 1)) 0)) (With (__list__ (withitem (Call open (__list__ label_file)) in_file)) (__list__ (Assign (__list__ obj_lists) (Call (Attribute in_file readlines))))) (Assign (__list__ img_path) (Call (Attribute (Attribute os path) join) (__list__ img_dir (JoinedStr (__list__ (FormattedValue label_name -1) STRING_7))))) (Assign (__list__ boxes) List) (For obj_list obj_lists (__list__ (Assign (__list__ obj) (Call (Attribute (Call (Attribute obj_list rstrip) (__list__ STRING_13)) split) (__list__ STRING_10))) (Assign (__list__ xmin) (BinOp (Call float (__list__ (Subscript obj 1))) Sub (BinOp (Call float (__list__ (Subscript obj 3))) Div 2))) (Assign (__list__ ymin) (BinOp (Call float (__list__ (Subscript obj 2))) Sub (BinOp (Call float (__list__ (Subscript obj 4))) Div 2))) (Assign (__list__ xmax) (BinOp (Call float (__list__ (Subscript obj 1))) Add (BinOp (Call float (__list__ (Subscript obj 3))) Div 2))) (Assign (__list__ ymax) (BinOp (Call float (__list__ (Subscript obj 2))) Add (BinOp (Call float (__list__ (Subscript obj 4))) Div 2))) (Expr (Call (Attribute boxes append) (__list__ (List (__list__ (Call int (__list__ (Subscript obj 0))) xmin ymin xmax ymax))))))) (If (UnaryOp Not boxes) (__list__ Continue)) (Expr (Call (Attribute img_paths append) (__list__ img_path))) (Expr (Call (Attribute labels append) (__list__ boxes))))) (Return (Tuple (__list__ img_paths labels)))) (__list__ ) (Subscript tuple (Tuple (__list__ list list)))) (FunctionDef update_image_and_anno (arguments (__list__ (arg all_img_list list) (arg all_annos list) (arg idxs (Subscript list int)) (arg output_size (Subscript tuple (Tuple (__list__ int int)))) (arg scale_range (Subscript tuple (Tuple (__list__ float float)))) (arg filter_scale float)) (__list__ 0.0)) (__list__ (Expr STRING_3) (Assign (__list__ output_img) (Call (Attribute np zeros) (__list__ (List (__list__ (Subscript output_size 0) (Subscript output_size 1) 3))) (__list__ (keyword dtype (Attribute np uint8))))) (Assign (__list__ scale_x) (BinOp (Subscript scale_range 0) Add (BinOp (Call (Attribute random random)) Mult (BinOp (Subscript scale_range 1) Sub (Subscript scale_range 0))))) (Assign (__list__ scale_y) (BinOp (Subscript scale_range 0) Add (BinOp (Call (Attribute random random)) Mult (BinOp (Subscript scale_range 1) Sub (Subscript scale_range 0))))) (Assign (__list__ divid_point_x) (Call int (__list__ (BinOp scale_x Mult (Subscript output_size 1))))) (Assign (__list__ divid_point_y) (Call int (__list__ (BinOp scale_y Mult (Subscript output_size 0))))) (Assign (__list__ new_anno) List) (Assign (__list__ path_list) List) (For (Tuple (__list__ i index)) (Call enumerate (__list__ idxs)) (__list__ (Assign (__list__ path) (Subscript all_img_list index)) (Expr (Call (Attribute path_list append) (__list__ path))) (Assign (__list__ img_annos) (Subscript all_annos index)) (Assign (__list__ img) (Call (Attribute cv2 imread) (__list__ path))) (If (Compare i (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ img) (Call (Attribute cv2 resize) (__list__ img (Tuple (__list__ divid_point_x divid_point_y))))) (Assign (__list__ (Subscript output_img (Tuple (__list__ (Slice divid_point_y) (Slice divid_point_x) Slice)))) img) (For bbox img_annos (__list__ (Assign (__list__ xmin) (BinOp (Subscript bbox 1) Mult scale_x)) (Assign (__list__ ymin) (BinOp (Subscript bbox 2) Mult scale_y)) (Assign (__list__ xmax) (BinOp (Subscript bbox 3) Mult scale_x)) (Assign (__list__ ymax) (BinOp (Subscript bbox 4) Mult scale_y)) (Expr (Call (Attribute new_anno append) (__list__ (List (__list__ (Subscript bbox 0) xmin ymin xmax ymax)))))))) (__list__ (If (Compare i (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ img) (Call (Attribute cv2 resize) (__list__ img (Tuple (__list__ (BinOp (Subscript output_size 1) Sub divid_point_x) divid_point_y))))) (Assign (__list__ (Subscript output_img (Tuple (__list__ (Slice divid_point_y) (Slice divid_point_x (Subscript output_size 1)) Slice)))) img) (For bbox img_annos (__list__ (Assign (__list__ xmin) (BinOp scale_x Add (BinOp (Subscript bbox 1) Mult (BinOp 1 Sub scale_x)))) (Assign (__list__ ymin) (BinOp (Subscript bbox 2) Mult scale_y)) (Assign (__list__ xmax) (BinOp scale_x Add (BinOp (Subscript bbox 3) Mult (BinOp 1 Sub scale_x)))) (Assign (__list__ ymax) (BinOp (Subscript bbox 4) Mult scale_y)) (Expr (Call (Attribute new_anno append) (__list__ (List (__list__ (Subscript bbox 0) xmin ymin xmax ymax)))))))) (__list__ (If (Compare i (__list__ Eq) (__list__ 2)) (__list__ (Assign (__list__ img) (Call (Attribute cv2 resize) (__list__ img (Tuple (__list__ divid_point_x (BinOp (Subscript output_size 0) Sub divid_point_y)))))) (Assign (__list__ (Subscript output_img (Tuple (__list__ (Slice divid_point_y (Subscript output_size 0)) (Slice divid_point_x) Slice)))) img) (For bbox img_annos (__list__ (Assign (__list__ xmin) (BinOp (Subscript bbox 1) Mult scale_x)) (Assign (__list__ ymin) (BinOp scale_y Add (BinOp (Subscript bbox 2) Mult (BinOp 1 Sub scale_y)))) (Assign (__list__ xmax) (BinOp (Subscript bbox 3) Mult scale_x)) (Assign (__list__ ymax) (BinOp scale_y Add (BinOp (Subscript bbox 4) Mult (BinOp 1 Sub scale_y)))) (Expr (Call (Attribute new_anno append) (__list__ (List (__list__ (Subscript bbox 0) xmin ymin xmax ymax)))))))) (__list__ (Assign (__list__ img) (Call (Attribute cv2 resize) (__list__ img (Tuple (__list__ (BinOp (Subscript output_size 1) Sub divid_point_x) (BinOp (Subscript output_size 0) Sub divid_point_y)))))) (Assign (__list__ (Subscript output_img (Tuple (__list__ (Slice divid_point_y (Subscript output_size 0)) (Slice divid_point_x (Subscript output_size 1)) Slice)))) img) (For bbox img_annos (__list__ (Assign (__list__ xmin) (BinOp scale_x Add (BinOp (Subscript bbox 1) Mult (BinOp 1 Sub scale_x)))) (Assign (__list__ ymin) (BinOp scale_y Add (BinOp (Subscript bbox 2) Mult (BinOp 1 Sub scale_y)))) (Assign (__list__ xmax) (BinOp scale_x Add (BinOp (Subscript bbox 3) Mult (BinOp 1 Sub scale_x)))) (Assign (__list__ ymax) (BinOp scale_y Add (BinOp (Subscript bbox 4) Mult (BinOp 1 Sub scale_y)))) (Expr (Call (Attribute new_anno append) (__list__ (List (__list__ (Subscript bbox 0) xmin ymin xmax ymax))))))))))))))) (If (Compare filter_scale (__list__ Gt) (__list__ 0)) (__list__ (Assign (__list__ new_anno) (ListComp anno (__list__ (comprehension anno new_anno (__list__ (BoolOp And (__list__ (Compare filter_scale (__list__ Lt) (__list__ (BinOp (Subscript anno 3) Sub (Subscript anno 1)))) (Compare filter_scale (__list__ Lt) (__list__ (BinOp (Subscript anno 4) Sub (Subscript anno 2))))))) 0)))))) (Return (Tuple (__list__ output_img new_anno (Subscript path_list 0))))) (__list__ ) (Subscript tuple (Tuple (__list__ list list str)))) (FunctionDef random_chars (arguments (__list__ (arg number_char int))) (__list__ (Expr STRING_17) (Assert (Compare number_char (__list__ Gt) (__list__ 1)) STRING_18) (Assign (__list__ letter_code) (BinOp ascii_lowercase Add digits)) (Return (Call (Attribute STRING_1 join) (__list__ (GeneratorExp (Call (Attribute random choice) (__list__ letter_code)) (__list__ (comprehension _ (Call range (__list__ number_char)) 0))))))) (__list__ ) str) (If (Compare __name__ (__list__ Eq) (__list__ STRING_1)) (__list__ (Expr (Call main)) (Expr (Call print (__list__ STRING_19))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom typing (__list__ (alias SupportsIndex)) 0) (Import (__list__ (alias numpy np))) (ImportFrom scipy.ndimage (__list__ (alias convolve)) 0) (FunctionDef warp (arguments (__list__ (arg image (Attribute np ndarray)) (arg horizontal_flow (Attribute np ndarray)) (arg vertical_flow (Attribute np ndarray)))) (__list__ (Expr STRING_1) (Assign (__list__ flow) (Call (Attribute np stack) (__list__ (Tuple (__list__ horizontal_flow vertical_flow)) 2))) (Assign (__list__ grid) (Call (Attribute np stack) (__list__ (Call (Attribute np meshgrid) (__list__ (Call (Attribute np arange) (__list__ 0 (Subscript (Attribute image shape) 1))) (Call (Attribute np arange) (__list__ 0 (Subscript (Attribute image shape) 0))))) 2))) (Assign (__list__ grid) (Call (Attribute (Call (Attribute np round) (__list__ (BinOp grid Sub flow))) astype) (__list__ (Attribute np int32)))) (Assign (__list__ invalid) (BinOp (Compare grid (__list__ Lt) (__list__ 0)) BitOr (Compare grid (__list__ GtE) (__list__ (Call (Attribute np array) (__list__ (List (__list__ (Subscript (Attribute image shape) 1) (Subscript (Attribute image shape) 0))))))))) (Assign (__list__ (Subscript grid invalid)) 0) (Assign (__list__ warped) (Subscript image (Tuple (__list__ (Subscript grid (Tuple (__list__ Slice Slice 1))) (Subscript grid (Tuple (__list__ Slice Slice 0))))))) (Assign (__list__ (Subscript warped (BinOp (Subscript invalid (Tuple (__list__ Slice Slice 0))) BitOr (Subscript invalid (Tuple (__list__ Slice Slice 1)))))) 0) (Return warped)) (__list__ ) (Attribute np ndarray)) (FunctionDef horn_schunck (arguments (__list__ (arg image0 (Attribute np ndarray)) (arg image1 (Attribute np ndarray)) (arg num_iter SupportsIndex) (arg alpha (BinOp float BitOr None))) (__list__ None)) (__list__ (Expr STRING_2) (If (Compare alpha (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ alpha) 0.1))) (Assign (__list__ horizontal_flow) (Call (Attribute np zeros_like) (__list__ image0))) (Assign (__list__ vertical_flow) (Call (Attribute np zeros_like) (__list__ image0))) (Assign (__list__ kernel_x) (BinOp (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ (UnaryOp USub 1) 1)) (List (__list__ (UnaryOp USub 1) 1)))))) Mult 0.25)) (Assign (__list__ kernel_y) (BinOp (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ (UnaryOp USub 1) (UnaryOp USub 1))) (List (__list__ 1 1)))))) Mult 0.25)) (Assign (__list__ kernel_t) (BinOp (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ 1 1)) (List (__list__ 1 1)))))) Mult 0.25)) (Assign (__list__ kernel_laplacian) (Call (Attribute np array) (__list__ (List (__list__ (List (__list__ (BinOp 1 Div 12) (BinOp 1 Div 6) (BinOp 1 Div 12))) (List (__list__ (BinOp 1 Div 6) 0 (BinOp 1 Div 6))) (List (__list__ (BinOp 1 Div 12) (BinOp 1 Div 6) (BinOp 1 Div 12)))))))) (For _ (Call range (__list__ num_iter)) (__list__ (Assign (__list__ warped_image) (Call warp (__list__ image0 horizontal_flow vertical_flow))) (Assign (__list__ derivative_x) (BinOp (Call convolve (__list__ warped_image kernel_x)) Add (Call convolve (__list__ image1 kernel_x)))) (Assign (__list__ derivative_y) (BinOp (Call convolve (__list__ warped_image kernel_y)) Add (Call convolve (__list__ image1 kernel_y)))) (Assign (__list__ derivative_t) (BinOp (Call convolve (__list__ warped_image kernel_t)) Add (Call convolve (__list__ image1 (UnaryOp USub kernel_t))))) (Assign (__list__ avg_horizontal_velocity) (Call convolve (__list__ horizontal_flow kernel_laplacian))) (Assign (__list__ avg_vertical_velocity) (Call convolve (__list__ vertical_flow kernel_laplacian))) (Assign (__list__ update) (BinOp (BinOp (BinOp derivative_x Mult avg_horizontal_velocity) Add (BinOp derivative_y Mult avg_vertical_velocity)) Add derivative_t)) (Assign (__list__ update) (BinOp update Div (BinOp (BinOp (BinOp alpha Pow 2) Add (BinOp derivative_x Pow 2)) Add (BinOp derivative_y Pow 2)))) (Assign (__list__ horizontal_flow) (BinOp avg_horizontal_velocity Sub (BinOp derivative_x Mult update))) (Assign (__list__ vertical_flow) (BinOp avg_vertical_velocity Sub (BinOp derivative_y Mult update))))) (Return (Tuple (__list__ horizontal_flow vertical_flow)))) (__list__ ) (Subscript tuple (Tuple (__list__ (Attribute np ndarray) (Attribute np ndarray))))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_1)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias imageio.v2 imageio))) (Import (__list__ (alias numpy np))) (FunctionDef root_mean_square_error (arguments (__list__ (arg original (Attribute np ndarray)) (arg reference (Attribute np ndarray)))) (__list__ (Expr STRING_1) (Return (Call (Attribute np sqrt) (__list__ (Call (Attribute (BinOp (BinOp original Sub reference) Pow 2) mean)))))) (__list__ ) float) (FunctionDef normalize_image (arguments (__list__ (arg image (Attribute np ndarray)) (arg cap float) (arg data_type (Attribute np dtype))) (__list__ 255.0 (Attribute np uint8))) (__list__ (Expr STRING_2) (Assign (__list__ normalized) (BinOp (BinOp (BinOp image Sub (Call (Attribute np min) (__list__ image))) Div (BinOp (Call (Attribute np max) (__list__ image)) Sub (Call (Attribute np min) (__list__ image)))) Mult cap)) (Return (Call (Attribute normalized astype) (__list__ data_type)))) (__list__ ) (Attribute np ndarray)) (FunctionDef normalize_array (arguments (__list__ (arg array (Attribute np ndarray)) (arg cap float)) (__list__ 1)) (__list__ (Expr STRING_3) (Assign (__list__ diff) (BinOp (Call (Attribute np max) (__list__ array)) Sub (Call (Attribute np min) (__list__ array)))) (Return (BinOp (BinOp (BinOp array Sub (Call (Attribute np min) (__list__ array))) Div (IfExp (Compare diff (__list__ Eq) (__list__ 0)) 1 diff)) Mult cap))) (__list__ ) (Attribute np ndarray)) (FunctionDef grayscale (arguments (__list__ (arg image (Attribute np ndarray)))) (__list__ (Expr STRING_4) (Return (Call (Attribute (Call (Attribute np dot) (__list__ (Subscript image (Tuple (__list__ Slice Slice (Slice 0 3)))) (List (__list__ 0.299 0.587 0.114)))) astype) (__list__ (Attribute np uint8))))) (__list__ ) (Attribute np ndarray)) (FunctionDef binarize (arguments (__list__ (arg image (Attribute np ndarray)) (arg threshold float)) (__list__ 127.0)) (__list__ (Expr STRING_5) (Return (Call (Attribute np where) (__list__ (Compare image (__list__ Gt) (__list__ threshold)) 1 0)))) (__list__ ) (Attribute np ndarray)) (FunctionDef transform (arguments (__list__ (arg image (Attribute np ndarray)) (arg kind str) (arg kernel (BinOp (Attribute np ndarray) BitOr None))) (__list__ None)) (__list__ (Expr STRING_6) (If (Compare kernel (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ kernel) (Call (Attribute np ones) (__list__ (Tuple (__list__ 3 3))))))) (If (Compare kind (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ constant) 1) (Assign (__list__ apply) (Attribute np max))) (__list__ (Assign (__list__ constant) 0) (Assign (__list__ apply) (Attribute np min)))) (Assign (__list__ (Tuple (__list__ center_x center_y))) (GeneratorExp (BinOp x FloorDiv 2) (__list__ (comprehension x (Attribute kernel shape) 0)))) (Assign (__list__ transformed) (Call (Attribute np zeros) (__list__ (Attribute image shape)) (__list__ (keyword dtype (Attribute np uint8))))) (Assign (__list__ padded) (Call (Attribute np pad) (__list__ image 1 STRING_8) (__list__ (keyword constant_values constant)))) (For x (Call range (__list__ center_x (BinOp (Subscript (Attribute padded shape) 0) Sub center_x))) (__list__ (For y (Call range (__list__ center_y (BinOp (Subscript (Attribute padded shape) 1) Sub center_y))) (__list__ (Assign (__list__ center) (Subscript padded (Tuple (__list__ (Slice (BinOp x Sub center_x) (BinOp (BinOp x Add center_x) Add 1)) (Slice (BinOp y Sub center_y) (BinOp (BinOp y Add center_y) Add 1)))))) (Assign (__list__ (Subscript transformed (Tuple (__list__ (BinOp x Sub center_x) (BinOp y Sub center_y))))) (Call apply (__list__ (Subscript center (Compare kernel (__list__ Eq) (__list__ 1)))))))))) (Return transformed)) (__list__ ) (Attribute np ndarray)) (FunctionDef opening_filter (arguments (__list__ (arg image (Attribute np ndarray)) (arg kernel (BinOp (Attribute np ndarray) BitOr None))) (__list__ None)) (__list__ (Expr STRING_9) (If (Compare kernel (__list__ Is) (__list__ None)) (__list__ (Expr (Call (Attribute np ones) (__list__ (Tuple (__list__ 3 3))))))) (Return (Call transform (__list__ (Call transform (__list__ image STRING_10 kernel)) STRING_7 kernel)))) (__list__ ) (Attribute np ndarray)) (FunctionDef closing_filter (arguments (__list__ (arg image (Attribute np ndarray)) (arg kernel (BinOp (Attribute np ndarray) BitOr None))) (__list__ None)) (__list__ (Expr STRING_11) (If (Compare kernel (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ kernel) (Call (Attribute np ones) (__list__ (Tuple (__list__ 3 3))))))) (Return (Call transform (__list__ (Call transform (__list__ image STRING_7 kernel)) STRING_10 kernel)))) (__list__ ) (Attribute np ndarray)) (FunctionDef binary_mask (arguments (__list__ (arg image_gray (Attribute np ndarray)) (arg image_map (Attribute np ndarray)))) (__list__ (Expr STRING_12) (Assign (__list__ (Tuple (__list__ true_mask false_mask))) (Tuple (__list__ (Call (Attribute image_gray copy)) (Call (Attribute image_gray copy))))) (Assign (__list__ (Subscript true_mask (Compare image_map (__list__ Eq) (__list__ 1)))) 1) (Assign (__list__ (Subscript false_mask (Compare image_map (__list__ Eq) (__list__ 0)))) 0) (Return (Tuple (__list__ true_mask false_mask)))) (__list__ ) (Subscript tuple (Tuple (__list__ (Attribute np ndarray) (Attribute np ndarray))))) (FunctionDef matrix_concurrency (arguments (__list__ (arg image (Attribute np ndarray)) (arg coordinate (Subscript tuple (Tuple (__list__ int int)))))) (__list__ (Expr STRING_13) (Assign (__list__ matrix) (Call (Attribute np zeros) (__list__ (List (__list__ (BinOp (Call (Attribute np max) (__list__ image)) Add 1) (BinOp (Call (Attribute np max) (__list__ image)) Add 1)))))) (Assign (__list__ (Tuple (__list__ offset_x offset_y))) coordinate) (For x (Call range (__list__ 1 (BinOp (Subscript (Attribute image shape) 0) Sub 1))) (__list__ (For y (Call range (__list__ 1 (BinOp (Subscript (Attribute image shape) 1) Sub 1))) (__list__ (Assign (__list__ base_pixel) (Subscript image (Tuple (__list__ x y)))) (Assign (__list__ offset_pixel) (Subscript image (Tuple (__list__ (BinOp x Add offset_x) (BinOp y Add offset_y))))) (AugAssign (Subscript matrix (Tuple (__list__ base_pixel offset_pixel))) Add 1))))) (Assign (__list__ matrix_sum) (Call (Attribute np sum) (__list__ matrix))) (Return (BinOp matrix Div (IfExp (Compare matrix_sum (__list__ Eq) (__list__ 0)) 1 matrix_sum)))) (__list__ ) (Attribute np ndarray)) (FunctionDef haralick_descriptors (arguments (__list__ (arg matrix (Attribute np ndarray)))) (__list__ (Expr STRING_14) (Assign (__list__ (Tuple (__list__ i j))) (Subscript (Attribute np ogrid) (Tuple (__list__ (Slice 0 (Subscript (Attribute matrix shape) 0)) (Slice 0 (Subscript (Attribute matrix shape) 1)))))) (Assign (__list__ prod) (Call (Attribute np multiply) (__list__ i j))) (Assign (__list__ sub) (Call (Attribute np subtract) (__list__ i j))) (Assign (__list__ maximum_prob) (Call (Attribute np max) (__list__ matrix))) (Assign (__list__ correlation) (BinOp prod Mult matrix)) (Assign (__list__ energy) (Call (Attribute np power) (__list__ matrix 2))) (Assign (__list__ contrast) (BinOp matrix Mult (Call (Attribute np power) (__list__ sub 2)))) (Assign (__list__ dissimilarity) (BinOp matrix Mult (Call (Attribute np abs) (__list__ sub)))) (Assign (__list__ inverse_difference) (BinOp matrix Div (BinOp 1 Add (Call (Attribute np abs) (__list__ sub))))) (Assign (__list__ homogeneity) (BinOp matrix Div (BinOp 1 Add (Call (Attribute np power) (__list__ sub 2))))) (Assign (__list__ entropy) (UnaryOp USub (BinOp (Subscript matrix (Compare matrix (__list__ Gt) (__list__ 0))) Mult (Call (Attribute np log) (__list__ (Subscript matrix (Compare matrix (__list__ Gt) (__list__ 0)))))))) (Return (List (__list__ maximum_prob (Call (Attribute correlation sum)) (Call (Attribute energy sum)) (Call (Attribute contrast sum)) (Call (Attribute dissimilarity sum)) (Call (Attribute inverse_difference sum)) (Call (Attribute homogeneity sum)) (Call (Attribute entropy sum)))))) (__list__ ) (Subscript list float)) (FunctionDef get_descriptors (arguments (__list__ (arg masks (Subscript tuple (Tuple (__list__ (Attribute np ndarray) (Attribute np ndarray))))) (arg coordinate (Subscript tuple (Tuple (__list__ int int)))))) (__list__ (Expr STRING_15) (Assign (__list__ descriptors) (Call (Attribute np array) (__list__ (ListComp (Call haralick_descriptors (__list__ (Call matrix_concurrency (__list__ mask coordinate)))) (__list__ (comprehension mask masks 0)))))) (Return (Call (Attribute np concatenate) (__list__ descriptors) (__list__ (keyword axis None))))) (__list__ ) (Attribute np ndarray)) (FunctionDef euclidean (arguments (__list__ (arg point_1 (Attribute np ndarray)) (arg point_2 (Attribute np ndarray)))) (__list__ (Expr STRING_16) (Return (Call (Attribute np sqrt) (__list__ (Call (Attribute np sum) (__list__ (Call (Attribute np square) (__list__ (BinOp point_1 Sub point_2))))))))) (__list__ ) (Attribute np float32)) (FunctionDef get_distances (arguments (__list__ (arg descriptors (Attribute np ndarray)) (arg base int))) (__list__ (Expr STRING_17) (Assign (__list__ distances) (Call (Attribute np array) (__list__ (ListComp (Call euclidean (__list__ descriptor (Subscript descriptors base))) (__list__ (comprehension descriptor descriptors 0)))))) (AnnAssign normalized_distances (Subscript list float) (Call (Attribute (Call normalize_array (__list__ distances 1)) tolist)) 1) (Assign (__list__ enum_distances) (Call list (__list__ (Call enumerate (__list__ normalized_distances))))) (Expr (Call (Attribute enum_distances sort) (__list__ (keyword key (Lambda (arguments (__list__ (arg tup))) (Subscript tup 1))) (keyword reverse True)))) (Return enum_distances)) (__list__ ) (Subscript list (Subscript tuple (Tuple (__list__ int float))))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_1)) (__list__ (Assign (__list__ index) (Call int (__list__ (Call input)))) (Assign (__list__ q_value_list) (ListComp (Call int (__list__ value)) (__list__ (comprehension value (Call (Attribute (Call input) split)) 0)))) (Assign (__list__ q_value) (Tuple (__list__ (Subscript q_value_list 0) (Subscript q_value_list 1)))) (Assign (__list__ parameters) (Dict (__list__ STRING_18 STRING_19) (__list__ (Call int (__list__ (Call input))) (Call int (__list__ (Call input)))))) (Assign (__list__ b_number) (Call int (__list__ (Call input)))) (Assign (__list__ (Tuple (__list__ files descriptors))) (Tuple (__list__ List List))) (For _ (Call range (__list__ b_number)) (__list__ (Assign (__list__ file) (Call (Attribute (Call input) rstrip))) (Expr (Call (Attribute files append) (__list__ file))) (Assign (__list__ image) (Call (Attribute (Call (Attribute imageio imread) (__list__ file)) astype) (__list__ (Attribute np float32)))) (Assign (__list__ gray) (Call grayscale (__list__ image))) (Assign (__list__ threshold) (Call binarize (__list__ gray (Subscript parameters STRING_19)))) (Assign (__list__ morphological) (IfExp (Compare (Subscript parameters STRING_18) (__list__ Eq) (__list__ 1)) (Call opening_filter (__list__ threshold)) (Call closing_filter (__list__ threshold)))) (Assign (__list__ masks) (Call binary_mask (__list__ gray morphological))) (Expr (Call (Attribute descriptors append) (__list__ (Call get_descriptors (__list__ masks q_value))))))) (Assign (__list__ distances) (Call get_distances (__list__ (Call (Attribute np array) (__list__ descriptors)) index))) (Assign (__list__ indexed_distances) (Subscript (Call (Attribute (Call (Attribute np array) (__list__ distances)) astype) (__list__ (Attribute np uint8))) (Tuple (__list__ Slice 0)))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_20 (FormattedValue (Subscript files index) -1)))))) (Expr (Call print (__list__ STRING_21))) (For (Tuple (__list__ idx file_idx)) (Call enumerate (__list__ indexed_distances)) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ STRING_22 (FormattedValue idx -1) STRING_23 (FormattedValue (Subscript files file_idx) -1)))) (__list__ (keyword end STRING_13)))))))))"
]