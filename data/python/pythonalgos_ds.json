[
    "(ProgramStatements )",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data int))) (__list__ (Assign (__list__ (Attribute self data)) data) (AnnAssign (Attribute self rank) int 0) (AnnAssign (Attribute self parent) Node 0)) (__list__ ) None))) (FunctionDef make_set (arguments (__list__ (arg x Node))) (__list__ (Expr STRING_1) (Assign (__list__ (Attribute x rank)) 0) (Assign (__list__ (Attribute x parent)) x)) (__list__ ) None) (FunctionDef union_set (arguments (__list__ (arg x Node) (arg y Node))) (__list__ (Expr STRING_2) (Assign (__list__ (Tuple (__list__ x y))) (Tuple (__list__ (Call find_set (__list__ x)) (Call find_set (__list__ y))))) (If (Compare x (__list__ Eq) (__list__ y)) (__list__ Return) (__list__ (If (Compare (Attribute x rank) (__list__ Gt) (__list__ (Attribute y rank))) (__list__ (Assign (__list__ (Attribute y parent)) x)) (__list__ (Assign (__list__ (Attribute x parent)) y) (If (Compare (Attribute x rank) (__list__ Eq) (__list__ (Attribute y rank))) (__list__ (AugAssign (Attribute y rank) Add 1)))))))) (__list__ ) None) (FunctionDef find_set (arguments (__list__ (arg x Node))) (__list__ (Expr STRING_3) (If (Compare x (__list__ NotEq) (__list__ (Attribute x parent))) (__list__ (Assign (__list__ (Attribute x parent)) (Call find_set (__list__ (Attribute x parent)))))) (Return (Attribute x parent))) (__list__ ) Node) (FunctionDef find_python_set (arguments (__list__ (arg node Node))) (__list__ (Expr STRING_4) (Assign (__list__ sets) (Tuple (__list__ (Set (__list__ 0 1 2)) (Set (__list__ 3 4 5))))) (For s sets (__list__ (If (Compare (Attribute node data) (__list__ In) (__list__ s)) (__list__ (Return s))))) (Assign (__list__ msg) (JoinedStr (__list__ (FormattedValue (Attribute node data) -1) STRING_5 (FormattedValue sets -1)))) (Raise (Call ValueError (__list__ msg)))) (__list__ ) set) (FunctionDef test_disjoint_set arguments (__list__ (Expr STRING_6) (Assign (__list__ vertex) (ListComp (Call Node (__list__ i)) (__list__ (comprehension i (Call range (__list__ 6)) 0)))) (For v vertex (__list__ (Expr (Call make_set (__list__ v))))) (Expr (Call union_set (__list__ (Subscript vertex 0) (Subscript vertex 1)))) (Expr (Call union_set (__list__ (Subscript vertex 1) (Subscript vertex 2)))) (Expr (Call union_set (__list__ (Subscript vertex 3) (Subscript vertex 4)))) (Expr (Call union_set (__list__ (Subscript vertex 3) (Subscript vertex 5)))) (For node0 vertex (__list__ (For node1 vertex (__list__ (If (Call (Attribute (Call find_python_set (__list__ node0)) isdisjoint) (__list__ (Call find_python_set (__list__ node1)))) (__list__ (Assert (Compare (Call find_set (__list__ node0)) (__list__ NotEq) (__list__ (Call find_set (__list__ node1)))))) (__list__ (Assert (Compare (Call find_set (__list__ node0)) (__list__ Eq) (__list__ (Call find_set (__list__ node1)))))))))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call test_disjoint_set)))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef DisjointSet (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg set_counts list))) (__list__ (Expr STRING_1) (Assign (__list__ (Attribute self set_counts)) set_counts) (Assign (__list__ (Attribute self max_set)) (Call max (__list__ set_counts))) (Assign (__list__ num_sets) (Call len (__list__ set_counts))) (Assign (__list__ (Attribute self ranks)) (BinOp (List (__list__ 1)) Mult num_sets)) (Assign (__list__ (Attribute self parents)) (Call list (__list__ (Call range (__list__ num_sets)))))) (__list__ ) None) (FunctionDef merge (arguments (__list__ (arg self) (arg src int) (arg dst int))) (__list__ (Expr STRING_2) (Assign (__list__ src_parent) (Call (Attribute self get_parent) (__list__ src))) (Assign (__list__ dst_parent) (Call (Attribute self get_parent) (__list__ dst))) (If (Compare src_parent (__list__ Eq) (__list__ dst_parent)) (__list__ (Return False))) (If (Compare (Subscript (Attribute self ranks) dst_parent) (__list__ GtE) (__list__ (Subscript (Attribute self ranks) src_parent))) (__list__ (AugAssign (Subscript (Attribute self set_counts) dst_parent) Add (Subscript (Attribute self set_counts) src_parent)) (Assign (__list__ (Subscript (Attribute self set_counts) src_parent)) 0) (Assign (__list__ (Subscript (Attribute self parents) src_parent)) dst_parent) (If (Compare (Subscript (Attribute self ranks) dst_parent) (__list__ Eq) (__list__ (Subscript (Attribute self ranks) src_parent))) (__list__ (AugAssign (Subscript (Attribute self ranks) dst_parent) Add 1))) (Assign (__list__ joined_set_size) (Subscript (Attribute self set_counts) dst_parent))) (__list__ (AugAssign (Subscript (Attribute self set_counts) src_parent) Add (Subscript (Attribute self set_counts) dst_parent)) (Assign (__list__ (Subscript (Attribute self set_counts) dst_parent)) 0) (Assign (__list__ (Subscript (Attribute self parents) dst_parent)) src_parent) (Assign (__list__ joined_set_size) (Subscript (Attribute self set_counts) src_parent)))) (Assign (__list__ (Attribute self max_set)) (Call max (__list__ (Attribute self max_set) joined_set_size))) (Return True)) (__list__ ) bool) (FunctionDef get_parent (arguments (__list__ (arg self) (arg disj_set int))) (__list__ (Expr STRING_3) (If (Compare (Subscript (Attribute self parents) disj_set) (__list__ Eq) (__list__ disj_set)) (__list__ (Return disj_set))) (Assign (__list__ (Subscript (Attribute self parents) disj_set)) (Call (Attribute self get_parent) (__list__ (Subscript (Attribute self parents) disj_set)))) (Return (Subscript (Attribute self parents) disj_set))) (__list__ ) int))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (Assign (__list__ arr) (List (__list__ (UnaryOp USub 10) (UnaryOp USub 5) 0 5 5.1 11 13 21 3 4 (UnaryOp USub 21) (UnaryOp USub 10) (UnaryOp USub 5) (UnaryOp USub 1) 0))) (Assign (__list__ expect) (List (__list__ (UnaryOp USub 5) 0 5 5.1 11 13 21 (UnaryOp USub 1) 4 (UnaryOp USub 1) (UnaryOp USub 10) (UnaryOp USub 5) (UnaryOp USub 1) 0 (UnaryOp USub 1)))) (FunctionDef next_greatest_element_slow (arguments (__list__ (arg arr (Subscript list float)))) (__list__ (Expr STRING_0) (Assign (__list__ result) List) (Assign (__list__ arr_size) (Call len (__list__ arr))) (For i (Call range (__list__ arr_size)) (__list__ (AnnAssign next_element float (UnaryOp USub 1) 1) (For j (Call range (__list__ (BinOp i Add 1) arr_size)) (__list__ (If (Compare (Subscript arr i) (__list__ Lt) (__list__ (Subscript arr j))) (__list__ (Assign (__list__ next_element) (Subscript arr j)) Break)))) (Expr (Call (Attribute result append) (__list__ next_element))))) (Return result)) (__list__ ) (Subscript list float)) (FunctionDef next_greatest_element_fast (arguments (__list__ (arg arr (Subscript list float)))) (__list__ (Expr STRING_1) (Assign (__list__ result) List) (For (Tuple (__list__ i outer)) (Call enumerate (__list__ arr)) (__list__ (AnnAssign next_item float (UnaryOp USub 1) 1) (For inner (Subscript arr (Slice (BinOp i Add 1))) (__list__ (If (Compare outer (__list__ Lt) (__list__ inner)) (__list__ (Assign (__list__ next_item) inner) Break)))) (Expr (Call (Attribute result append) (__list__ next_item))))) (Return result)) (__list__ ) (Subscript list float)) (FunctionDef next_greatest_element (arguments (__list__ (arg arr (Subscript list float)))) (__list__ (Expr STRING_2) (Assign (__list__ arr_size) (Call len (__list__ arr))) (AnnAssign stack (Subscript list float) List 1) (AnnAssign result (Subscript list float) (BinOp (List (__list__ (UnaryOp USub 1))) Mult arr_size) 1) (For index (Call reversed (__list__ (Call range (__list__ arr_size)))) (__list__ (If stack (__list__ (While (Compare (Subscript stack (UnaryOp USub 1)) (__list__ LtE) (__list__ (Subscript arr index))) (__list__ (Expr (Call (Attribute stack pop))) (If (UnaryOp Not stack) (__list__ Break)))))) (If stack (__list__ (Assign (__list__ (Subscript result index)) (Subscript stack (UnaryOp USub 1))))) (Expr (Call (Attribute stack append) (__list__ (Subscript arr index)))))) (Return result)) (__list__ ) (Subscript list float)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (ImportFrom timeit (__list__ (alias timeit)) 0) (Expr (Call testmod)) (Expr (Call print (__list__ (Call next_greatest_element_slow (__list__ arr))))) (Expr (Call print (__list__ (Call next_greatest_element_fast (__list__ arr))))) (Expr (Call print (__list__ (Call next_greatest_element (__list__ arr))))) (Assign (__list__ setup) STRING_3) (Expr (Call print (__list__ STRING_4 (Call timeit (__list__ STRING_5) (__list__ (keyword setup setup)))))) (Expr (Call print (__list__ STRING_6 (Call timeit (__list__ STRING_7) (__list__ (keyword setup setup)))))) (Expr (Call print (__list__ STRING_8 (Call timeit (__list__ STRING_9) (__list__ (keyword setup setup)))))))))",
    "(ProgramStatements (Expr STRING_0) (Assign (__list__ calc) (Dict (__list__ STRING_1 STRING_2 STRING_3 STRING_4) (__list__ (Lambda (arguments (__list__ (arg x) (arg y))) (BinOp x Add y)) (Lambda (arguments (__list__ (arg x) (arg y))) (BinOp x Sub y)) (Lambda (arguments (__list__ (arg x) (arg y))) (BinOp x Mult y)) (Lambda (arguments (__list__ (arg x) (arg y))) (BinOp x Div y))))) (FunctionDef is_operand (arguments (__list__ (arg c))) (__list__ (Expr STRING_5) (Return (Call (Attribute c isdigit)))) (__list__ )) (FunctionDef evaluate (arguments (__list__ (arg expression))) (__list__ (Expr STRING_6) (Assign (__list__ stack) List) (For c (Subscript (Call (Attribute expression split)) (Slice (UnaryOp USub 1))) (__list__ (If (Call is_operand (__list__ c)) (__list__ (Expr (Call (Attribute stack append) (__list__ (Call int (__list__ c)))))) (__list__ (Assign (__list__ o1) (Call (Attribute stack pop))) (Assign (__list__ o2) (Call (Attribute stack pop))) (Expr (Call (Attribute stack append) (__list__ (Call (Subscript calc c) (__list__ o1 o2))))))))) (Return (Call (Attribute stack pop)))) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ test_expression) STRING_7) (Expr (Call print (__list__ (Call evaluate (__list__ test_expression))))) (Assign (__list__ test_expression) STRING_8) (Expr (Call print (__list__ (Call evaluate (__list__ test_expression))))))))",
    "(ProgramStatements (Expr STRING_0) (Assign (__list__ __author__) STRING_1) (Import (__list__ (alias operator op))) (ImportFrom stack (__list__ (alias Stack)) 1) (FunctionDef dijkstras_two_stack_algorithm (arguments (__list__ (arg equation str))) (__list__ (Expr STRING_2) (Assign (__list__ operators) (Dict (__list__ STRING_3 STRING_4 STRING_1 STRING_2) (__list__ (Attribute op mul) (Attribute op truediv) (Attribute op add) (Attribute op sub)))) (AnnAssign operand_stack (Subscript Stack int) (Call Stack) 1) (AnnAssign operator_stack (Subscript Stack str) (Call Stack) 1) (For i equation (__list__ (If (Call (Attribute i isdigit)) (__list__ (Expr (Call (Attribute operand_stack push) (__list__ (Call int (__list__ i)))))) (__list__ (If (Compare i (__list__ In) (__list__ operators)) (__list__ (Expr (Call (Attribute operator_stack push) (__list__ i)))) (__list__ (If (Compare i (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ opr) (Call (Attribute operator_stack peek))) (Expr (Call (Attribute operator_stack pop))) (Assign (__list__ num1) (Call (Attribute operand_stack peek))) (Expr (Call (Attribute operand_stack pop))) (Assign (__list__ num2) (Call (Attribute operand_stack peek))) (Expr (Call (Attribute operand_stack pop))) (Assign (__list__ total) (Call (Subscript operators opr) (__list__ num2 num1))) (Expr (Call (Attribute operand_stack push) (__list__ total))))))))))) (Return (Call (Attribute operand_stack peek)))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ equation) STRING_4) (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue equation -1) STRING_5 (FormattedValue (Call dijkstras_two_stack_algorithm (__list__ equation)) -1)))))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom typing (__list__ (alias Generic) (alias TypeVar)) 0) (Assign (__list__ T) (Call TypeVar (__list__ STRING_1))) (ClassDef Node (__list__ (Subscript Generic T)) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data T))) (__list__ (Assign (__list__ (Attribute self data)) data) (AnnAssign (Attribute self next) (BinOp (Subscript Node T) BitOr None) None 0)) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (JoinedStr (__list__ (FormattedValue (Attribute self data) -1))))) (__list__ ) str))) (ClassDef LinkedStack (__list__ (Subscript Generic T)) (__list__ (Expr STRING_2) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self top) (BinOp (Subscript Node T) BitOr None) None 0)) (__list__ ) None) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ node) (Attribute self top)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next))))) (__list__ ) (Subscript Iterator T)) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (Call (Attribute STRING_4 join) (__list__ (ListComp (Call str (__list__ item)) (__list__ (comprehension item self 0))))))) (__list__ ) str) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (Return (Call len (__list__ (Call tuple (__list__ (Call iter (__list__ self)))))))) (__list__ ) int) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (Return (Compare (Attribute self top) (__list__ Is) (__list__ None)))) (__list__ ) bool) (FunctionDef push (arguments (__list__ (arg self) (arg item T))) (__list__ (Expr STRING_7) (Assign (__list__ node) (Call Node (__list__ item))) (If (UnaryOp Not (Call (Attribute self is_empty))) (__list__ (Assign (__list__ (Attribute node next)) (Attribute self top)))) (Assign (__list__ (Attribute self top)) node)) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Expr STRING_8) (If (Call (Attribute self is_empty)) (__list__ (Raise (Call IndexError (__list__ STRING_9))))) (Assert (Call isinstance (__list__ (Attribute self top) Node))) (Assign (__list__ pop_node) (Attribute self top)) (Assign (__list__ (Attribute self top)) (Attribute (Attribute self top) next)) (Return (Attribute pop_node data))) (__list__ ) T) (FunctionDef peek (arguments (__list__ (arg self))) (__list__ (Expr STRING_10) (If (Call (Attribute self is_empty)) (__list__ (Raise (Call IndexError (__list__ STRING_11))))) (Assert (Compare (Attribute self top) (__list__ IsNot) (__list__ None))) (Return (Attribute (Attribute self top) data))) (__list__ ) T) (FunctionDef clear (arguments (__list__ (arg self))) (__list__ (Expr STRING_12) (Assign (__list__ (Attribute self top)) None)) (__list__ ) None))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef infix_2_postfix (arguments (__list__ (arg infix str))) (__list__ (Expr STRING_1) (Assign (__list__ stack) List) (Assign (__list__ post_fix) List) (Assign (__list__ priority) (Dict (__list__ STRING_2 STRING_3 STRING_4 STRING_3 STRING_1 STRING_2) (__list__ 3 2 2 2 1 1))) (Assign (__list__ print_width) (Call max (__list__ (Call len (__list__ infix)) 7))) (Expr (Call print (__list__ (Call (Attribute STRING_4 center) (__list__ 8)) (Call (Attribute STRING_5 center) (__list__ print_width)) (Call (Attribute STRING_6 center) (__list__ print_width))) (__list__ (keyword sep STRING_7)))) (Expr (Call print (__list__ (BinOp STRING_2 Mult (BinOp (BinOp print_width Mult 3) Add 7))))) (For x infix (__list__ (If (BoolOp Or (__list__ (Call (Attribute x isalpha)) (Call (Attribute x isdigit)))) (__list__ (Expr (Call (Attribute post_fix append) (__list__ x)))) (__list__ (If (Compare x (__list__ Eq) (__list__ STRING_8)) (__list__ (Expr (Call (Attribute stack append) (__list__ x)))) (__list__ (If (Compare x (__list__ Eq) (__list__ STRING_3)) (__list__ (If (Compare (Call len (__list__ stack)) (__list__ Eq) (__list__ 0)) (__list__ (Raise (Call IndexError (__list__ STRING_9))))) (While (Compare (Subscript stack (UnaryOp USub 1)) (__list__ NotEq) (__list__ STRING_8)) (__list__ (Expr (Call (Attribute post_fix append) (__list__ (Call (Attribute stack pop))))))) (Expr (Call (Attribute stack pop)))) (__list__ (If (Compare (Call len (__list__ stack)) (__list__ Eq) (__list__ 0)) (__list__ (Expr (Call (Attribute stack append) (__list__ x)))) (__list__ (While (BoolOp And (__list__ stack (Compare (Subscript stack (UnaryOp USub 1)) (__list__ NotEq) (__list__ STRING_8)) (Compare (Subscript priority x) (__list__ LtE) (__list__ (Subscript priority (Subscript stack (UnaryOp USub 1))))))) (__list__ (Expr (Call (Attribute post_fix append) (__list__ (Call (Attribute stack pop))))))) (Expr (Call (Attribute stack append) (__list__ x))))))))))) (Expr (Call print (__list__ (Call (Attribute x center) (__list__ 8)) (Call (Attribute (Call (Attribute STRING_10 join) (__list__ stack)) ljust) (__list__ print_width)) (Call (Attribute (Call (Attribute STRING_10 join) (__list__ post_fix)) ljust) (__list__ print_width))) (__list__ (keyword sep STRING_7)))))) (While (Compare (Call len (__list__ stack)) (__list__ Gt) (__list__ 0)) (__list__ (If (Compare (Subscript stack (UnaryOp USub 1)) (__list__ Eq) (__list__ STRING_8)) (__list__ (Raise (Call ValueError (__list__ STRING_11))))) (Expr (Call (Attribute post_fix append) (__list__ (Call (Attribute stack pop))))) (Expr (Call print (__list__ (Call (Attribute STRING_12 center) (__list__ 8)) (Call (Attribute (Call (Attribute STRING_10 join) (__list__ stack)) ljust) (__list__ print_width)) (Call (Attribute (Call (Attribute STRING_10 join) (__list__ post_fix)) ljust) (__list__ print_width))) (__list__ (keyword sep STRING_7)))))) (Return (Call (Attribute STRING_10 join) (__list__ post_fix)))) (__list__ ) str) (FunctionDef infix_2_prefix (arguments (__list__ (arg infix str))) (__list__ (Expr STRING_13) (Assign (__list__ reversed_infix) (Call list (__list__ (Subscript infix (Slice (UnaryOp USub 1)))))) (For i (Call range (__list__ (Call len (__list__ reversed_infix)))) (__list__ (If (Compare (Subscript reversed_infix i) (__list__ Eq) (__list__ STRING_8)) (__list__ (Assign (__list__ (Subscript reversed_infix i)) STRING_3)) (__list__ (If (Compare (Subscript reversed_infix i) (__list__ Eq) (__list__ STRING_3)) (__list__ (Assign (__list__ (Subscript reversed_infix i)) STRING_8))))))) (Return (Subscript (Call infix_2_postfix (__list__ (Call (Attribute STRING_10 join) (__list__ reversed_infix)))) (Slice (UnaryOp USub 1))))) (__list__ ) str) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Assign (__list__ Infix) (Call input (__list__ STRING_14))) (Assign (__list__ Infix) (Call (Attribute STRING_10 join) (__list__ (Call (Attribute Infix split))))) (Expr (Call print (__list__ STRING_15 Infix STRING_16 (Call infix_2_prefix (__list__ Infix)) STRING_17))))))",
    "(ProgramStatements )",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom typing (__list__ (alias Generic) (alias TypeVar)) 0) (Assign (__list__ T) (Call TypeVar (__list__ STRING_1))) (ClassDef Node (__list__ (Subscript Generic T)) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data T))) (__list__ (Assign (__list__ (Attribute self data)) data) (AnnAssign (Attribute self next) (BinOp (Subscript Node T) BitOr None) None 0) (AnnAssign (Attribute self prev) (BinOp (Subscript Node T) BitOr None) None 0)) (__list__ )))) (ClassDef Stack (__list__ (Subscript Generic T)) (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self head) (BinOp (Subscript Node T) BitOr None) None 0)) (__list__ ) None) (FunctionDef push (arguments (__list__ (arg self) (arg data T))) (__list__ (Expr STRING_1) (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self head)) (Call Node (__list__ data)))) (__list__ (Assign (__list__ new_node) (Call Node (__list__ data))) (Assign (__list__ (Attribute (Attribute self head) prev)) new_node) (Assign (__list__ (Attribute new_node next)) (Attribute self head)) (Assign (__list__ (Attribute new_node prev)) None) (Assign (__list__ (Attribute self head)) new_node)))) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Return None)) (__list__ (Assert (Compare (Attribute self head) (__list__ IsNot) (__list__ None))) (Assign (__list__ temp) (Attribute (Attribute self head) data)) (Assign (__list__ (Attribute self head)) (Attribute (Attribute self head) next)) (If (Compare (Attribute self head) (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute (Attribute self head) prev)) None))) (Return temp)))) (__list__ ) (BinOp T BitOr None)) (FunctionDef top (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (IfExp (Compare (Attribute self head) (__list__ IsNot) (__list__ None)) (Attribute (Attribute self head) data) None))) (__list__ ) (BinOp T BitOr None)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ temp) (Attribute self head)) (Assign (__list__ count) 0) (While (Compare temp (__list__ IsNot) (__list__ None)) (__list__ (AugAssign count Add 1) (Assign (__list__ temp) (Attribute temp next)))) (Return count)) (__list__ ) int) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Return (Compare (Attribute self head) (__list__ Is) (__list__ None)))) (__list__ ) bool) (FunctionDef print_stack (arguments (__list__ (arg self))) (__list__ (Expr (Call print (__list__ STRING_4))) (Assign (__list__ temp) (Attribute self head)) (While (Compare temp (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call print (__list__ (Attribute temp data)) (__list__ (keyword end STRING_4)))) (Assign (__list__ temp) (Attribute temp next))))) (__list__ ) None))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (AnnAssign stack (Subscript Stack int) (Call Stack) 1) (Expr (Call print (__list__ STRING_5))) (Expr (Call (Attribute stack push) (__list__ 4))) (Expr (Call (Attribute stack push) (__list__ 5))) (Expr (Call (Attribute stack push) (__list__ 6))) (Expr (Call (Attribute stack push) (__list__ 7))) (Expr (Call (Attribute stack print_stack))) (Expr (Call print (__list__ STRING_6 (Call (Attribute stack top))))) (Expr (Call print (__list__ STRING_7 (Call len (__list__ stack))))) (Expr (Call (Attribute stack pop))) (Expr (Call (Attribute stack pop))) (Expr (Call (Attribute stack print_stack))) (Expr (Call print (__list__ STRING_8 (Call (Attribute stack is_empty))))))))",
    "(ProgramStatements (ImportFrom stack (__list__ (alias Stack)) 1) (FunctionDef balanced_parentheses (arguments (__list__ (arg parentheses str))) (__list__ (Expr STRING_0) (AnnAssign stack (Subscript Stack str) (Call Stack) 1) (Assign (__list__ bracket_pairs) (Dict (__list__ STRING_8 STRING_1 STRING_2) (__list__ STRING_3 STRING_3 STRING_4))) (For bracket parentheses (__list__ (If (Compare bracket (__list__ In) (__list__ bracket_pairs)) (__list__ (Expr (Call (Attribute stack push) (__list__ bracket)))) (__list__ (If (BoolOp And (__list__ (Compare bracket (__list__ In) (__list__ (Tuple (__list__ STRING_3 STRING_3 STRING_4)))) (BoolOp Or (__list__ (Call (Attribute stack is_empty)) (Compare (Subscript bracket_pairs (Call (Attribute stack pop))) (__list__ NotEq) (__list__ bracket)))))) (__list__ (Return False))))))) (Return (Call (Attribute stack is_empty)))) (__list__ ) bool) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Assign (__list__ examples) (List (__list__ STRING_5 STRING_6 STRING_7))) (Expr (Call print (__list__ STRING_8))) (For example examples (__list__ (Assign (__list__ not_str) (IfExp (Call balanced_parentheses (__list__ example)) STRING_10 STRING_9)) (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue example -1) STRING_10 (FormattedValue not_str -1) STRING_11))))))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef calculation_span (arguments (__list__ (arg price) (arg s))) (__list__ (Assign (__list__ n) (Call len (__list__ price))) (Assign (__list__ st) List) (Expr (Call (Attribute st append) (__list__ 0))) (Assign (__list__ (Subscript s 0)) 1) (For i (Call range (__list__ 1 n)) (__list__ (While (BoolOp And (__list__ (Compare (Call len (__list__ st)) (__list__ Gt) (__list__ 0)) (Compare (Subscript price (Subscript st 0)) (__list__ LtE) (__list__ (Subscript price i))))) (__list__ (Expr (Call (Attribute st pop))))) (Assign (__list__ (Subscript s i)) (IfExp (Compare (Call len (__list__ st)) (__list__ LtE) (__list__ 0)) (BinOp i Add 1) (BinOp i Sub (Subscript st 0)))) (Expr (Call (Attribute st append) (__list__ i)))))) (__list__ )) (FunctionDef print_array (arguments (__list__ (arg arr) (arg n))) (__list__ (For i (Call range (__list__ n)) (__list__ (Expr (Call print (__list__ (Subscript arr i)) (__list__ (keyword end STRING_12))))))) (__list__ )) (Assign (__list__ price) (List (__list__ 10 4 5 90 120 80))) (Assign (__list__ S) (ListComp 0 (__list__ (comprehension i (Call range (__list__ (BinOp (Call len (__list__ price)) Add 1))) 0)))) (Expr (Call calculation_span (__list__ price S))) (Expr (Call print_array (__list__ S (Call len (__list__ price))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom typing (__list__ (alias Generic) (alias TypeVar)) 0) (Assign (__list__ T) (Call TypeVar (__list__ STRING_1))) (ClassDef StackOverflowError (__list__ BaseException) (__list__ Pass)) (ClassDef StackUnderflowError (__list__ BaseException) (__list__ Pass)) (ClassDef Stack (__list__ (Subscript Generic T)) (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg limit int)) (__list__ 10)) (__list__ (AnnAssign (Attribute self stack) (Subscript list T) List 0) (Assign (__list__ (Attribute self limit)) limit)) (__list__ )) (FunctionDef __bool__ (arguments (__list__ (arg self))) (__list__ (Return (Call bool (__list__ (Attribute self stack))))) (__list__ ) bool) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (Call str (__list__ (Attribute self stack))))) (__list__ ) str) (FunctionDef push (arguments (__list__ (arg self) (arg data T))) (__list__ (Expr STRING_1) (If (Compare (Call len (__list__ (Attribute self stack))) (__list__ GtE) (__list__ (Attribute self limit))) (__list__ (Raise StackOverflowError))) (Expr (Call (Attribute (Attribute self stack) append) (__list__ data)))) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (If (UnaryOp Not (Attribute self stack)) (__list__ (Raise StackUnderflowError))) (Return (Call (Attribute (Attribute self stack) pop)))) (__list__ ) T) (FunctionDef peek (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (If (UnaryOp Not (Attribute self stack)) (__list__ (Raise StackUnderflowError))) (Return (Subscript (Attribute self stack) (UnaryOp USub 1)))) (__list__ ) T) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Return (UnaryOp Not (Call bool (__list__ (Attribute self stack)))))) (__list__ ) bool) (FunctionDef is_full (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (Return (Compare (Call (Attribute self size)) (__list__ Eq) (__list__ (Attribute self limit))))) (__list__ ) bool) (FunctionDef size (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (Return (Call len (__list__ (Attribute self stack))))) (__list__ ) int) (FunctionDef __contains__ (arguments (__list__ (arg self) (arg item T))) (__list__ (Expr STRING_7) (Return (Compare item (__list__ In) (__list__ (Attribute self stack))))) (__list__ ) bool))) (FunctionDef test_stack arguments (__list__ (Expr STRING_8) (AnnAssign stack (Subscript Stack int) (Call Stack (__list__ 10)) 1) (Assert (Compare (Call bool (__list__ stack)) (__list__ Is) (__list__ False))) (Assert (Compare (Call (Attribute stack is_empty)) (__list__ Is) (__list__ True))) (Assert (Compare (Call (Attribute stack is_full)) (__list__ Is) (__list__ False))) (Assert (Compare (Call str (__list__ stack)) (__list__ Eq) (__list__ STRING_9))) (Try (__list__ (Assign (__list__ _) (Call (Attribute stack pop))) (Raise AssertionError)) (__list__ (ExceptHandler StackUnderflowError (__list__ (Assert True))))) (Try (__list__ (Assign (__list__ _) (Call (Attribute stack peek))) (Raise AssertionError)) (__list__ (ExceptHandler StackUnderflowError (__list__ (Assert True))))) (For i (Call range (__list__ 10)) (__list__ (Assert (Compare (Call (Attribute stack size)) (__list__ Eq) (__list__ i))) (Expr (Call (Attribute stack push) (__list__ i))))) (Assert (Call bool (__list__ stack))) (Assert (UnaryOp Not (Call (Attribute stack is_empty)))) (Assert (Call (Attribute stack is_full))) (Assert (Compare (Call str (__list__ stack)) (__list__ Eq) (__list__ (Call str (__list__ (Call list (__list__ (Call range (__list__ 10))))))))) (Assert (Compare (Call (Attribute stack pop)) (__list__ Eq) (__list__ 9))) (Assert (Compare (Call (Attribute stack peek)) (__list__ Eq) (__list__ 8))) (Expr (Call (Attribute stack push) (__list__ 100))) (Assert (Compare (Call str (__list__ stack)) (__list__ Eq) (__list__ (Call str (__list__ (List (__list__ 0 1 2 3 4 5 6 7 8 100))))))) (Try (__list__ (Expr (Call (Attribute stack push) (__list__ 200))) (Raise AssertionError)) (__list__ (ExceptHandler StackOverflowError (__list__ (Assert True))))) (Assert (UnaryOp Not (Call (Attribute stack is_empty)))) (Assert (Compare (Call (Attribute stack size)) (__list__ Eq) (__list__ 10))) (Assert (Compare 5 (__list__ In) (__list__ stack))) (Assert (Compare 55 (__list__ NotIn) (__list__ stack)))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call test_stack)) (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom typing (__list__ (alias Literal)) 0) (ImportFrom balanced_parentheses (__list__ (alias balanced_parentheses)) 1) (ImportFrom stack (__list__ (alias Stack)) 1) (AnnAssign PRECEDENCES (Subscript dict (Tuple (__list__ str int))) (Dict (__list__ STRING_1 STRING_2 STRING_3 STRING_4 STRING_2) (__list__ 1 1 2 2 3)) 1) (AnnAssign ASSOCIATIVITIES (Subscript dict (Tuple (__list__ str (Subscript Literal (Tuple (__list__ STRING_1 STRING_2)))))) (Dict (__list__ STRING_1 STRING_2 STRING_3 STRING_4 STRING_2) (__list__ STRING_1 STRING_1 STRING_1 STRING_1 STRING_2)) 1) (FunctionDef precedence (arguments (__list__ (arg char str))) (__list__ (Expr STRING_3) (Return (Call (Attribute PRECEDENCES get) (__list__ char (UnaryOp USub 1))))) (__list__ ) int) (FunctionDef associativity (arguments (__list__ (arg char str))) (__list__ (Expr STRING_4) (Return (Subscript ASSOCIATIVITIES char))) (__list__ ) (Subscript Literal (Tuple (__list__ STRING_1 STRING_2)))) (FunctionDef infix_to_postfix (arguments (__list__ (arg expression_str str))) (__list__ (Expr STRING_5) (If (UnaryOp Not (Call balanced_parentheses (__list__ expression_str))) (__list__ (Raise (Call ValueError (__list__ STRING_6))))) (AnnAssign stack (Subscript Stack str) (Call Stack) 1) (Assign (__list__ postfix) List) (For char expression_str (__list__ (If (BoolOp Or (__list__ (Call (Attribute char isalpha)) (Call (Attribute char isdigit)))) (__list__ (Expr (Call (Attribute postfix append) (__list__ char)))) (__list__ (If (Compare char (__list__ Eq) (__list__ STRING_8)) (__list__ (Expr (Call (Attribute stack push) (__list__ char)))) (__list__ (If (Compare char (__list__ Eq) (__list__ STRING_3)) (__list__ (While (BoolOp And (__list__ (UnaryOp Not (Call (Attribute stack is_empty))) (Compare (Call (Attribute stack peek)) (__list__ NotEq) (__list__ STRING_8)))) (__list__ (Expr (Call (Attribute postfix append) (__list__ (Call (Attribute stack pop))))))) (Expr (Call (Attribute stack pop)))) (__list__ (While True (__list__ (If (Call (Attribute stack is_empty)) (__list__ (Expr (Call (Attribute stack push) (__list__ char))) Break)) (Assign (__list__ char_precedence) (Call precedence (__list__ char))) (Assign (__list__ tos_precedence) (Call precedence (__list__ (Call (Attribute stack peek))))) (If (Compare char_precedence (__list__ Gt) (__list__ tos_precedence)) (__list__ (Expr (Call (Attribute stack push) (__list__ char))) Break)) (If (Compare char_precedence (__list__ Lt) (__list__ tos_precedence)) (__list__ (Expr (Call (Attribute postfix append) (__list__ (Call (Attribute stack pop))))) Continue)) (If (Compare (Call associativity (__list__ char)) (__list__ Eq) (__list__ STRING_2)) (__list__ (Expr (Call (Attribute stack push) (__list__ char))) Break)) (Expr (Call (Attribute postfix append) (__list__ (Call (Attribute stack pop))))))))))))))) (While (UnaryOp Not (Call (Attribute stack is_empty))) (__list__ (Expr (Call (Attribute postfix append) (__list__ (Call (Attribute stack pop))))))) (Return (Call (Attribute STRING_12 join) (__list__ postfix)))) (__list__ ) str) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Assign (__list__ expression) STRING_7) (Expr (Call print (__list__ STRING_8))) (Expr (Call print (__list__ (BinOp STRING_9 Add expression)))) (Expr (Call print (__list__ (BinOp STRING_10 Add (Call infix_to_postfix (__list__ expression)))))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections (__list__ (alias deque)) 0) (ImportFrom dataclasses (__list__ (alias dataclass) (alias field)) 0) (ClassDef StackWithQueues (__list__ (Expr STRING_0) (AnnAssign main_queue (Subscript deque int) (Call field (__list__ (keyword default_factory deque))) 1) (AnnAssign temp_queue (Subscript deque int) (Call field (__list__ (keyword default_factory deque))) 1) (FunctionDef push (arguments (__list__ (arg self) (arg item int))) (__list__ (Expr (Call (Attribute (Attribute self temp_queue) append) (__list__ item))) (While (Attribute self main_queue) (__list__ (Expr (Call (Attribute (Attribute self temp_queue) append) (__list__ (Call (Attribute (Attribute self main_queue) popleft))))))) (Assign (__list__ (Tuple (__list__ (Attribute self main_queue) (Attribute self temp_queue)))) (Tuple (__list__ (Attribute self temp_queue) (Attribute self main_queue))))) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Return (Call (Attribute (Attribute self main_queue) popleft)))) (__list__ ) int) (FunctionDef peek (arguments (__list__ (arg self))) (__list__ (Return (IfExp (Attribute self main_queue) (Subscript (Attribute self main_queue) 0) None))) (__list__ ) (BinOp int BitOr None))) (__list__ dataclass)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (AnnAssign stack (BinOp StackWithQueues BitOr None) (Call StackWithQueues) 1) (While stack (__list__ (Expr (Call print (__list__ STRING_1))) (Expr (Call print (__list__ STRING_2))) (Expr (Call print (__list__ STRING_3))) (Expr (Call print (__list__ STRING_4))) (Expr (Call print (__list__ STRING_5))) (Assign (__list__ choice) (Call input (__list__ STRING_6))) (If (Compare choice (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ element) (Call int (__list__ (Call (Attribute (Call input (__list__ STRING_8)) strip))))) (Expr (Call (Attribute stack push) (__list__ element))) (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue element -1) STRING_9)))))) (__list__ (If (Compare choice (__list__ Eq) (__list__ STRING_10)) (__list__ (Assign (__list__ popped_element) (Call (Attribute stack pop))) (If (Compare popped_element (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ STRING_11 (FormattedValue popped_element -1))))))) (__list__ (Expr (Call print (__list__ STRING_12)))))) (__list__ (If (Compare choice (__list__ Eq) (__list__ STRING_13)) (__list__ (Assign (__list__ peeked_element) (Call (Attribute stack peek))) (If (Compare peeked_element (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ STRING_14 (FormattedValue peeked_element -1))))))) (__list__ (Expr (Call print (__list__ STRING_12)))))) (__list__ (If (Compare choice (__list__ Eq) (__list__ STRING_15)) (__list__ (Delete (__list__ stack)) (Assign (__list__ stack) None)) (__list__ (Expr (Call print (__list__ STRING_16))))))))))))))))",
    "(ProgramStatements (Expr STRING_0) (Assign (__list__ UNARY_OP_SYMBOLS) (Tuple (__list__ STRING_2 STRING_1))) (Assign (__list__ OPERATORS) (Dict (__list__ STRING_2 STRING_3 STRING_4 STRING_1 STRING_2) (__list__ (Lambda (arguments (__list__ (arg p) (arg q))) (BinOp p Pow q)) (Lambda (arguments (__list__ (arg p) (arg q))) (BinOp p Mult q)) (Lambda (arguments (__list__ (arg p) (arg q))) (BinOp p Div q)) (Lambda (arguments (__list__ (arg p) (arg q))) (BinOp p Add q)) (Lambda (arguments (__list__ (arg p) (arg q))) (BinOp p Sub q))))) (FunctionDef parse_token (arguments (__list__ (arg token (BinOp str BitOr float)))) (__list__ (Expr STRING_1) (If (Compare token (__list__ In) (__list__ OPERATORS)) (__list__ (Return token))) (Try (__list__ (Return (Call float (__list__ token)))) (__list__ (ExceptHandler ValueError (__list__ (Assign (__list__ msg) (JoinedStr (__list__ (FormattedValue token -1) STRING_2))) (Raise (Call ValueError (__list__ msg)))))))) (__list__ ) (BinOp float BitOr str)) (FunctionDef evaluate (arguments (__list__ (arg post_fix (Subscript list str)) (arg verbose bool)) (__list__ False)) (__list__ (Expr STRING_3) (If (UnaryOp Not post_fix) (__list__ (Return 0))) (Assign (__list__ valid_expression) (ListComp (Call parse_token (__list__ token)) (__list__ (comprehension token post_fix 0)))) (If verbose (__list__ (Expr (Call print (__list__ (Call (Attribute STRING_4 center) (__list__ 8)) (Call (Attribute STRING_4 center) (__list__ 12)) STRING_5) (__list__ (keyword sep STRING_7)))) (Expr (Call print (__list__ (BinOp STRING_2 Mult (BinOp 30 Add (Call len (__list__ post_fix))))))))) (Assign (__list__ stack) List) (For x valid_expression (__list__ (If (Compare x (__list__ NotIn) (__list__ OPERATORS)) (__list__ (Expr (Call (Attribute stack append) (__list__ x))) (If verbose (__list__ (Expr (Call print (__list__ (Call (Attribute (JoinedStr (__list__ (FormattedValue x -1))) rjust) (__list__ 8)) (Call (Attribute (JoinedStr (__list__ STRING_5 (FormattedValue x -1) STRING_3)) ljust) (__list__ 12)) stack) (__list__ (keyword sep STRING_7)))))) Continue)) (If (BoolOp And (__list__ (Compare x (__list__ In) (__list__ UNARY_OP_SYMBOLS)) (Compare (Call len (__list__ stack)) (__list__ Lt) (__list__ 2)))) (__list__ (Assign (__list__ b) (Call (Attribute stack pop))) (If (Compare x (__list__ Eq) (__list__ STRING_2)) (__list__ (AugAssign b Mult (UnaryOp USub 1)))) (Expr (Call (Attribute stack append) (__list__ b))) (If verbose (__list__ (Expr (Call print (__list__ (Call (Attribute STRING_10 rjust) (__list__ 8)) (Call (Attribute (JoinedStr (__list__ STRING_6 (FormattedValue b -1) STRING_3)) ljust) (__list__ 12)) stack) (__list__ (keyword sep STRING_7)))) (Expr (Call print (__list__ (Call (Attribute (Call str (__list__ x)) rjust) (__list__ 8)) (Call (Attribute (JoinedStr (__list__ STRING_5 (FormattedValue x -1) (FormattedValue b -1) STRING_3)) ljust) (__list__ 12)) stack) (__list__ (keyword sep STRING_7)))))) Continue)) (Assign (__list__ b) (Call (Attribute stack pop))) (If verbose (__list__ (Expr (Call print (__list__ (Call (Attribute STRING_10 rjust) (__list__ 8)) (Call (Attribute (JoinedStr (__list__ STRING_6 (FormattedValue b -1) STRING_3)) ljust) (__list__ 12)) stack) (__list__ (keyword sep STRING_7)))))) (Assign (__list__ a) (Call (Attribute stack pop))) (If verbose (__list__ (Expr (Call print (__list__ (Call (Attribute STRING_10 rjust) (__list__ 8)) (Call (Attribute (JoinedStr (__list__ STRING_6 (FormattedValue a -1) STRING_3)) ljust) (__list__ 12)) stack) (__list__ (keyword sep STRING_7)))))) (Expr (Call (Attribute stack append) (__list__ (Call (Subscript OPERATORS x) (__list__ a b))))) (If verbose (__list__ (Expr (Call print (__list__ (Call (Attribute (JoinedStr (__list__ (FormattedValue x -1))) rjust) (__list__ 8)) (Call (Attribute (JoinedStr (__list__ STRING_5 (FormattedValue a -1) (FormattedValue x -1) (FormattedValue b -1) STRING_3)) ljust) (__list__ 12)) stack) (__list__ (keyword sep STRING_7)))))))) (If (Compare (Call len (__list__ stack)) (__list__ NotEq) (__list__ 1)) (__list__ (Raise (Call ArithmeticError (__list__ STRING_7))))) (Return (Call float (__list__ (Subscript stack 0))))) (__list__ ) float) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (While True (__list__ (Assign (__list__ expression) (Call (Attribute (Call input (__list__ STRING_8)) split) (__list__ STRING_12))) (Assign (__list__ prompt) STRING_9) (Assign (__list__ verbose) (Compare (Call (Attribute (Call (Attribute (Call input (__list__ prompt)) strip)) lower)) (__list__ Eq) (__list__ STRING_10))) (Assign (__list__ output) (Call evaluate (__list__ expression verbose))) (Expr (Call print (__list__ STRING_11 output))) (Assign (__list__ prompt) STRING_12) (If (Compare (Call (Attribute (Call (Attribute (Call input (__list__ prompt)) strip)) lower)) (__list__ NotEq) (__list__ STRING_10)) (__list__ Break)))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef binary_tree_mirror_dict (arguments (__list__ (arg binary_tree_mirror_dictionary dict) (arg root int))) (__list__ (If (BoolOp Or (__list__ (UnaryOp Not root) (Compare root (__list__ NotIn) (__list__ binary_tree_mirror_dictionary)))) (__list__ Return)) (Assign (__list__ (Tuple (__list__ left_child right_child))) (Subscript (Subscript binary_tree_mirror_dictionary root) (Slice 2))) (Assign (__list__ (Subscript binary_tree_mirror_dictionary root)) (List (__list__ right_child left_child))) (Expr (Call binary_tree_mirror_dict (__list__ binary_tree_mirror_dictionary left_child))) (Expr (Call binary_tree_mirror_dict (__list__ binary_tree_mirror_dictionary right_child)))) (__list__ )) (FunctionDef binary_tree_mirror (arguments (__list__ (arg binary_tree dict) (arg root int)) (__list__ 1)) (__list__ (Expr STRING_1) (If (UnaryOp Not binary_tree) (__list__ (Raise (Call ValueError (__list__ STRING_2))))) (If (Compare root (__list__ NotIn) (__list__ binary_tree)) (__list__ (Assign (__list__ msg) (JoinedStr (__list__ STRING_3 (FormattedValue root -1) STRING_4))) (Raise (Call ValueError (__list__ msg))))) (Assign (__list__ binary_tree_mirror_dictionary) (Call dict (__list__ binary_tree))) (Expr (Call binary_tree_mirror_dict (__list__ binary_tree_mirror_dictionary root))) (Return binary_tree_mirror_dictionary)) (__list__ ) dict) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ binary_tree) (Dict (__list__ 1 2 3 7) (__list__ (List (__list__ 2 3)) (List (__list__ 4 5)) (List (__list__ 6 7)) (List (__list__ 8 9))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_5 (FormattedValue binary_tree -1)))))) (Assign (__list__ binary_tree_mirror_dictionary) (Call binary_tree_mirror (__list__ binary_tree 5))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_6 (FormattedValue binary_tree_mirror_dictionary -1)))))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ClassDef TreeNode (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg data int))) (__list__ (Assign (__list__ (Attribute self data)) data) (AnnAssign (Attribute self left) (BinOp TreeNode BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp TreeNode BitOr None) None 0)) (__list__ ) None))) (FunctionDef build_tree arguments (__list__ (Expr STRING_2) (Assign (__list__ root) (Call TreeNode (__list__ 1))) (Assign (__list__ (Attribute root left)) (Call TreeNode (__list__ 2))) (Assign (__list__ (Attribute root right)) (Call TreeNode (__list__ 5))) (Assign (__list__ (Attribute (Attribute root left) left)) (Call TreeNode (__list__ 3))) (Assign (__list__ (Attribute (Attribute root left) right)) (Call TreeNode (__list__ 4))) (Assign (__list__ (Attribute (Attribute root right) right)) (Call TreeNode (__list__ 6))) (Return root)) (__list__ ) TreeNode) (FunctionDef flatten (arguments (__list__ (arg root (BinOp TreeNode BitOr None)))) (__list__ (Expr STRING_3) (If (UnaryOp Not root) (__list__ Return)) (Expr (Call flatten (__list__ (Attribute root left)))) (Assign (__list__ right_subtree) (Attribute root right)) (Assign (__list__ (Attribute root right)) (Attribute root left)) (Assign (__list__ (Attribute root left)) None) (Assign (__list__ current) root) (While (Attribute current right) (__list__ (Assign (__list__ current) (Attribute current right)))) (Assign (__list__ (Attribute current right)) right_subtree) (Expr (Call flatten (__list__ right_subtree)))) (__list__ ) None) (FunctionDef display_linked_list (arguments (__list__ (arg root (BinOp TreeNode BitOr None)))) (__list__ (Expr STRING_4) (Assign (__list__ current) root) (While current (__list__ (If (Compare (Attribute current right) (__list__ Is) (__list__ None)) (__list__ (Expr (Call print (__list__ (Attribute current data)) (__list__ (keyword end STRING_10)))) Break)) (Expr (Call print (__list__ (Attribute current data)) (__list__ (keyword end STRING_12)))) (Assign (__list__ current) (Attribute current right))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call print (__list__ STRING_5))) (Assign (__list__ root) (Call build_tree)) (Expr (Call flatten (__list__ root))) (Expr (Call display_linked_list (__list__ root))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (Assign (__list__ test_array) (List (__list__ 2 1 4 5 6 0 8 9 1 2 0 6 4 2 0 6 5 3 2 7))) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg length int))) (__list__ (AnnAssign (Attribute self minn) int (UnaryOp USub 1) 0) (AnnAssign (Attribute self maxx) int (UnaryOp USub 1) 0) (AnnAssign (Attribute self map_left) (Subscript list int) (BinOp (List (__list__ (UnaryOp USub 1))) Mult length) 0) (AnnAssign (Attribute self left) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp Node BitOr None) None 0)) (__list__ ) None) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (JoinedStr (__list__ STRING_2 (FormattedValue (Attribute self minn) -1) STRING_3 (FormattedValue (Attribute self maxx) -1) STRING_3)))) (__list__ ) str))) (FunctionDef build_tree (arguments (__list__ (arg arr (Subscript list int)))) (__list__ (Expr STRING_4) (Assign (__list__ root) (Call Node (__list__ (Call len (__list__ arr))))) (Assign (__list__ (Tuple (__list__ (Attribute root minn) (Attribute root maxx)))) (Tuple (__list__ (Call min (__list__ arr)) (Call max (__list__ arr))))) (If (Compare (Attribute root minn) (__list__ Eq) (__list__ (Attribute root maxx))) (__list__ (Return root))) (Expr STRING_5) (Assign (__list__ pivot) (BinOp (BinOp (Attribute root minn) Add (Attribute root maxx)) FloorDiv 2)) (AnnAssign left_arr (Subscript list int) List 1) (AnnAssign right_arr (Subscript list int) List 1) (For (Tuple (__list__ index num)) (Call enumerate (__list__ arr)) (__list__ (If (Compare num (__list__ LtE) (__list__ pivot)) (__list__ (Expr (Call (Attribute left_arr append) (__list__ num)))) (__list__ (Expr (Call (Attribute right_arr append) (__list__ num))))) (Assign (__list__ (Subscript (Attribute root map_left) index)) (Call len (__list__ left_arr))))) (Assign (__list__ (Attribute root left)) (Call build_tree (__list__ left_arr))) (Assign (__list__ (Attribute root right)) (Call build_tree (__list__ right_arr))) (Return root)) (__list__ ) (BinOp Node BitOr None)) (FunctionDef rank_till_index (arguments (__list__ (arg node (BinOp Node BitOr None)) (arg num int) (arg index int))) (__list__ (Expr STRING_6) (If (BoolOp Or (__list__ (Compare index (__list__ Lt) (__list__ 0)) (Compare node (__list__ Is) (__list__ None)))) (__list__ (Return 0))) (If (Compare (Attribute node minn) (__list__ Eq) (__list__ (Attribute node maxx))) (__list__ (Return (IfExp (Compare (Attribute node minn) (__list__ Eq) (__list__ num)) (BinOp index Add 1) 0)))) (Assign (__list__ pivot) (BinOp (BinOp (Attribute node minn) Add (Attribute node maxx)) FloorDiv 2)) (If (Compare num (__list__ LtE) (__list__ pivot)) (__list__ (Return (Call rank_till_index (__list__ (Attribute node left) num (BinOp (Subscript (Attribute node map_left) index) Sub 1))))) (__list__ (Return (Call rank_till_index (__list__ (Attribute node right) num (BinOp index Sub (Subscript (Attribute node map_left) index)))))))) (__list__ ) int) (FunctionDef rank (arguments (__list__ (arg node (BinOp Node BitOr None)) (arg num int) (arg start int) (arg end int))) (__list__ (Expr STRING_7) (If (Compare start (__list__ Gt) (__list__ end)) (__list__ (Return 0))) (Assign (__list__ rank_till_end) (Call rank_till_index (__list__ node num end))) (Assign (__list__ rank_before_start) (Call rank_till_index (__list__ node num (BinOp start Sub 1)))) (Return (BinOp rank_till_end Sub rank_before_start))) (__list__ ) int) (FunctionDef quantile (arguments (__list__ (arg node (BinOp Node BitOr None)) (arg index int) (arg start int) (arg end int))) (__list__ (Expr STRING_8) (If (BoolOp Or (__list__ (Compare index (__list__ Gt) (__list__ (BinOp end Sub start))) (Compare start (__list__ Gt) (__list__ end)) (Compare node (__list__ Is) (__list__ None)))) (__list__ (Return (UnaryOp USub 1)))) (If (Compare (Attribute node minn) (__list__ Eq) (__list__ (Attribute node maxx))) (__list__ (Return (Attribute node minn)))) (Assign (__list__ num_elements_in_left_tree) (BinOp (Subscript (Attribute node map_left) end) Sub (IfExp start (Subscript (Attribute node map_left) (BinOp start Sub 1)) 0))) (If (Compare num_elements_in_left_tree (__list__ Gt) (__list__ index)) (__list__ (Return (Call quantile (__list__ (Attribute node left) index (IfExp start (Subscript (Attribute node map_left) (BinOp start Sub 1)) 0) (BinOp (Subscript (Attribute node map_left) end) Sub 1))))) (__list__ (Return (Call quantile (__list__ (Attribute node right) (BinOp index Sub num_elements_in_left_tree) (BinOp start Sub (IfExp start (Subscript (Attribute node map_left) (BinOp start Sub 1)) 0)) (BinOp end Sub (Subscript (Attribute node map_left) end)))))))) (__list__ ) int) (FunctionDef range_counting (arguments (__list__ (arg node (BinOp Node BitOr None)) (arg start int) (arg end int) (arg start_num int) (arg end_num int))) (__list__ (Expr STRING_9) (If (BoolOp Or (__list__ (Compare start (__list__ Gt) (__list__ end)) (Compare node (__list__ Is) (__list__ None)) (Compare start_num (__list__ Gt) (__list__ end_num)) (Compare (Attribute node minn) (__list__ Gt) (__list__ end_num)) (Compare (Attribute node maxx) (__list__ Lt) (__list__ start_num)))) (__list__ (Return 0))) (If (BoolOp And (__list__ (Compare start_num (__list__ LtE) (__list__ (Attribute node minn))) (Compare (Attribute node maxx) (__list__ LtE) (__list__ end_num)))) (__list__ (Return (BinOp (BinOp end Sub start) Add 1)))) (Assign (__list__ left) (Call range_counting (__list__ (Attribute node left) (IfExp start (Subscript (Attribute node map_left) (BinOp start Sub 1)) 0) (BinOp (Subscript (Attribute node map_left) end) Sub 1) start_num end_num))) (Assign (__list__ right) (Call range_counting (__list__ (Attribute node right) (BinOp start Sub (IfExp start (Subscript (Attribute node map_left) (BinOp start Sub 1)) 0)) (BinOp end Sub (Subscript (Attribute node map_left) end)) start_num end_num))) (Return (BinOp left Add right))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ClassDef Node (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg value int)) (__list__ 0)) (__list__ (Assign (__list__ (Attribute self value)) value) (AnnAssign (Attribute self left) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp Node BitOr None) None 0)) (__list__ ) None))) (FunctionDef merge_two_binary_trees (arguments (__list__ (arg tree1 (BinOp Node BitOr None)) (arg tree2 (BinOp Node BitOr None)))) (__list__ (Expr STRING_2) (If (Compare tree1 (__list__ Is) (__list__ None)) (__list__ (Return tree2))) (If (Compare tree2 (__list__ Is) (__list__ None)) (__list__ (Return tree1))) (Assign (__list__ (Attribute tree1 value)) (BinOp (Attribute tree1 value) Add (Attribute tree2 value))) (Assign (__list__ (Attribute tree1 left)) (Call merge_two_binary_trees (__list__ (Attribute tree1 left) (Attribute tree2 left)))) (Assign (__list__ (Attribute tree1 right)) (Call merge_two_binary_trees (__list__ (Attribute tree1 right) (Attribute tree2 right)))) (Return tree1)) (__list__ ) (BinOp Node BitOr None)) (FunctionDef print_preorder (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_3) (If root (__list__ (Expr (Call print (__list__ (Attribute root value)))) (Expr (Call print_preorder (__list__ (Attribute root left)))) (Expr (Call print_preorder (__list__ (Attribute root right))))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ tree1) (Call Node (__list__ 1))) (Assign (__list__ (Attribute tree1 left)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute tree1 right)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute tree1 left) left)) (Call Node (__list__ 4))) (Assign (__list__ tree2) (Call Node (__list__ 2))) (Assign (__list__ (Attribute tree2 left)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute tree2 right)) (Call Node (__list__ 6))) (Assign (__list__ (Attribute (Attribute tree2 left) right)) (Call Node (__list__ 9))) (Assign (__list__ (Attribute (Attribute tree2 right) right)) (Call Node (__list__ 5))) (Expr (Call print (__list__ STRING_4))) (Expr (Call print_preorder (__list__ tree1))) (Expr (Call print (__list__ STRING_5))) (Expr (Call print_preorder (__list__ tree2))) (Assign (__list__ merged_tree) (Call merge_two_binary_trees (__list__ tree1 tree2))) (Expr (Call print (__list__ STRING_6))) (Expr (Call print_preorder (__list__ merged_tree))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (Import (__list__ (alias math))) (Import (__list__ (alias random))) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef MyQueue (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self data) (Subscript list Any) List 0) (AnnAssign (Attribute self head) int 0 0) (AnnAssign (Attribute self tail) int 0 0)) (__list__ ) None) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Return (Compare (Attribute self head) (__list__ Eq) (__list__ (Attribute self tail))))) (__list__ ) bool) (FunctionDef push (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr (Call (Attribute (Attribute self data) append) (__list__ data))) (Assign (__list__ (Attribute self tail)) (BinOp (Attribute self tail) Add 1))) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Assign (__list__ ret) (Subscript (Attribute self data) (Attribute self head))) (Assign (__list__ (Attribute self head)) (BinOp (Attribute self head) Add 1)) (Return ret)) (__list__ ) Any) (FunctionDef count (arguments (__list__ (arg self))) (__list__ (Return (BinOp (Attribute self tail) Sub (Attribute self head)))) (__list__ ) int) (FunctionDef print_queue (arguments (__list__ (arg self))) (__list__ (Expr (Call print (__list__ (Attribute self data)))) (Expr (Call print (__list__ STRING_1))) (Expr (Call print (__list__ (Subscript (Attribute self data) (Slice (Attribute self head) (Attribute self tail))))))) (__list__ ) None))) (ClassDef MyNode (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data Any))) (__list__ (Assign (__list__ (Attribute self data)) data) (AnnAssign (Attribute self left) (BinOp MyNode BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp MyNode BitOr None) None 0) (AnnAssign (Attribute self height) int 1 0)) (__list__ ) None) (FunctionDef get_data (arguments (__list__ (arg self))) (__list__ (Return (Attribute self data))) (__list__ ) Any) (FunctionDef get_left (arguments (__list__ (arg self))) (__list__ (Return (Attribute self left))) (__list__ ) (BinOp MyNode BitOr None)) (FunctionDef get_right (arguments (__list__ (arg self))) (__list__ (Return (Attribute self right))) (__list__ ) (BinOp MyNode BitOr None)) (FunctionDef get_height (arguments (__list__ (arg self))) (__list__ (Return (Attribute self height))) (__list__ ) int) (FunctionDef set_data (arguments (__list__ (arg self) (arg data Any))) (__list__ (Assign (__list__ (Attribute self data)) data)) (__list__ ) None) (FunctionDef set_left (arguments (__list__ (arg self) (arg node (BinOp MyNode BitOr None)))) (__list__ (Assign (__list__ (Attribute self left)) node)) (__list__ ) None) (FunctionDef set_right (arguments (__list__ (arg self) (arg node (BinOp MyNode BitOr None)))) (__list__ (Assign (__list__ (Attribute self right)) node)) (__list__ ) None) (FunctionDef set_height (arguments (__list__ (arg self) (arg height int))) (__list__ (Assign (__list__ (Attribute self height)) height)) (__list__ ) None))) (FunctionDef get_height (arguments (__list__ (arg node (BinOp MyNode BitOr None)))) (__list__ (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Return 0))) (Return (Call (Attribute node get_height)))) (__list__ ) int) (FunctionDef my_max (arguments (__list__ (arg a int) (arg b int))) (__list__ (If (Compare a (__list__ Gt) (__list__ b)) (__list__ (Return a))) (Return b)) (__list__ ) int) (FunctionDef right_rotation (arguments (__list__ (arg node MyNode))) (__list__ (Expr STRING_2) (Expr (Call print (__list__ STRING_3 (Call (Attribute node get_data))))) (Assign (__list__ ret) (Call (Attribute node get_left))) (Assert (Compare ret (__list__ IsNot) (__list__ None))) (Expr (Call (Attribute node set_left) (__list__ (Call (Attribute ret get_right))))) (Expr (Call (Attribute ret set_right) (__list__ node))) (Assign (__list__ h1) (BinOp (Call my_max (__list__ (Call get_height (__list__ (Call (Attribute node get_right)))) (Call get_height (__list__ (Call (Attribute node get_left)))))) Add 1)) (Expr (Call (Attribute node set_height) (__list__ h1))) (Assign (__list__ h2) (BinOp (Call my_max (__list__ (Call get_height (__list__ (Call (Attribute ret get_right)))) (Call get_height (__list__ (Call (Attribute ret get_left)))))) Add 1)) (Expr (Call (Attribute ret set_height) (__list__ h2))) (Return ret)) (__list__ ) MyNode) (FunctionDef left_rotation (arguments (__list__ (arg node MyNode))) (__list__ (Expr STRING_4) (Expr (Call print (__list__ STRING_5 (Call (Attribute node get_data))))) (Assign (__list__ ret) (Call (Attribute node get_right))) (Assert (Compare ret (__list__ IsNot) (__list__ None))) (Expr (Call (Attribute node set_right) (__list__ (Call (Attribute ret get_left))))) (Expr (Call (Attribute ret set_left) (__list__ node))) (Assign (__list__ h1) (BinOp (Call my_max (__list__ (Call get_height (__list__ (Call (Attribute node get_right)))) (Call get_height (__list__ (Call (Attribute node get_left)))))) Add 1)) (Expr (Call (Attribute node set_height) (__list__ h1))) (Assign (__list__ h2) (BinOp (Call my_max (__list__ (Call get_height (__list__ (Call (Attribute ret get_right)))) (Call get_height (__list__ (Call (Attribute ret get_left)))))) Add 1)) (Expr (Call (Attribute ret set_height) (__list__ h2))) (Return ret)) (__list__ ) MyNode) (FunctionDef lr_rotation (arguments (__list__ (arg node MyNode))) (__list__ (Expr STRING_6) (Assign (__list__ left_child) (Call (Attribute node get_left))) (Assert (Compare left_child (__list__ IsNot) (__list__ None))) (Expr (Call (Attribute node set_left) (__list__ (Call left_rotation (__list__ left_child))))) (Return (Call right_rotation (__list__ node)))) (__list__ ) MyNode) (FunctionDef rl_rotation (arguments (__list__ (arg node MyNode))) (__list__ (Assign (__list__ right_child) (Call (Attribute node get_right))) (Assert (Compare right_child (__list__ IsNot) (__list__ None))) (Expr (Call (Attribute node set_right) (__list__ (Call right_rotation (__list__ right_child))))) (Return (Call left_rotation (__list__ node)))) (__list__ ) MyNode) (FunctionDef insert_node (arguments (__list__ (arg node (BinOp MyNode BitOr None)) (arg data Any))) (__list__ (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Return (Call MyNode (__list__ data))))) (If (Compare data (__list__ Lt) (__list__ (Call (Attribute node get_data)))) (__list__ (Expr (Call (Attribute node set_left) (__list__ (Call insert_node (__list__ (Call (Attribute node get_left)) data))))) (If (Compare (BinOp (Call get_height (__list__ (Call (Attribute node get_left)))) Sub (Call get_height (__list__ (Call (Attribute node get_right))))) (__list__ Eq) (__list__ 2)) (__list__ (Assign (__list__ left_child) (Call (Attribute node get_left))) (Assert (Compare left_child (__list__ IsNot) (__list__ None))) (If (Compare data (__list__ Lt) (__list__ (Call (Attribute left_child get_data)))) (__list__ (Assign (__list__ node) (Call right_rotation (__list__ node)))) (__list__ (Assign (__list__ node) (Call lr_rotation (__list__ node)))))))) (__list__ (Expr (Call (Attribute node set_right) (__list__ (Call insert_node (__list__ (Call (Attribute node get_right)) data))))) (If (Compare (BinOp (Call get_height (__list__ (Call (Attribute node get_right)))) Sub (Call get_height (__list__ (Call (Attribute node get_left))))) (__list__ Eq) (__list__ 2)) (__list__ (Assign (__list__ right_child) (Call (Attribute node get_right))) (Assert (Compare right_child (__list__ IsNot) (__list__ None))) (If (Compare data (__list__ Lt) (__list__ (Call (Attribute right_child get_data)))) (__list__ (Assign (__list__ node) (Call rl_rotation (__list__ node)))) (__list__ (Assign (__list__ node) (Call left_rotation (__list__ node))))))))) (Assign (__list__ h1) (BinOp (Call my_max (__list__ (Call get_height (__list__ (Call (Attribute node get_right)))) (Call get_height (__list__ (Call (Attribute node get_left)))))) Add 1)) (Expr (Call (Attribute node set_height) (__list__ h1))) (Return node)) (__list__ ) (BinOp MyNode BitOr None)) (FunctionDef get_right_most (arguments (__list__ (arg root MyNode))) (__list__ (While True (__list__ (Assign (__list__ right_child) (Call (Attribute root get_right))) (If (Compare right_child (__list__ Is) (__list__ None)) (__list__ Break)) (Assign (__list__ root) right_child))) (Return (Call (Attribute root get_data)))) (__list__ ) Any) (FunctionDef get_left_most (arguments (__list__ (arg root MyNode))) (__list__ (While True (__list__ (Assign (__list__ left_child) (Call (Attribute root get_left))) (If (Compare left_child (__list__ Is) (__list__ None)) (__list__ Break)) (Assign (__list__ root) left_child))) (Return (Call (Attribute root get_data)))) (__list__ ) Any) (FunctionDef del_node (arguments (__list__ (arg root MyNode) (arg data Any))) (__list__ (Assign (__list__ left_child) (Call (Attribute root get_left))) (Assign (__list__ right_child) (Call (Attribute root get_right))) (If (Compare (Call (Attribute root get_data)) (__list__ Eq) (__list__ data)) (__list__ (If (BoolOp And (__list__ (Compare left_child (__list__ IsNot) (__list__ None)) (Compare right_child (__list__ IsNot) (__list__ None)))) (__list__ (Assign (__list__ temp_data) (Call get_left_most (__list__ right_child))) (Expr (Call (Attribute root set_data) (__list__ temp_data))) (Expr (Call (Attribute root set_right) (__list__ (Call del_node (__list__ right_child temp_data)))))) (__list__ (If (Compare left_child (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ root) left_child)) (__list__ (If (Compare right_child (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ root) right_child)) (__list__ (Return None)))))))) (__list__ (If (Compare (Call (Attribute root get_data)) (__list__ Gt) (__list__ data)) (__list__ (If (Compare left_child (__list__ Is) (__list__ None)) (__list__ (Expr (Call print (__list__ STRING_7))) (Return root)) (__list__ (Expr (Call (Attribute root set_left) (__list__ (Call del_node (__list__ left_child data)))))))) (__list__ (If (Compare right_child (__list__ Is) (__list__ None)) (__list__ (Return root)) (__list__ (Expr (Call (Attribute root set_right) (__list__ (Call del_node (__list__ right_child data))))))))))) (If (Compare (BinOp (Call get_height (__list__ right_child)) Sub (Call get_height (__list__ left_child))) (__list__ Eq) (__list__ 2)) (__list__ (Assert (Compare right_child (__list__ IsNot) (__list__ None))) (If (Compare (Call get_height (__list__ (Call (Attribute right_child get_right)))) (__list__ Gt) (__list__ (Call get_height (__list__ (Call (Attribute right_child get_left)))))) (__list__ (Assign (__list__ root) (Call left_rotation (__list__ root)))) (__list__ (Assign (__list__ root) (Call rl_rotation (__list__ root)))))) (__list__ (If (Compare (BinOp (Call get_height (__list__ right_child)) Sub (Call get_height (__list__ left_child))) (__list__ Eq) (__list__ (UnaryOp USub 2))) (__list__ (Assert (Compare left_child (__list__ IsNot) (__list__ None))) (If (Compare (Call get_height (__list__ (Call (Attribute left_child get_left)))) (__list__ Gt) (__list__ (Call get_height (__list__ (Call (Attribute left_child get_right)))))) (__list__ (Assign (__list__ root) (Call right_rotation (__list__ root)))) (__list__ (Assign (__list__ root) (Call lr_rotation (__list__ root))))))))) (Assign (__list__ height) (BinOp (Call my_max (__list__ (Call get_height (__list__ (Call (Attribute root get_right)))) (Call get_height (__list__ (Call (Attribute root get_left)))))) Add 1)) (Expr (Call (Attribute root set_height) (__list__ height))) (Return root)) (__list__ ) (BinOp MyNode BitOr None)) (ClassDef AVLtree (__list__ (Expr STRING_8) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self root) (BinOp MyNode BitOr None) None 0)) (__list__ ) None) (FunctionDef get_height (arguments (__list__ (arg self))) (__list__ (Return (Call get_height (__list__ (Attribute self root))))) (__list__ ) int) (FunctionDef insert (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr (Call print (__list__ (BinOp STRING_9 Add (Call str (__list__ data)))))) (Assign (__list__ (Attribute self root)) (Call insert_node (__list__ (Attribute self root) data)))) (__list__ ) None) (FunctionDef del_node (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr (Call print (__list__ (BinOp STRING_10 Add (Call str (__list__ data)))))) (If (Compare (Attribute self root) (__list__ Is) (__list__ None)) (__list__ (Expr (Call print (__list__ STRING_11))) Return)) (Assign (__list__ (Attribute self root)) (Call del_node (__list__ (Attribute self root) data)))) (__list__ ) None) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ output) STRING_10) (Assign (__list__ q) (Call MyQueue)) (Expr (Call (Attribute q push) (__list__ (Attribute self root)))) (Assign (__list__ layer) (Call (Attribute self get_height))) (If (Compare layer (__list__ Eq) (__list__ 0)) (__list__ (Return output))) (Assign (__list__ cnt) 0) (While (UnaryOp Not (Call (Attribute q is_empty))) (__list__ (Assign (__list__ node) (Call (Attribute q pop))) (Assign (__list__ space) (BinOp STRING_12 Mult (Call int (__list__ (Call (Attribute math pow) (__list__ 2 (BinOp layer Sub 1))))))) (AugAssign output Add space) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (AugAssign output Add STRING_3) (Expr (Call (Attribute q push) (__list__ None))) (Expr (Call (Attribute q push) (__list__ None)))) (__list__ (AugAssign output Add (Call str (__list__ (Call (Attribute node get_data))))) (Expr (Call (Attribute q push) (__list__ (Call (Attribute node get_left))))) (Expr (Call (Attribute q push) (__list__ (Call (Attribute node get_right))))))) (AugAssign output Add space) (Assign (__list__ cnt) (BinOp cnt Add 1)) (For i (Call range (__list__ 100)) (__list__ (If (Compare cnt (__list__ Eq) (__list__ (BinOp (Call (Attribute math pow) (__list__ 2 i)) Sub 1))) (__list__ (Assign (__list__ layer) (BinOp layer Sub 1)) (If (Compare layer (__list__ Eq) (__list__ 0)) (__list__ (AugAssign output Add STRING_12) (Return output))) (AugAssign output Add STRING_13) Break)))))) (AugAssign output Add STRING_12) (Return output)) (__list__ ) str))) (FunctionDef _test arguments (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod)))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call _test)) (Assign (__list__ t) (Call AVLtree)) (Assign (__list__ lst) (Call list (__list__ (Call range (__list__ 10))))) (Expr (Call (Attribute random shuffle) (__list__ lst))) (For i lst (__list__ (Expr (Call (Attribute t insert) (__list__ i))) (Expr (Call print (__list__ (Call str (__list__ t))))))) (Expr (Call (Attribute random shuffle) (__list__ lst))) (For i lst (__list__ (Expr (Call (Attribute t del_node) (__list__ i))) (Expr (Call print (__list__ (Call str (__list__ t))))))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom random (__list__ (alias random)) 0) (ClassDef Node (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg value (BinOp int BitOr None))) (__list__ None)) (__list__ (Assign (__list__ (Attribute self value)) value) (Assign (__list__ (Attribute self prior)) (Call random)) (AnnAssign (Attribute self left) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp Node BitOr None) None 0)) (__list__ )) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (ImportFrom pprint (__list__ (alias pformat)) 0) (If (BoolOp And (__list__ (Compare (Attribute self left) (__list__ Is) (__list__ None)) (Compare (Attribute self right) (__list__ Is) (__list__ None)))) (__list__ (Return (JoinedStr (__list__ STRING_1 (FormattedValue (Attribute self value) -1) STRING_2 (FormattedValue (Attribute self prior) -1 (JoinedStr (__list__ STRING_3))) STRING_1)))) (__list__ (Return (Call pformat (__list__ (Dict (__list__ (JoinedStr (__list__ (FormattedValue (Attribute self value) -1) STRING_2 (FormattedValue (Attribute self prior) -1 (JoinedStr (__list__ STRING_3)))))) (__list__ (Tuple (__list__ (Attribute self left) (Attribute self right)))))) (__list__ (keyword indent 1))))))) (__list__ ) str) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ value) (BinOp (Call str (__list__ (Attribute self value))) Add STRING_12)) (Assign (__list__ left) (Call str (__list__ (BoolOp Or (__list__ (Attribute self left) STRING_10))))) (Assign (__list__ right) (Call str (__list__ (BoolOp Or (__list__ (Attribute self right) STRING_10))))) (Return (BinOp (BinOp value Add left) Add right))) (__list__ ) str))) (FunctionDef split (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg value int))) (__list__ (Expr STRING_4) (If (Compare root (__list__ Is) (__list__ None)) (__list__ (Return (Tuple (__list__ None None)))) (__list__ (If (Compare (Attribute root value) (__list__ Is) (__list__ None)) (__list__ (Return (Tuple (__list__ None None)))) (__list__ (If (Compare value (__list__ Lt) (__list__ (Attribute root value))) (__list__ (Expr STRING_5) (Assign (__list__ (Tuple (__list__ left (Attribute root left)))) (Call split (__list__ (Attribute root left) value))) (Return (Tuple (__list__ left root)))) (__list__ (Expr STRING_6) (Assign (__list__ (Tuple (__list__ (Attribute root right) right))) (Call split (__list__ (Attribute root right) value))) (Return (Tuple (__list__ root right)))))))))) (__list__ ) (Subscript tuple (Tuple (__list__ (BinOp Node BitOr None) (BinOp Node BitOr None))))) (FunctionDef merge (arguments (__list__ (arg left (BinOp Node BitOr None)) (arg right (BinOp Node BitOr None)))) (__list__ (Expr STRING_7) (If (BoolOp Or (__list__ (UnaryOp Not left) (UnaryOp Not right))) (__list__ (Return (BoolOp Or (__list__ left right)))) (__list__ (If (Compare (Attribute left prior) (__list__ Lt) (__list__ (Attribute right prior))) (__list__ (Expr STRING_8) (Assign (__list__ (Attribute left right)) (Call merge (__list__ (Attribute left right) right))) (Return left)) (__list__ (Expr STRING_9) (Assign (__list__ (Attribute right left)) (Call merge (__list__ left (Attribute right left)))) (Return right)))))) (__list__ ) (BinOp Node BitOr None)) (FunctionDef insert (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg value int))) (__list__ (Expr STRING_10) (Assign (__list__ node) (Call Node (__list__ value))) (Assign (__list__ (Tuple (__list__ left right))) (Call split (__list__ root value))) (Return (Call merge (__list__ (Call merge (__list__ left node)) right)))) (__list__ ) (BinOp Node BitOr None)) (FunctionDef erase (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg value int))) (__list__ (Expr STRING_11) (Assign (__list__ (Tuple (__list__ left right))) (Call split (__list__ root (BinOp value Sub 1)))) (Assign (__list__ (Tuple (__list__ _ right))) (Call split (__list__ right value))) (Return (Call merge (__list__ left right)))) (__list__ ) (BinOp Node BitOr None)) (FunctionDef inorder (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_12) (If (UnaryOp Not root) (__list__ Return) (__list__ (Expr (Call inorder (__list__ (Attribute root left)))) (Expr (Call print (__list__ (Attribute root value)) (__list__ (keyword end STRING_13)))) (Expr (Call inorder (__list__ (Attribute root right))))))) (__list__ ) None) (FunctionDef interact_treap (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg args str))) (__list__ (Expr STRING_14) (For arg (Call (Attribute args split)) (__list__ (If (Compare (Subscript arg 0) (__list__ Eq) (__list__ STRING_1)) (__list__ (Assign (__list__ root) (Call insert (__list__ root (Call int (__list__ (Subscript arg (Slice 1)))))))) (__list__ (If (Compare (Subscript arg 0) (__list__ Eq) (__list__ STRING_2)) (__list__ (Assign (__list__ root) (Call erase (__list__ root (Call int (__list__ (Subscript arg (Slice 1)))))))) (__list__ (Expr (Call print (__list__ STRING_15))))))))) (Return root)) (__list__ ) (BinOp Node BitOr None)) (FunctionDef main arguments (__list__ (Expr STRING_16) (Assign (__list__ root) None) (Expr (Call print (__list__ STRING_17))) (Assign (__list__ args) (Call input)) (While (Compare args (__list__ NotEq) (__list__ STRING_18)) (__list__ (Assign (__list__ root) (Call interact_treap (__list__ root args))) (Expr (Call print (__list__ root))) (Assign (__list__ args) (Call input)))) (Expr (Call print (__list__ STRING_19)))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Expr (Call main)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Callable)) 0) (ImportFrom typing (__list__ (alias Any) (alias Generic) (alias TypeVar)) 0) (Assign (__list__ T) (Call TypeVar (__list__ STRING_1))) (ClassDef SegmentTree (__list__ (Subscript Generic T)) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg arr (Subscript list T)) (arg fnc (Subscript Callable (Tuple (__list__ (List (__list__ T T)) T)))))) (__list__ (Expr STRING_1) (AnnAssign any_type (BinOp Any BitOr T) None 1) (AnnAssign (Attribute self N) int (Call len (__list__ arr)) 0) (AnnAssign (Attribute self st) (Subscript list T) (BinOp (ListComp any_type (__list__ (comprehension _ (Call range (__list__ (Attribute self N))) 0))) Add arr) 0) (Assign (__list__ (Attribute self fn)) fnc) (Expr (Call (Attribute self build)))) (__list__ ) None) (FunctionDef build (arguments (__list__ (arg self))) (__list__ (For p (Call range (__list__ (BinOp (Attribute self N) Sub 1) 0 (UnaryOp USub 1))) (__list__ (Assign (__list__ (Subscript (Attribute self st) p)) (Call (Attribute self fn) (__list__ (Subscript (Attribute self st) (BinOp p Mult 2)) (Subscript (Attribute self st) (BinOp (BinOp p Mult 2) Add 1)))))))) (__list__ ) None) (FunctionDef update (arguments (__list__ (arg self) (arg p int) (arg v T))) (__list__ (Expr STRING_2) (AugAssign p Add (Attribute self N)) (Assign (__list__ (Subscript (Attribute self st) p)) v) (While (Compare p (__list__ Gt) (__list__ 1)) (__list__ (Assign (__list__ p) (BinOp p FloorDiv 2)) (Assign (__list__ (Subscript (Attribute self st) p)) (Call (Attribute self fn) (__list__ (Subscript (Attribute self st) (BinOp p Mult 2)) (Subscript (Attribute self st) (BinOp (BinOp p Mult 2) Add 1)))))))) (__list__ ) None) (FunctionDef query (arguments (__list__ (arg self) (arg left int) (arg right int))) (__list__ (Expr STRING_3) (Assign (__list__ (Tuple (__list__ left right))) (Tuple (__list__ (BinOp left Add (Attribute self N)) (BinOp right Add (Attribute self N))))) (AnnAssign res (BinOp T BitOr None) None 1) (While (Compare left (__list__ LtE) (__list__ right)) (__list__ (If (Compare (BinOp left Mod 2) (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ res) (IfExp (Compare res (__list__ Is) (__list__ None)) (Subscript (Attribute self st) left) (Call (Attribute self fn) (__list__ res (Subscript (Attribute self st) left))))))) (If (Compare (BinOp right Mod 2) (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ res) (IfExp (Compare res (__list__ Is) (__list__ None)) (Subscript (Attribute self st) right) (Call (Attribute self fn) (__list__ res (Subscript (Attribute self st) right))))))) (Assign (__list__ (Tuple (__list__ left right))) (Tuple (__list__ (BinOp (BinOp left Add 1) FloorDiv 2) (BinOp (BinOp right Sub 1) FloorDiv 2)))))) (Return res)) (__list__ ) (BinOp T BitOr None)))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom functools (__list__ (alias reduce)) 0) (Assign (__list__ test_array) (List (__list__ 1 10 (UnaryOp USub 2) 9 (UnaryOp USub 3) 8 4 (UnaryOp USub 7) 5 6 11 (UnaryOp USub 12)))) (Assign (__list__ test_updates) (Dict (__list__ 0 1 2 3 4 5 6 7 8 9 10 11) (__list__ 7 2 6 (UnaryOp USub 14) 5 4 7 (UnaryOp USub 10) 9 10 12 1))) (Assign (__list__ min_segment_tree) (Call SegmentTree (__list__ test_array min))) (Assign (__list__ max_segment_tree) (Call SegmentTree (__list__ test_array max))) (Assign (__list__ sum_segment_tree) (Call SegmentTree (__list__ test_array (Lambda (arguments (__list__ (arg a) (arg b))) (BinOp a Add b))))) (FunctionDef test_all_segments arguments (__list__ (Expr STRING_4) (For i (Call range (__list__ (Call len (__list__ test_array)))) (__list__ (For j (Call range (__list__ i (Call len (__list__ test_array)))) (__list__ (Assign (__list__ min_range) (Call reduce (__list__ min (Subscript test_array (Slice i (BinOp j Add 1)))))) (Assign (__list__ max_range) (Call reduce (__list__ max (Subscript test_array (Slice i (BinOp j Add 1)))))) (Assign (__list__ sum_range) (Call reduce (__list__ (Lambda (arguments (__list__ (arg a) (arg b))) (BinOp a Add b)) (Subscript test_array (Slice i (BinOp j Add 1)))))) (Assert (Compare min_range (__list__ Eq) (__list__ (Call (Attribute min_segment_tree query) (__list__ i j))))) (Assert (Compare max_range (__list__ Eq) (__list__ (Call (Attribute max_segment_tree query) (__list__ i j))))) (Assert (Compare sum_range (__list__ Eq) (__list__ (Call (Attribute sum_segment_tree query) (__list__ i j)))))))))) (__list__ ) None) (Expr (Call test_all_segments)) (For (Tuple (__list__ index value)) (Call (Attribute test_updates items)) (__list__ (Assign (__list__ (Subscript test_array index)) value) (Expr (Call (Attribute min_segment_tree update) (__list__ index value))) (Expr (Call (Attribute max_segment_tree update) (__list__ index value))) (Expr (Call (Attribute sum_segment_tree update) (__list__ index value))) (Expr (Call test_all_segments)))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (Expr STRING_1) (AnnAssign value int 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (If (Attribute self left) (__list__ (Expr (YieldFrom (Attribute self left))))) (Expr (Yield (Attribute self value))) (If (Attribute self right) (__list__ (Expr (YieldFrom (Attribute self right)))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef mirror (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Assign (__list__ (Tuple (__list__ (Attribute self left) (Attribute self right)))) (Tuple (__list__ (Attribute self right) (Attribute self left)))) (If (Attribute self left) (__list__ (Expr (Call (Attribute (Attribute self left) mirror))))) (If (Attribute self right) (__list__ (Expr (Call (Attribute (Attribute self right) mirror))))) (Return self)) (__list__ ) Node)) (__list__ dataclass)) (FunctionDef make_tree_seven arguments (__list__ (Expr STRING_3) (Assign (__list__ tree) (Call Node (__list__ 1))) (Assign (__list__ (Attribute tree left)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute tree right)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute tree left) left)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute (Attribute tree left) right)) (Call Node (__list__ 5))) (Assign (__list__ (Attribute (Attribute tree right) left)) (Call Node (__list__ 6))) (Assign (__list__ (Attribute (Attribute tree right) right)) (Call Node (__list__ 7))) (Return tree)) (__list__ ) Node) (FunctionDef make_tree_nine arguments (__list__ (Expr STRING_4) (Assign (__list__ tree) (Call Node (__list__ 1))) (Assign (__list__ (Attribute tree left)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute tree right)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute tree left) left)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute (Attribute tree left) right)) (Call Node (__list__ 5))) (Assign (__list__ (Attribute (Attribute tree right) right)) (Call Node (__list__ 6))) (Assign (__list__ (Attribute (Attribute (Attribute tree left) left) left)) (Call Node (__list__ 7))) (Assign (__list__ (Attribute (Attribute (Attribute tree left) left) right)) (Call Node (__list__ 8))) (Assign (__list__ (Attribute (Attribute (Attribute tree left) right) right)) (Call Node (__list__ 9))) (Return tree)) (__list__ ) Node) (FunctionDef main arguments (__list__ (Expr STRING_5) (Assign (__list__ trees) (Dict (__list__ STRING_6 STRING_7 STRING_8) (__list__ (Call Node (__list__ 0)) (Call make_tree_seven) (Call make_tree_nine)))) (For (Tuple (__list__ name tree)) (Call (Attribute trees items)) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ STRING_9 (FormattedValue name -1) STRING_10 (FormattedValue (Call tuple (__list__ tree)) -1)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_11 (FormattedValue name -1) STRING_10 (FormattedValue (Call tuple (__list__ (Call (Attribute tree mirror)))) -1))))))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Expr (Call main)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom collections.abc (__list__ (alias Sequence)) 0) (ImportFrom queue (__list__ (alias Queue)) 0) (ClassDef SegmentTreeNode (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg start) (arg end) (arg val) (arg left) (arg right)) (__list__ None None)) (__list__ (Assign (__list__ (Attribute self start)) start) (Assign (__list__ (Attribute self end)) end) (Assign (__list__ (Attribute self val)) val) (Assign (__list__ (Attribute self mid)) (BinOp (BinOp start Add end) FloorDiv 2)) (Assign (__list__ (Attribute self left)) left) (Assign (__list__ (Attribute self right)) right)) (__list__ )) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Return (JoinedStr (__list__ STRING_1 (FormattedValue (Attribute self start) -1) STRING_2 (FormattedValue (Attribute self end) -1) STRING_3 (FormattedValue (Attribute self val) -1) STRING_3)))) (__list__ )))) (ClassDef SegmentTree (__list__ (Expr STRING_4) (FunctionDef __init__ (arguments (__list__ (arg self) (arg collection Sequence) (arg function))) (__list__ (Assign (__list__ (Attribute self collection)) collection) (Assign (__list__ (Attribute self fn)) function) (If (Attribute self collection) (__list__ (Assign (__list__ (Attribute self root)) (Call (Attribute self _build_tree) (__list__ 0 (BinOp (Call len (__list__ collection)) Sub 1))))))) (__list__ )) (FunctionDef update (arguments (__list__ (arg self) (arg i) (arg val))) (__list__ (Expr STRING_5) (Expr (Call (Attribute self _update_tree) (__list__ (Attribute self root) i val)))) (__list__ )) (FunctionDef query_range (arguments (__list__ (arg self) (arg i) (arg j))) (__list__ (Expr STRING_6) (Return (Call (Attribute self _query_range) (__list__ (Attribute self root) i j)))) (__list__ )) (FunctionDef _build_tree (arguments (__list__ (arg self) (arg start) (arg end))) (__list__ (If (Compare start (__list__ Eq) (__list__ end)) (__list__ (Return (Call SegmentTreeNode (__list__ start end (Subscript (Attribute self collection) start)))))) (Assign (__list__ mid) (BinOp (BinOp start Add end) FloorDiv 2)) (Assign (__list__ left) (Call (Attribute self _build_tree) (__list__ start mid))) (Assign (__list__ right) (Call (Attribute self _build_tree) (__list__ (BinOp mid Add 1) end))) (Return (Call SegmentTreeNode (__list__ start end (Call (Attribute self fn) (__list__ (Attribute left val) (Attribute right val))) left right)))) (__list__ )) (FunctionDef _update_tree (arguments (__list__ (arg self) (arg node) (arg i) (arg val))) (__list__ (If (BoolOp And (__list__ (Compare (Attribute node start) (__list__ Eq) (__list__ i)) (Compare (Attribute node end) (__list__ Eq) (__list__ i)))) (__list__ (Assign (__list__ (Attribute node val)) val) Return)) (If (Compare i (__list__ LtE) (__list__ (Attribute node mid))) (__list__ (Expr (Call (Attribute self _update_tree) (__list__ (Attribute node left) i val)))) (__list__ (Expr (Call (Attribute self _update_tree) (__list__ (Attribute node right) i val))))) (Assign (__list__ (Attribute node val)) (Call (Attribute self fn) (__list__ (Attribute (Attribute node left) val) (Attribute (Attribute node right) val))))) (__list__ )) (FunctionDef _query_range (arguments (__list__ (arg self) (arg node) (arg i) (arg j))) (__list__ (If (BoolOp And (__list__ (Compare (Attribute node start) (__list__ Eq) (__list__ i)) (Compare (Attribute node end) (__list__ Eq) (__list__ j)))) (__list__ (Return (Attribute node val)))) (If (Compare i (__list__ LtE) (__list__ (Attribute node mid))) (__list__ (If (Compare j (__list__ LtE) (__list__ (Attribute node mid))) (__list__ (Return (Call (Attribute self _query_range) (__list__ (Attribute node left) i j)))) (__list__ (Return (Call (Attribute self fn) (__list__ (Call (Attribute self _query_range) (__list__ (Attribute node left) i (Attribute node mid))) (Call (Attribute self _query_range) (__list__ (Attribute node right) (BinOp (Attribute node mid) Add 1) j)))))))) (__list__ (Return (Call (Attribute self _query_range) (__list__ (Attribute node right) i j)))))) (__list__ )) (FunctionDef traverse (arguments (__list__ (arg self))) (__list__ (If (Compare (Attribute self root) (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ queue) (Call Queue)) (Expr (Call (Attribute queue put) (__list__ (Attribute self root)))) (While (UnaryOp Not (Call (Attribute queue empty))) (__list__ (Assign (__list__ node) (Call (Attribute queue get))) (Expr (Yield node)) (If (Compare (Attribute node left) (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call (Attribute queue put) (__list__ (Attribute node left)))))) (If (Compare (Attribute node right) (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call (Attribute queue put) (__list__ (Attribute node right))))))))))) (__list__ )))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias operator))) (For fn (List (__list__ (Attribute operator add) max min)) (__list__ (Expr (Call print (__list__ (BinOp STRING_3 Mult 50)))) (Assign (__list__ arr) (Call SegmentTree (__list__ (List (__list__ 2 1 5 3 4)) fn))) (For node (Call (Attribute arr traverse)) (__list__ (Expr (Call print (__list__ node))))) (Expr (Call print)) (Expr (Call (Attribute arr update) (__list__ 1 5))) (For node (Call (Attribute arr traverse)) (__list__ (Expr (Call print (__list__ node))))) (Expr (Call print)) (Expr (Call print (__list__ (Call (Attribute arr query_range) (__list__ 3 4))))) (Expr (Call print (__list__ (Call (Attribute arr query_range) (__list__ 2 2))))) (Expr (Call print (__list__ (Call (Attribute arr query_range) (__list__ 1 3))))) (Expr (Call print)))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign data int 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (If (Attribute self left) (__list__ (Expr (YieldFrom (Attribute self left))))) (Expr (Yield (Attribute self data))) (If (Attribute self right) (__list__ (Expr (YieldFrom (Attribute self right)))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef is_sum_node (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (If (BoolOp And (__list__ (UnaryOp Not (Attribute self left)) (UnaryOp Not (Attribute self right)))) (__list__ (Return True))) (Assign (__list__ left_sum) (IfExp (Attribute self left) (Call sum (__list__ (Attribute self left))) 0)) (Assign (__list__ right_sum) (IfExp (Attribute self right) (Call sum (__list__ (Attribute self right))) 0)) (Return (Call all (__list__ (Tuple (__list__ (Compare (Attribute self data) (__list__ Eq) (__list__ (BinOp left_sum Add right_sum))) (IfExp (Attribute self left) (Attribute (Attribute self left) is_sum_node) True) (IfExp (Attribute self right) (Attribute (Attribute self right) is_sum_node) True))))))) (__list__ property) bool)) (__list__ dataclass)) (ClassDef BinaryTree (__list__ (AnnAssign root Node 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Return (Call iter (__list__ (Attribute self root))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (Return (Call len (__list__ (Attribute self root))))) (__list__ ) int) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (Return (Call str (__list__ (Call list (__list__ self)))))) (__list__ ) str) (FunctionDef is_sum_tree (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (Return (Attribute (Attribute self root) is_sum_node))) (__list__ property) bool) (FunctionDef build_a_tree (arguments (__list__ (arg cls))) (__list__ (Expr STRING_8) (Assign (__list__ tree) (Call BinaryTree (__list__ (Call Node (__list__ 11))))) (Assign (__list__ root) (Attribute tree root)) (Assign (__list__ (Attribute root left)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute root right)) (Call Node (__list__ 29))) (Assign (__list__ (Attribute (Attribute root left) left)) (Call Node (__list__ 1))) (Assign (__list__ (Attribute (Attribute root left) right)) (Call Node (__list__ 7))) (Assign (__list__ (Attribute (Attribute root right) left)) (Call Node (__list__ 15))) (Assign (__list__ (Attribute (Attribute root right) right)) (Call Node (__list__ 40))) (Assign (__list__ (Attribute (Attribute (Attribute root right) right) left)) (Call Node (__list__ 35))) (Return tree)) (__list__ classmethod) BinaryTree) (FunctionDef build_a_sum_tree (arguments (__list__ (arg cls))) (__list__ (Expr STRING_9) (Assign (__list__ tree) (Call BinaryTree (__list__ (Call Node (__list__ 26))))) (Assign (__list__ root) (Attribute tree root)) (Assign (__list__ (Attribute root left)) (Call Node (__list__ 10))) (Assign (__list__ (Attribute root right)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute root left) left)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute (Attribute root left) right)) (Call Node (__list__ 6))) (Assign (__list__ (Attribute (Attribute root right) right)) (Call Node (__list__ 3))) (Return tree)) (__list__ classmethod) BinaryTree)) (__list__ dataclass)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Assign (__list__ tree) (Call (Attribute BinaryTree build_a_tree))) (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue tree -1) STRING_10 (FormattedValue (Call len (__list__ tree)) -1) STRING_11 (FormattedValue (Attribute tree is_sum_tree) 114) STRING_12))))) (Assign (__list__ tree) (Call (Attribute BinaryTree build_a_sum_tree))) (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue tree -1) STRING_10 (FormattedValue (Call len (__list__ tree)) -1) STRING_11 (FormattedValue (Attribute tree is_sum_tree) 114) STRING_12))))))))",
    "(ProgramStatements (ImportFrom copy (__list__ (alias deepcopy)) 0) (ClassDef FenwickTree (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg arr (BinOp (Subscript list int) BitOr None)) (arg size (BinOp int BitOr None))) (__list__ None None)) (__list__ (Expr STRING_1) (If (BoolOp And (__list__ (Compare arr (__list__ Is) (__list__ None)) (Compare size (__list__ IsNot) (__list__ None)))) (__list__ (Assign (__list__ (Attribute self size)) size) (Assign (__list__ (Attribute self tree)) (BinOp (List (__list__ 0)) Mult size))) (__list__ (If (Compare arr (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call (Attribute self init) (__list__ arr)))) (__list__ (Raise (Call ValueError (__list__ STRING_2)))))))) (__list__ ) None) (FunctionDef init (arguments (__list__ (arg self) (arg arr (Subscript list int)))) (__list__ (Expr STRING_3) (Assign (__list__ (Attribute self size)) (Call len (__list__ arr))) (Assign (__list__ (Attribute self tree)) (Call deepcopy (__list__ arr))) (For i (Call range (__list__ 1 (Attribute self size))) (__list__ (Assign (__list__ j) (Call (Attribute self next_) (__list__ i))) (If (Compare j (__list__ Lt) (__list__ (Attribute self size))) (__list__ (AugAssign (Subscript (Attribute self tree) j) Add (Subscript (Attribute self tree) i))))))) (__list__ ) None) (FunctionDef get_array (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Assign (__list__ arr) (Subscript (Attribute self tree) Slice)) (For i (Call range (__list__ (BinOp (Attribute self size) Sub 1) 0 (UnaryOp USub 1))) (__list__ (Assign (__list__ j) (Call (Attribute self next_) (__list__ i))) (If (Compare j (__list__ Lt) (__list__ (Attribute self size))) (__list__ (AugAssign (Subscript arr j) Sub (Subscript arr i)))))) (Return arr)) (__list__ ) (Subscript list int)) (FunctionDef next_ (arguments (__list__ (arg index int))) (__list__ (Return (BinOp index Add (BinOp index BitAnd (UnaryOp USub index))))) (__list__ staticmethod) int) (FunctionDef prev (arguments (__list__ (arg index int))) (__list__ (Return (BinOp index Sub (BinOp index BitAnd (UnaryOp USub index))))) (__list__ staticmethod) int) (FunctionDef add (arguments (__list__ (arg self) (arg index int) (arg value int))) (__list__ (Expr STRING_5) (If (Compare index (__list__ Eq) (__list__ 0)) (__list__ (AugAssign (Subscript (Attribute self tree) 0) Add value) Return)) (While (Compare index (__list__ Lt) (__list__ (Attribute self size))) (__list__ (AugAssign (Subscript (Attribute self tree) index) Add value) (Assign (__list__ index) (Call (Attribute self next_) (__list__ index)))))) (__list__ ) None) (FunctionDef update (arguments (__list__ (arg self) (arg index int) (arg value int))) (__list__ (Expr STRING_6) (Expr (Call (Attribute self add) (__list__ index (BinOp value Sub (Call (Attribute self get) (__list__ index))))))) (__list__ ) None) (FunctionDef prefix (arguments (__list__ (arg self) (arg right int))) (__list__ (Expr STRING_7) (If (Compare right (__list__ Eq) (__list__ 0)) (__list__ (Return 0))) (Assign (__list__ result) (Subscript (Attribute self tree) 0)) (AugAssign right Sub 1) (While (Compare right (__list__ Gt) (__list__ 0)) (__list__ (AugAssign result Add (Subscript (Attribute self tree) right)) (Assign (__list__ right) (Call (Attribute self prev) (__list__ right))))) (Return result)) (__list__ ) int) (FunctionDef query (arguments (__list__ (arg self) (arg left int) (arg right int))) (__list__ (Expr STRING_8) (Return (BinOp (Call (Attribute self prefix) (__list__ right)) Sub (Call (Attribute self prefix) (__list__ left))))) (__list__ ) int) (FunctionDef get (arguments (__list__ (arg self) (arg index int))) (__list__ (Expr STRING_9) (Return (Call (Attribute self query) (__list__ index (BinOp index Add 1))))) (__list__ ) int) (FunctionDef rank_query (arguments (__list__ (arg self) (arg value int))) (__list__ (Expr STRING_10) (AugAssign value Sub (Subscript (Attribute self tree) 0)) (If (Compare value (__list__ Lt) (__list__ 0)) (__list__ (Return (UnaryOp USub 1)))) (Assign (__list__ j) 1) (While (Compare (BinOp j Mult 2) (__list__ Lt) (__list__ (Attribute self size))) (__list__ (AugAssign j Mult 2))) (Assign (__list__ i) 0) (While (Compare j (__list__ Gt) (__list__ 0)) (__list__ (If (BoolOp And (__list__ (Compare (BinOp i Add j) (__list__ Lt) (__list__ (Attribute self size))) (Compare (Subscript (Attribute self tree) (BinOp i Add j)) (__list__ LtE) (__list__ value)))) (__list__ (AugAssign value Sub (Subscript (Attribute self tree) (BinOp i Add j))) (AugAssign i Add j))) (AugAssign j FloorDiv 2))) (Return i)) (__list__ ) int))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterable) (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom typing (__list__ (alias Any) (alias Self)) 0) (ClassDef Node (__list__ (AnnAssign value int 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1) (AnnAssign parent (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Expr (YieldFrom (BoolOp Or (__list__ (Attribute self left) List)))) (Expr (Yield (Attribute self value))) (Expr (YieldFrom (BoolOp Or (__list__ (Attribute self right) List))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (ImportFrom pprint (__list__ (alias pformat)) 0) (If (BoolOp And (__list__ (Compare (Attribute self left) (__list__ Is) (__list__ None)) (Compare (Attribute self right) (__list__ Is) (__list__ None)))) (__list__ (Return (Call str (__list__ (Attribute self value)))))) (Return (Call pformat (__list__ (Dict (__list__ (JoinedStr (__list__ (FormattedValue (Attribute self value) -1)))) (__list__ (Tuple (__list__ (Attribute self left) (Attribute self right)))))) (__list__ (keyword indent 1))))) (__list__ ) str) (FunctionDef is_right (arguments (__list__ (arg self))) (__list__ (Return (Call bool (__list__ (BoolOp And (__list__ (Attribute self parent) (Compare self (__list__ Is) (__list__ (Attribute (Attribute self parent) right))))))))) (__list__ property) bool)) (__list__ dataclass)) (ClassDef BinarySearchTree (__list__ (AnnAssign root (BinOp Node BitOr None) None 1) (FunctionDef __bool__ (arguments (__list__ (arg self))) (__list__ (Return (Call bool (__list__ (Attribute self root))))) (__list__ ) bool) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr (YieldFrom (BoolOp Or (__list__ (Attribute self root) List))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call str (__list__ (Attribute self root))))) (__list__ ) str) (FunctionDef __reassign_nodes (arguments (__list__ (arg self) (arg node Node) (arg new_children (BinOp Node BitOr None)))) (__list__ (If (Compare new_children (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute new_children parent)) (Attribute node parent)))) (If (Compare (Attribute node parent) (__list__ IsNot) (__list__ None)) (__list__ (If (Attribute node is_right) (__list__ (Assign (__list__ (Attribute (Attribute node parent) right)) new_children)) (__list__ (Assign (__list__ (Attribute (Attribute node parent) left)) new_children)))) (__list__ (Assign (__list__ (Attribute self root)) new_children)))) (__list__ ) None) (FunctionDef empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (UnaryOp Not (Attribute self root)))) (__list__ ) bool) (FunctionDef __insert (arguments (__list__ (arg self) (arg value))) (__list__ (Expr STRING_4) (Assign (__list__ new_node) (Call Node (__list__ value))) (If (Call (Attribute self empty)) (__list__ (Assign (__list__ (Attribute self root)) new_node)) (__list__ (Assign (__list__ parent_node) (Attribute self root)) (If (Compare parent_node (__list__ Is) (__list__ None)) (__list__ Return)) (While True (__list__ (If (Compare value (__list__ Lt) (__list__ (Attribute parent_node value))) (__list__ (If (Compare (Attribute parent_node left) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute parent_node left)) new_node) Break) (__list__ (Assign (__list__ parent_node) (Attribute parent_node left))))) (__list__ (If (Compare (Attribute parent_node right) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute parent_node right)) new_node) Break) (__list__ (Assign (__list__ parent_node) (Attribute parent_node right)))))))) (Assign (__list__ (Attribute new_node parent)) parent_node)))) (__list__ ) None) (FunctionDef insert (arguments (__list__ (arg self)) (arg values)) (__list__ (For value values (__list__ (Expr (Call (Attribute self __insert) (__list__ value))))) (Return self)) (__list__ ) Self) (FunctionDef search (arguments (__list__ (arg self) (arg value))) (__list__ (Expr STRING_5) (If (Call (Attribute self empty)) (__list__ (Raise (Call IndexError (__list__ STRING_6)))) (__list__ (Assign (__list__ node) (Attribute self root)) (While (BoolOp And (__list__ (Compare node (__list__ IsNot) (__list__ None)) (Compare (Attribute node value) (__list__ IsNot) (__list__ value)))) (__list__ (Assign (__list__ node) (IfExp (Compare value (__list__ Lt) (__list__ (Attribute node value))) (Attribute node left) (Attribute node right))))) (Return node)))) (__list__ ) (BinOp Node BitOr None)) (FunctionDef get_max (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None))) (__list__ None)) (__list__ (Expr STRING_7) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (If (Compare (Attribute self root) (__list__ Is) (__list__ None)) (__list__ (Return None))) (Assign (__list__ node) (Attribute self root)))) (If (UnaryOp Not (Call (Attribute self empty))) (__list__ (While (Compare (Attribute node right) (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ node) (Attribute node right)))))) (Return node)) (__list__ ) (BinOp Node BitOr None)) (FunctionDef get_min (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None))) (__list__ None)) (__list__ (Expr STRING_8) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ node) (Attribute self root)))) (If (Compare (Attribute self root) (__list__ Is) (__list__ None)) (__list__ (Return None))) (If (UnaryOp Not (Call (Attribute self empty))) (__list__ (Assign (__list__ node) (Attribute self root)) (While (Compare (Attribute node left) (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ node) (Attribute node left)))))) (Return node)) (__list__ ) (BinOp Node BitOr None)) (FunctionDef remove (arguments (__list__ (arg self) (arg value int))) (__list__ (Assign (__list__ node) (Call (Attribute self search) (__list__ value))) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ msg) (JoinedStr (__list__ STRING_9 (FormattedValue value -1) STRING_10))) (Raise (Call ValueError (__list__ msg))))) (If (BoolOp And (__list__ (Compare (Attribute node left) (__list__ Is) (__list__ None)) (Compare (Attribute node right) (__list__ Is) (__list__ None)))) (__list__ (Expr (Call (Attribute self __reassign_nodes) (__list__ node None)))) (__list__ (If (Compare (Attribute node left) (__list__ Is) (__list__ None)) (__list__ (Expr (Call (Attribute self __reassign_nodes) (__list__ node (Attribute node right))))) (__list__ (If (Compare (Attribute node right) (__list__ Is) (__list__ None)) (__list__ (Expr (Call (Attribute self __reassign_nodes) (__list__ node (Attribute node left))))) (__list__ (Assign (__list__ predecessor) (Call (Attribute self get_max) (__list__ (Attribute node left)))) (Expr (Call (Attribute self remove) (__list__ (Attribute predecessor value)))) (Assign (__list__ (Attribute node value)) (Attribute predecessor value))))))))) (__list__ ) None) (FunctionDef preorder_traverse (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)))) (__list__ (If (Compare node (__list__ IsNot) (__list__ None)) (__list__ (Expr (Yield node)) (Expr (YieldFrom (Call (Attribute self preorder_traverse) (__list__ (Attribute node left))))) (Expr (YieldFrom (Call (Attribute self preorder_traverse) (__list__ (Attribute node right)))))))) (__list__ ) Iterable) (FunctionDef traversal_tree (arguments (__list__ (arg self) (arg traversal_function)) (__list__ None)) (__list__ (Expr STRING_11) (If (Compare traversal_function (__list__ Is) (__list__ None)) (__list__ (Return (Call (Attribute self preorder_traverse) (__list__ (Attribute self root))))) (__list__ (Return (Call traversal_function (__list__ (Attribute self root))))))) (__list__ ) Any) (FunctionDef inorder (arguments (__list__ (arg self) (arg arr list) (arg node (BinOp Node BitOr None)))) (__list__ (Expr STRING_12) (If node (__list__ (Expr (Call (Attribute self inorder) (__list__ arr (Attribute node left)))) (Expr (Call (Attribute arr append) (__list__ (Attribute node value)))) (Expr (Call (Attribute self inorder) (__list__ arr (Attribute node right))))))) (__list__ ) None) (FunctionDef find_kth_smallest (arguments (__list__ (arg self) (arg k int) (arg node Node))) (__list__ (Expr STRING_13) (AnnAssign arr (Subscript list int) List 1) (Expr (Call (Attribute self inorder) (__list__ arr node))) (Return (Subscript arr (BinOp k Sub 1)))) (__list__ ) int)) (__list__ dataclass)) (FunctionDef inorder (arguments (__list__ (arg curr_node (BinOp Node BitOr None)))) (__list__ (Expr STRING_14) (Assign (__list__ node_list) List) (If (Compare curr_node (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ node_list) (List (__list__ (Starred (Call inorder (__list__ (Attribute curr_node left)))) curr_node (Starred (Call inorder (__list__ (Attribute curr_node right))))))))) (Return node_list)) (__list__ ) (Subscript list Node)) (FunctionDef postorder (arguments (__list__ (arg curr_node (BinOp Node BitOr None)))) (__list__ (Expr STRING_15) (Assign (__list__ node_list) List) (If (Compare curr_node (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ node_list) (BinOp (BinOp (Call postorder (__list__ (Attribute curr_node left))) Add (Call postorder (__list__ (Attribute curr_node right)))) Add (List (__list__ curr_node)))))) (Return node_list)) (__list__ ) (Subscript list Node)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod) (__list__ (keyword verbose True)))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections (__list__ (alias deque)) 0) (ImportFrom collections.abc (__list__ (alias Generator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign data int 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1)) (__list__ dataclass)) (FunctionDef make_tree arguments (__list__ (Expr STRING_0) (Assign (__list__ tree) (Call Node (__list__ 1))) (Assign (__list__ (Attribute tree left)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute tree right)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute tree left) left)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute (Attribute tree left) right)) (Call Node (__list__ 5))) (Return tree)) (__list__ ) (BinOp Node BitOr None)) (FunctionDef preorder (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_1) (If (UnaryOp Not root) (__list__ Return)) (Expr (Yield (Attribute root data))) (Expr (YieldFrom (Call preorder (__list__ (Attribute root left))))) (Expr (YieldFrom (Call preorder (__list__ (Attribute root right)))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (FunctionDef postorder (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_2) (If (UnaryOp Not root) (__list__ Return)) (Expr (YieldFrom (Call postorder (__list__ (Attribute root left))))) (Expr (YieldFrom (Call postorder (__list__ (Attribute root right))))) (Expr (Yield (Attribute root data)))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (FunctionDef inorder (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_3) (If (UnaryOp Not root) (__list__ Return)) (Expr (YieldFrom (Call inorder (__list__ (Attribute root left))))) (Expr (Yield (Attribute root data))) (Expr (YieldFrom (Call inorder (__list__ (Attribute root right)))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (FunctionDef reverse_inorder (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_4) (If (UnaryOp Not root) (__list__ Return)) (Expr (YieldFrom (Call reverse_inorder (__list__ (Attribute root right))))) (Expr (Yield (Attribute root data))) (Expr (YieldFrom (Call reverse_inorder (__list__ (Attribute root left)))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (FunctionDef height (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_5) (Return (IfExp root (BinOp (Call max (__list__ (Call height (__list__ (Attribute root left))) (Call height (__list__ (Attribute root right))))) Add 1) 0))) (__list__ ) int) (FunctionDef level_order (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_6) (If (Compare root (__list__ Is) (__list__ None)) (__list__ Return)) (Assign (__list__ process_queue) (Call deque (__list__ (List (__list__ root))))) (While process_queue (__list__ (Assign (__list__ node) (Call (Attribute process_queue popleft))) (Expr (Yield (Attribute node data))) (If (Attribute node left) (__list__ (Expr (Call (Attribute process_queue append) (__list__ (Attribute node left)))))) (If (Attribute node right) (__list__ (Expr (Call (Attribute process_queue append) (__list__ (Attribute node right))))))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (FunctionDef get_nodes_from_left_to_right (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg level int))) (__list__ (Expr STRING_7) (FunctionDef populate_output (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg level int))) (__list__ (If (UnaryOp Not root) (__list__ Return)) (If (Compare level (__list__ Eq) (__list__ 1)) (__list__ (Expr (Yield (Attribute root data)))) (__list__ (If (Compare level (__list__ Gt) (__list__ 1)) (__list__ (Expr (YieldFrom (Call populate_output (__list__ (Attribute root left) (BinOp level Sub 1))))) (Expr (YieldFrom (Call populate_output (__list__ (Attribute root right) (BinOp level Sub 1)))))))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (Expr (YieldFrom (Call populate_output (__list__ root level))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (FunctionDef get_nodes_from_right_to_left (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg level int))) (__list__ (Expr STRING_8) (FunctionDef populate_output (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg level int))) (__list__ (If (UnaryOp Not root) (__list__ Return)) (If (Compare level (__list__ Eq) (__list__ 1)) (__list__ (Expr (Yield (Attribute root data)))) (__list__ (If (Compare level (__list__ Gt) (__list__ 1)) (__list__ (Expr (YieldFrom (Call populate_output (__list__ (Attribute root right) (BinOp level Sub 1))))) (Expr (YieldFrom (Call populate_output (__list__ (Attribute root left) (BinOp level Sub 1)))))))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (Expr (YieldFrom (Call populate_output (__list__ root level))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (FunctionDef zigzag (arguments (__list__ (arg root (BinOp Node BitOr None)))) (__list__ (Expr STRING_9) (If (Compare root (__list__ Is) (__list__ None)) (__list__ Return)) (Assign (__list__ flag) 0) (Assign (__list__ height_tree) (Call height (__list__ root))) (For h (Call range (__list__ 1 (BinOp height_tree Add 1))) (__list__ (If (UnaryOp Not flag) (__list__ (Expr (YieldFrom (Call get_nodes_from_left_to_right (__list__ root h)))) (Assign (__list__ flag) 1)) (__list__ (Expr (YieldFrom (Call get_nodes_from_right_to_left (__list__ root h)))) (Assign (__list__ flag) 0)))))) (__list__ ) (Subscript Generator (Tuple (__list__ int None None)))) (FunctionDef main arguments (__list__ (Assign (__list__ root) (Call make_tree)) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_10 (FormattedValue (Call list (__list__ (Call inorder (__list__ root)))) -1)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_11 (FormattedValue (Call list (__list__ (Call reverse_inorder (__list__ root)))) -1)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_12 (FormattedValue (Call list (__list__ (Call preorder (__list__ root)))) -1)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_13 (FormattedValue (Call list (__list__ (Call postorder (__list__ root)))) -1))) STRING_13))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_14 (FormattedValue (Call height (__list__ root)) -1))) STRING_13))) (Expr (Call print (__list__ STRING_15))) (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue (Call list (__list__ (Call level_order (__list__ root)))) -1) STRING_16))))) (Expr (Call print (__list__ STRING_17))) (For level (Call range (__list__ 1 (BinOp (Call height (__list__ root)) Add 1))) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ STRING_18 (FormattedValue level -1) STRING_19)) (Call list (__list__ (Call get_nodes_from_left_to_right (__list__ root) (__list__ (keyword level level)))))))))) (Expr (Call print (__list__ STRING_20))) (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue (Call list (__list__ (Call zigzag (__list__ root)))) -1))))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Expr (Call main)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ClassDef RedBlackTree (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg label (BinOp int BitOr None)) (arg color int) (arg parent (BinOp RedBlackTree BitOr None)) (arg left (BinOp RedBlackTree BitOr None)) (arg right (BinOp RedBlackTree BitOr None))) (__list__ None 0 None None None)) (__list__ (Expr STRING_2) (Assign (__list__ (Attribute self label)) label) (Assign (__list__ (Attribute self parent)) parent) (Assign (__list__ (Attribute self left)) left) (Assign (__list__ (Attribute self right)) right) (Assign (__list__ (Attribute self color)) color)) (__list__ ) None) (FunctionDef rotate_left (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Assign (__list__ parent) (Attribute self parent)) (Assign (__list__ right) (Attribute self right)) (If (Compare right (__list__ Is) (__list__ None)) (__list__ (Return self))) (Assign (__list__ (Attribute self right)) (Attribute right left)) (If (Attribute self right) (__list__ (Assign (__list__ (Attribute (Attribute self right) parent)) self))) (Assign (__list__ (Attribute self parent)) right) (Assign (__list__ (Attribute right left)) self) (If (Compare parent (__list__ IsNot) (__list__ None)) (__list__ (If (Compare (Attribute parent left) (__list__ Eq) (__list__ self)) (__list__ (Assign (__list__ (Attribute parent left)) right)) (__list__ (Assign (__list__ (Attribute parent right)) right))))) (Assign (__list__ (Attribute right parent)) parent) (Return right)) (__list__ ) RedBlackTree) (FunctionDef rotate_right (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (If (Compare (Attribute self left) (__list__ Is) (__list__ None)) (__list__ (Return self))) (Assign (__list__ parent) (Attribute self parent)) (Assign (__list__ left) (Attribute self left)) (Assign (__list__ (Attribute self left)) (Attribute left right)) (If (Attribute self left) (__list__ (Assign (__list__ (Attribute (Attribute self left) parent)) self))) (Assign (__list__ (Attribute self parent)) left) (Assign (__list__ (Attribute left right)) self) (If (Compare parent (__list__ IsNot) (__list__ None)) (__list__ (If (Compare (Attribute parent right) (__list__ Is) (__list__ self)) (__list__ (Assign (__list__ (Attribute parent right)) left)) (__list__ (Assign (__list__ (Attribute parent left)) left))))) (Assign (__list__ (Attribute left parent)) parent) (Return left)) (__list__ ) RedBlackTree) (FunctionDef insert (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_5) (If (Compare (Attribute self label) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self label)) label) (Return self))) (If (Compare (Attribute self label) (__list__ Eq) (__list__ label)) (__list__ (Return self)) (__list__ (If (Compare (Attribute self label) (__list__ Gt) (__list__ label)) (__list__ (If (Attribute self left) (__list__ (Expr (Call (Attribute (Attribute self left) insert) (__list__ label)))) (__list__ (Assign (__list__ (Attribute self left)) (Call RedBlackTree (__list__ label 1 self))) (Expr (Call (Attribute (Attribute self left) _insert_repair)))))) (__list__ (If (Attribute self right) (__list__ (Expr (Call (Attribute (Attribute self right) insert) (__list__ label)))) (__list__ (Assign (__list__ (Attribute self right)) (Call RedBlackTree (__list__ label 1 self))) (Expr (Call (Attribute (Attribute self right) _insert_repair))))))))) (Return (BoolOp Or (__list__ (Attribute self parent) self)))) (__list__ ) RedBlackTree) (FunctionDef _insert_repair (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (If (Compare (Attribute self parent) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self color)) 0)) (__list__ (If (Compare (Call color (__list__ (Attribute self parent))) (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute self color)) 1)) (__list__ (Assign (__list__ uncle) (Attribute (Attribute self parent) sibling)) (If (Compare (Call color (__list__ uncle)) (__list__ Eq) (__list__ 0)) (__list__ (If (BoolOp And (__list__ (Call (Attribute self is_left)) (Call (Attribute (Attribute self parent) is_right)))) (__list__ (Expr (Call (Attribute (Attribute self parent) rotate_right))) (If (Attribute self right) (__list__ (Expr (Call (Attribute (Attribute self right) _insert_repair)))))) (__list__ (If (BoolOp And (__list__ (Call (Attribute self is_right)) (Call (Attribute (Attribute self parent) is_left)))) (__list__ (Expr (Call (Attribute (Attribute self parent) rotate_left))) (If (Attribute self left) (__list__ (Expr (Call (Attribute (Attribute self left) _insert_repair)))))) (__list__ (If (Call (Attribute self is_left)) (__list__ (If (Attribute self grandparent) (__list__ (Expr (Call (Attribute (Attribute self grandparent) rotate_right))) (Assign (__list__ (Attribute (Attribute self parent) color)) 0))) (If (Attribute (Attribute self parent) right) (__list__ (Assign (__list__ (Attribute (Attribute (Attribute self parent) right) color)) 1)))) (__list__ (If (Attribute self grandparent) (__list__ (Expr (Call (Attribute (Attribute self grandparent) rotate_left))) (Assign (__list__ (Attribute (Attribute self parent) color)) 0))) (If (Attribute (Attribute self parent) left) (__list__ (Assign (__list__ (Attribute (Attribute (Attribute self parent) left) color)) 1)))))))))) (__list__ (Assign (__list__ (Attribute (Attribute self parent) color)) 0) (If (BoolOp And (__list__ uncle (Attribute self grandparent))) (__list__ (Assign (__list__ (Attribute uncle color)) 0) (Assign (__list__ (Attribute (Attribute self grandparent) color)) 1) (Expr (Call (Attribute (Attribute self grandparent) _insert_repair)))))))))))) (__list__ ) None) (FunctionDef remove (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_7) (If (Compare (Attribute self label) (__list__ Eq) (__list__ label)) (__list__ (If (BoolOp And (__list__ (Attribute self left) (Attribute self right))) (__list__ (Assign (__list__ value) (Call (Attribute (Attribute self left) get_max))) (If (Compare value (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute self label)) value) (Expr (Call (Attribute (Attribute self left) remove) (__list__ value)))))) (__list__ (Assign (__list__ child) (BoolOp Or (__list__ (Attribute self left) (Attribute self right)))) (If (Compare (Attribute self color) (__list__ Eq) (__list__ 1)) (__list__ (If (Attribute self parent) (__list__ (If (Call (Attribute self is_left)) (__list__ (Assign (__list__ (Attribute (Attribute self parent) left)) None)) (__list__ (Assign (__list__ (Attribute (Attribute self parent) right)) None)))))) (__list__ (If (Compare child (__list__ Is) (__list__ None)) (__list__ (If (Compare (Attribute self parent) (__list__ Is) (__list__ None)) (__list__ (Return (Call RedBlackTree (__list__ None)))) (__list__ (Expr (Call (Attribute self _remove_repair))) (If (Call (Attribute self is_left)) (__list__ (Assign (__list__ (Attribute (Attribute self parent) left)) None)) (__list__ (Assign (__list__ (Attribute (Attribute self parent) right)) None))) (Assign (__list__ (Attribute self parent)) None)))) (__list__ (Assign (__list__ (Attribute self label)) (Attribute child label)) (Assign (__list__ (Attribute self left)) (Attribute child left)) (Assign (__list__ (Attribute self right)) (Attribute child right)) (If (Attribute self left) (__list__ (Assign (__list__ (Attribute (Attribute self left) parent)) self))) (If (Attribute self right) (__list__ (Assign (__list__ (Attribute (Attribute self right) parent)) self)))))))))) (__list__ (If (BoolOp And (__list__ (Compare (Attribute self label) (__list__ IsNot) (__list__ None)) (Compare (Attribute self label) (__list__ Gt) (__list__ label)))) (__list__ (If (Attribute self left) (__list__ (Expr (Call (Attribute (Attribute self left) remove) (__list__ label)))))) (__list__ (If (Attribute self right) (__list__ (Expr (Call (Attribute (Attribute self right) remove) (__list__ label))))))))) (Return (BoolOp Or (__list__ (Attribute self parent) self)))) (__list__ ) RedBlackTree) (FunctionDef _remove_repair (arguments (__list__ (arg self))) (__list__ (Expr STRING_8) (If (BoolOp Or (__list__ (Compare (Attribute self parent) (__list__ Is) (__list__ None)) (Compare (Attribute self sibling) (__list__ Is) (__list__ None)) (Compare (Attribute (Attribute self parent) sibling) (__list__ Is) (__list__ None)) (Compare (Attribute self grandparent) (__list__ Is) (__list__ None)))) (__list__ Return)) (If (Compare (Call color (__list__ (Attribute self sibling))) (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ (Attribute (Attribute self sibling) color)) 0) (Assign (__list__ (Attribute (Attribute self parent) color)) 1) (If (Call (Attribute self is_left)) (__list__ (Expr (Call (Attribute (Attribute self parent) rotate_left)))) (__list__ (Expr (Call (Attribute (Attribute self parent) rotate_right))))))) (If (BoolOp And (__list__ (Compare (Call color (__list__ (Attribute self parent))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute self sibling))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) left))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) right))) (__list__ Eq) (__list__ 0)))) (__list__ (Assign (__list__ (Attribute (Attribute self sibling) color)) 1) (Expr (Call (Attribute (Attribute self parent) _remove_repair))) Return)) (If (BoolOp And (__list__ (Compare (Call color (__list__ (Attribute self parent))) (__list__ Eq) (__list__ 1)) (Compare (Call color (__list__ (Attribute self sibling))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) left))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) right))) (__list__ Eq) (__list__ 0)))) (__list__ (Assign (__list__ (Attribute (Attribute self sibling) color)) 1) (Assign (__list__ (Attribute (Attribute self parent) color)) 0) Return)) (If (BoolOp And (__list__ (Call (Attribute self is_left)) (Compare (Call color (__list__ (Attribute self sibling))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) right))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) left))) (__list__ Eq) (__list__ 1)))) (__list__ (Expr (Call (Attribute (Attribute self sibling) rotate_right))) (Assign (__list__ (Attribute (Attribute self sibling) color)) 0) (If (Attribute (Attribute self sibling) right) (__list__ (Assign (__list__ (Attribute (Attribute (Attribute self sibling) right) color)) 1))))) (If (BoolOp And (__list__ (Call (Attribute self is_right)) (Compare (Call color (__list__ (Attribute self sibling))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) right))) (__list__ Eq) (__list__ 1)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) left))) (__list__ Eq) (__list__ 0)))) (__list__ (Expr (Call (Attribute (Attribute self sibling) rotate_left))) (Assign (__list__ (Attribute (Attribute self sibling) color)) 0) (If (Attribute (Attribute self sibling) left) (__list__ (Assign (__list__ (Attribute (Attribute (Attribute self sibling) left) color)) 1))))) (If (BoolOp And (__list__ (Call (Attribute self is_left)) (Compare (Call color (__list__ (Attribute self sibling))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) right))) (__list__ Eq) (__list__ 1)))) (__list__ (Expr (Call (Attribute (Attribute self parent) rotate_left))) (Assign (__list__ (Attribute (Attribute self grandparent) color)) (Attribute (Attribute self parent) color)) (Assign (__list__ (Attribute (Attribute self parent) color)) 0) (Assign (__list__ (Attribute (Attribute (Attribute self parent) sibling) color)) 0))) (If (BoolOp And (__list__ (Call (Attribute self is_right)) (Compare (Call color (__list__ (Attribute self sibling))) (__list__ Eq) (__list__ 0)) (Compare (Call color (__list__ (Attribute (Attribute self sibling) left))) (__list__ Eq) (__list__ 1)))) (__list__ (Expr (Call (Attribute (Attribute self parent) rotate_right))) (Assign (__list__ (Attribute (Attribute self grandparent) color)) (Attribute (Attribute self parent) color)) (Assign (__list__ (Attribute (Attribute self parent) color)) 0) (Assign (__list__ (Attribute (Attribute (Attribute self parent) sibling) color)) 0)))) (__list__ ) None) (FunctionDef check_color_properties (arguments (__list__ (arg self))) (__list__ (Expr STRING_9) (If (Attribute self color) (__list__ (Expr (Call print (__list__ STRING_10))) (Return False))) (If (UnaryOp Not (Call (Attribute self check_coloring))) (__list__ (Expr (Call print (__list__ STRING_11))) (Return False))) (If (Compare (Call (Attribute self black_height)) (__list__ Is) (__list__ None)) (__list__ (Expr (Call print (__list__ STRING_12))) (Return False))) (Return True)) (__list__ ) bool) (FunctionDef check_coloring (arguments (__list__ (arg self))) (__list__ (Expr STRING_13) (If (BoolOp And (__list__ (Compare (Attribute self color) (__list__ Eq) (__list__ 1)) (Compare 1 (__list__ In) (__list__ (Tuple (__list__ (Call color (__list__ (Attribute self left))) (Call color (__list__ (Attribute self right))))))))) (__list__ (Return False))) (If (BoolOp And (__list__ (Attribute self left) (UnaryOp Not (Call (Attribute (Attribute self left) check_coloring))))) (__list__ (Return False))) (If (BoolOp And (__list__ (Attribute self right) (UnaryOp Not (Call (Attribute (Attribute self right) check_coloring))))) (__list__ (Return False))) (Return True)) (__list__ ) bool) (FunctionDef black_height (arguments (__list__ (arg self))) (__list__ (Expr STRING_14) (If (BoolOp Or (__list__ (Compare self (__list__ Is) (__list__ None)) (Compare (Attribute self left) (__list__ Is) (__list__ None)) (Compare (Attribute self right) (__list__ Is) (__list__ None)))) (__list__ (Return 1))) (Assign (__list__ left) (Call (Attribute RedBlackTree black_height) (__list__ (Attribute self left)))) (Assign (__list__ right) (Call (Attribute RedBlackTree black_height) (__list__ (Attribute self right)))) (If (BoolOp Or (__list__ (Compare left (__list__ Is) (__list__ None)) (Compare right (__list__ Is) (__list__ None)))) (__list__ (Return None))) (If (Compare left (__list__ NotEq) (__list__ right)) (__list__ (Return None))) (Return (BinOp left Add (BinOp 1 Sub (Attribute self color))))) (__list__ ) (BinOp int BitOr None)) (FunctionDef __contains__ (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_15) (Return (Compare (Call (Attribute self search) (__list__ label)) (__list__ IsNot) (__list__ None)))) (__list__ ) bool) (FunctionDef search (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_16) (If (Compare (Attribute self label) (__list__ Eq) (__list__ label)) (__list__ (Return self)) (__list__ (If (BoolOp And (__list__ (Compare (Attribute self label) (__list__ IsNot) (__list__ None)) (Compare label (__list__ Gt) (__list__ (Attribute self label))))) (__list__ (If (Compare (Attribute self right) (__list__ Is) (__list__ None)) (__list__ (Return None)) (__list__ (Return (Call (Attribute (Attribute self right) search) (__list__ label)))))) (__list__ (If (Compare (Attribute self left) (__list__ Is) (__list__ None)) (__list__ (Return None)) (__list__ (Return (Call (Attribute (Attribute self left) search) (__list__ label)))))))))) (__list__ ) (BinOp RedBlackTree BitOr None)) (FunctionDef floor (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_17) (If (Compare (Attribute self label) (__list__ Eq) (__list__ label)) (__list__ (Return (Attribute self label))) (__list__ (If (BoolOp And (__list__ (Compare (Attribute self label) (__list__ IsNot) (__list__ None)) (Compare (Attribute self label) (__list__ Gt) (__list__ label)))) (__list__ (If (Attribute self left) (__list__ (Return (Call (Attribute (Attribute self left) floor) (__list__ label)))) (__list__ (Return None)))) (__list__ (If (Attribute self right) (__list__ (Assign (__list__ attempt) (Call (Attribute (Attribute self right) floor) (__list__ label))) (If (Compare attempt (__list__ IsNot) (__list__ None)) (__list__ (Return attempt))))) (Return (Attribute self label))))))) (__list__ ) (BinOp int BitOr None)) (FunctionDef ceil (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_18) (If (Compare (Attribute self label) (__list__ Eq) (__list__ label)) (__list__ (Return (Attribute self label))) (__list__ (If (BoolOp And (__list__ (Compare (Attribute self label) (__list__ IsNot) (__list__ None)) (Compare (Attribute self label) (__list__ Lt) (__list__ label)))) (__list__ (If (Attribute self right) (__list__ (Return (Call (Attribute (Attribute self right) ceil) (__list__ label)))) (__list__ (Return None)))) (__list__ (If (Attribute self left) (__list__ (Assign (__list__ attempt) (Call (Attribute (Attribute self left) ceil) (__list__ label))) (If (Compare attempt (__list__ IsNot) (__list__ None)) (__list__ (Return attempt))))) (Return (Attribute self label))))))) (__list__ ) (BinOp int BitOr None)) (FunctionDef get_max (arguments (__list__ (arg self))) (__list__ (Expr STRING_19) (If (Attribute self right) (__list__ (Return (Call (Attribute (Attribute self right) get_max)))) (__list__ (Return (Attribute self label))))) (__list__ ) (BinOp int BitOr None)) (FunctionDef get_min (arguments (__list__ (arg self))) (__list__ (Expr STRING_20) (If (Attribute self left) (__list__ (Return (Call (Attribute (Attribute self left) get_min)))) (__list__ (Return (Attribute self label))))) (__list__ ) (BinOp int BitOr None)) (FunctionDef grandparent (arguments (__list__ (arg self))) (__list__ (Expr STRING_21) (If (Compare (Attribute self parent) (__list__ Is) (__list__ None)) (__list__ (Return None)) (__list__ (Return (Attribute (Attribute self parent) parent))))) (__list__ property) (BinOp RedBlackTree BitOr None)) (FunctionDef sibling (arguments (__list__ (arg self))) (__list__ (Expr STRING_22) (If (Compare (Attribute self parent) (__list__ Is) (__list__ None)) (__list__ (Return None)) (__list__ (If (Compare (Attribute (Attribute self parent) left) (__list__ Is) (__list__ self)) (__list__ (Return (Attribute (Attribute self parent) right))) (__list__ (Return (Attribute (Attribute self parent) left))))))) (__list__ property) (BinOp RedBlackTree BitOr None)) (FunctionDef is_left (arguments (__list__ (arg self))) (__list__ (Expr STRING_23) (If (Compare (Attribute self parent) (__list__ Is) (__list__ None)) (__list__ (Return False))) (Return (Compare (Attribute (Attribute self parent) left) (__list__ Is) (__list__ self)))) (__list__ ) bool) (FunctionDef is_right (arguments (__list__ (arg self))) (__list__ (Expr STRING_24) (If (Compare (Attribute self parent) (__list__ Is) (__list__ None)) (__list__ (Return False))) (Return (Compare (Attribute (Attribute self parent) right) (__list__ Is) (__list__ self)))) (__list__ ) bool) (FunctionDef __bool__ (arguments (__list__ (arg self))) (__list__ (Return True)) (__list__ ) bool) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_25) (Assign (__list__ ln) 1) (If (Attribute self left) (__list__ (AugAssign ln Add (Call len (__list__ (Attribute self left)))))) (If (Attribute self right) (__list__ (AugAssign ln Add (Call len (__list__ (Attribute self right)))))) (Return ln)) (__list__ ) int) (FunctionDef preorder_traverse (arguments (__list__ (arg self))) (__list__ (Expr (Yield (Attribute self label))) (If (Attribute self left) (__list__ (Expr (YieldFrom (Call (Attribute (Attribute self left) preorder_traverse)))))) (If (Attribute self right) (__list__ (Expr (YieldFrom (Call (Attribute (Attribute self right) preorder_traverse))))))) (__list__ ) (Subscript Iterator (BinOp int BitOr None))) (FunctionDef inorder_traverse (arguments (__list__ (arg self))) (__list__ (If (Attribute self left) (__list__ (Expr (YieldFrom (Call (Attribute (Attribute self left) inorder_traverse)))))) (Expr (Yield (Attribute self label))) (If (Attribute self right) (__list__ (Expr (YieldFrom (Call (Attribute (Attribute self right) inorder_traverse))))))) (__list__ ) (Subscript Iterator (BinOp int BitOr None))) (FunctionDef postorder_traverse (arguments (__list__ (arg self))) (__list__ (If (Attribute self left) (__list__ (Expr (YieldFrom (Call (Attribute (Attribute self left) postorder_traverse)))))) (If (Attribute self right) (__list__ (Expr (YieldFrom (Call (Attribute (Attribute self right) postorder_traverse)))))) (Expr (Yield (Attribute self label)))) (__list__ ) (Subscript Iterator (BinOp int BitOr None))) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (ImportFrom pprint (__list__ (alias pformat)) 0) (If (BoolOp And (__list__ (Compare (Attribute self left) (__list__ Is) (__list__ None)) (Compare (Attribute self right) (__list__ Is) (__list__ None)))) (__list__ (Return (JoinedStr (__list__ STRING_1 (FormattedValue (Attribute self label) -1) STRING_12 (FormattedValue (BoolOp Or (__list__ (BoolOp And (__list__ (Attribute self color) STRING_26)) STRING_27)) -1) STRING_1))))) (Return (Call pformat (__list__ (Dict (__list__ (JoinedStr (__list__ (FormattedValue (Attribute self label) -1) STRING_12 (FormattedValue (BoolOp Or (__list__ (BoolOp And (__list__ (Attribute self color) STRING_26)) STRING_27)) -1)))) (__list__ (Tuple (__list__ (Attribute self left) (Attribute self right)))))) (__list__ (keyword indent 1))))) (__list__ ) str) (FunctionDef __eq__ (arguments (__list__ (arg self) (arg other object))) (__list__ (Expr STRING_28) (If (UnaryOp Not (Call isinstance (__list__ other RedBlackTree))) (__list__ (Return NotImplemented))) (If (Compare (Attribute self label) (__list__ Eq) (__list__ (Attribute other label))) (__list__ (Return (BoolOp And (__list__ (Compare (Attribute self left) (__list__ Eq) (__list__ (Attribute other left))) (Compare (Attribute self right) (__list__ Eq) (__list__ (Attribute other right))))))) (__list__ (Return False)))) (__list__ ) bool))) (FunctionDef color (arguments (__list__ (arg node (BinOp RedBlackTree BitOr None)))) (__list__ (Expr STRING_29) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Return 0)) (__list__ (Return (Attribute node color))))) (__list__ ) int) (Expr STRING_30) (FunctionDef test_rotations arguments (__list__ (Expr STRING_31) (Assign (__list__ tree) (Call RedBlackTree (__list__ 0))) (Assign (__list__ (Attribute tree left)) (Call RedBlackTree (__list__ (UnaryOp USub 10)) (__list__ (keyword parent tree)))) (Assign (__list__ (Attribute tree right)) (Call RedBlackTree (__list__ 10) (__list__ (keyword parent tree)))) (Assign (__list__ (Attribute (Attribute tree left) left)) (Call RedBlackTree (__list__ (UnaryOp USub 20)) (__list__ (keyword parent (Attribute tree left))))) (Assign (__list__ (Attribute (Attribute tree left) right)) (Call RedBlackTree (__list__ (UnaryOp USub 5)) (__list__ (keyword parent (Attribute tree left))))) (Assign (__list__ (Attribute (Attribute tree right) left)) (Call RedBlackTree (__list__ 5) (__list__ (keyword parent (Attribute tree right))))) (Assign (__list__ (Attribute (Attribute tree right) right)) (Call RedBlackTree (__list__ 20) (__list__ (keyword parent (Attribute tree right))))) (Assign (__list__ left_rot) (Call RedBlackTree (__list__ 10))) (Assign (__list__ (Attribute left_rot left)) (Call RedBlackTree (__list__ 0) (__list__ (keyword parent left_rot)))) (Assign (__list__ (Attribute (Attribute left_rot left) left)) (Call RedBlackTree (__list__ (UnaryOp USub 10)) (__list__ (keyword parent (Attribute left_rot left))))) (Assign (__list__ (Attribute (Attribute left_rot left) right)) (Call RedBlackTree (__list__ 5) (__list__ (keyword parent (Attribute left_rot left))))) (Assign (__list__ (Attribute (Attribute (Attribute left_rot left) left) left)) (Call RedBlackTree (__list__ (UnaryOp USub 20)) (__list__ (keyword parent (Attribute (Attribute left_rot left) left))))) (Assign (__list__ (Attribute (Attribute (Attribute left_rot left) left) right)) (Call RedBlackTree (__list__ (UnaryOp USub 5)) (__list__ (keyword parent (Attribute (Attribute left_rot left) left))))) (Assign (__list__ (Attribute left_rot right)) (Call RedBlackTree (__list__ 20) (__list__ (keyword parent left_rot)))) (Assign (__list__ tree) (Call (Attribute tree rotate_left))) (If (Compare tree (__list__ NotEq) (__list__ left_rot)) (__list__ (Return False))) (Assign (__list__ tree) (Call (Attribute tree rotate_right))) (Assign (__list__ tree) (Call (Attribute tree rotate_right))) (Assign (__list__ right_rot) (Call RedBlackTree (__list__ (UnaryOp USub 10)))) (Assign (__list__ (Attribute right_rot left)) (Call RedBlackTree (__list__ (UnaryOp USub 20)) (__list__ (keyword parent right_rot)))) (Assign (__list__ (Attribute right_rot right)) (Call RedBlackTree (__list__ 0) (__list__ (keyword parent right_rot)))) (Assign (__list__ (Attribute (Attribute right_rot right) left)) (Call RedBlackTree (__list__ (UnaryOp USub 5)) (__list__ (keyword parent (Attribute right_rot right))))) (Assign (__list__ (Attribute (Attribute right_rot right) right)) (Call RedBlackTree (__list__ 10) (__list__ (keyword parent (Attribute right_rot right))))) (Assign (__list__ (Attribute (Attribute (Attribute right_rot right) right) left)) (Call RedBlackTree (__list__ 5) (__list__ (keyword parent (Attribute (Attribute right_rot right) right))))) (Assign (__list__ (Attribute (Attribute (Attribute right_rot right) right) right)) (Call RedBlackTree (__list__ 20) (__list__ (keyword parent (Attribute (Attribute right_rot right) right))))) (If (Compare tree (__list__ NotEq) (__list__ right_rot)) (__list__ (Return False))) (Return True)) (__list__ ) bool) (FunctionDef test_insertion_speed arguments (__list__ (Expr STRING_32) (Assign (__list__ tree) (Call RedBlackTree (__list__ (UnaryOp USub 1)))) (For i (Call range (__list__ 300000)) (__list__ (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ i))))) (Return True)) (__list__ ) bool) (FunctionDef test_insert arguments (__list__ (Expr STRING_33) (Assign (__list__ tree) (Call RedBlackTree (__list__ 0))) (Expr (Call (Attribute tree insert) (__list__ 8))) (Expr (Call (Attribute tree insert) (__list__ (UnaryOp USub 8)))) (Expr (Call (Attribute tree insert) (__list__ 4))) (Expr (Call (Attribute tree insert) (__list__ 12))) (Expr (Call (Attribute tree insert) (__list__ 10))) (Expr (Call (Attribute tree insert) (__list__ 11))) (Assign (__list__ ans) (Call RedBlackTree (__list__ 0 0))) (Assign (__list__ (Attribute ans left)) (Call RedBlackTree (__list__ (UnaryOp USub 8) 0 ans))) (Assign (__list__ (Attribute ans right)) (Call RedBlackTree (__list__ 8 1 ans))) (Assign (__list__ (Attribute (Attribute ans right) left)) (Call RedBlackTree (__list__ 4 0 (Attribute ans right)))) (Assign (__list__ (Attribute (Attribute ans right) right)) (Call RedBlackTree (__list__ 11 0 (Attribute ans right)))) (Assign (__list__ (Attribute (Attribute (Attribute ans right) right) left)) (Call RedBlackTree (__list__ 10 1 (Attribute (Attribute ans right) right)))) (Assign (__list__ (Attribute (Attribute (Attribute ans right) right) right)) (Call RedBlackTree (__list__ 12 1 (Attribute (Attribute ans right) right)))) (Return (Compare tree (__list__ Eq) (__list__ ans)))) (__list__ ) bool) (FunctionDef test_insert_and_search arguments (__list__ (Expr STRING_34) (Assign (__list__ tree) (Call RedBlackTree (__list__ 0))) (Expr (Call (Attribute tree insert) (__list__ 8))) (Expr (Call (Attribute tree insert) (__list__ (UnaryOp USub 8)))) (Expr (Call (Attribute tree insert) (__list__ 4))) (Expr (Call (Attribute tree insert) (__list__ 12))) (Expr (Call (Attribute tree insert) (__list__ 10))) (Expr (Call (Attribute tree insert) (__list__ 11))) (If (BoolOp Or (__list__ (Compare 5 (__list__ In) (__list__ tree)) (Compare (UnaryOp USub 6) (__list__ In) (__list__ tree)) (Compare (UnaryOp USub 10) (__list__ In) (__list__ tree)) (Compare 13 (__list__ In) (__list__ tree)))) (__list__ (Return False))) (If (UnaryOp Not (BoolOp And (__list__ (Compare 11 (__list__ In) (__list__ tree)) (Compare 12 (__list__ In) (__list__ tree)) (Compare (UnaryOp USub 8) (__list__ In) (__list__ tree)) (Compare 0 (__list__ In) (__list__ tree))))) (__list__ (Return False))) (Return True)) (__list__ ) bool) (FunctionDef test_insert_delete arguments (__list__ (Expr STRING_35) (Assign (__list__ tree) (Call RedBlackTree (__list__ 0))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ (UnaryOp USub 12)))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ 8))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ (UnaryOp USub 8)))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ 15))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ 4))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ 12))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ 10))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ 9))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ 11))) (Assign (__list__ tree) (Call (Attribute tree remove) (__list__ 15))) (Assign (__list__ tree) (Call (Attribute tree remove) (__list__ (UnaryOp USub 12)))) (Assign (__list__ tree) (Call (Attribute tree remove) (__list__ 9))) (If (UnaryOp Not (Call (Attribute tree check_color_properties))) (__list__ (Return False))) (If (Compare (Call list (__list__ (Call (Attribute tree inorder_traverse)))) (__list__ NotEq) (__list__ (List (__list__ (UnaryOp USub 8) 0 4 8 10 11 12)))) (__list__ (Return False))) (Return True)) (__list__ ) bool) (FunctionDef test_floor_ceil arguments (__list__ (Expr STRING_36) (Assign (__list__ tree) (Call RedBlackTree (__list__ 0))) (Expr (Call (Attribute tree insert) (__list__ (UnaryOp USub 16)))) (Expr (Call (Attribute tree insert) (__list__ 16))) (Expr (Call (Attribute tree insert) (__list__ 8))) (Expr (Call (Attribute tree insert) (__list__ 24))) (Expr (Call (Attribute tree insert) (__list__ 20))) (Expr (Call (Attribute tree insert) (__list__ 22))) (Assign (__list__ tuples) (List (__list__ (Tuple (__list__ (UnaryOp USub 20) None (UnaryOp USub 16))) (Tuple (__list__ (UnaryOp USub 10) (UnaryOp USub 16) 0)) (Tuple (__list__ 8 8 8)) (Tuple (__list__ 50 24 None))))) (For (Tuple (__list__ val floor ceil)) tuples (__list__ (If (BoolOp Or (__list__ (Compare (Call (Attribute tree floor) (__list__ val)) (__list__ NotEq) (__list__ floor)) (Compare (Call (Attribute tree ceil) (__list__ val)) (__list__ NotEq) (__list__ ceil)))) (__list__ (Return False))))) (Return True)) (__list__ ) bool) (FunctionDef test_min_max arguments (__list__ (Expr STRING_37) (Assign (__list__ tree) (Call RedBlackTree (__list__ 0))) (Expr (Call (Attribute tree insert) (__list__ (UnaryOp USub 16)))) (Expr (Call (Attribute tree insert) (__list__ 16))) (Expr (Call (Attribute tree insert) (__list__ 8))) (Expr (Call (Attribute tree insert) (__list__ 24))) (Expr (Call (Attribute tree insert) (__list__ 20))) (Expr (Call (Attribute tree insert) (__list__ 22))) (If (BoolOp Or (__list__ (Compare (Call (Attribute tree get_max)) (__list__ NotEq) (__list__ 22)) (Compare (Call (Attribute tree get_min)) (__list__ NotEq) (__list__ (UnaryOp USub 16))))) (__list__ (Return False))) (Return True)) (__list__ ) bool) (FunctionDef test_tree_traversal arguments (__list__ (Expr STRING_38) (Assign (__list__ tree) (Call RedBlackTree (__list__ 0))) (Assign (__list__ tree) (Call (Attribute tree insert) (__list__ (UnaryOp USub 16)))) (Expr (Call (Attribute tree insert) (__list__ 16))) (Expr (Call (Attribute tree insert) (__list__ 8))) (Expr (Call (Attribute tree insert) (__list__ 24))) (Expr (Call (Attribute tree insert) (__list__ 20))) (Expr (Call (Attribute tree insert) (__list__ 22))) (If (Compare (Call list (__list__ (Call (Attribute tree inorder_traverse)))) (__list__ NotEq) (__list__ (List (__list__ (UnaryOp USub 16) 0 8 16 20 22 24)))) (__list__ (Return False))) (If (Compare (Call list (__list__ (Call (Attribute tree preorder_traverse)))) (__list__ NotEq) (__list__ (List (__list__ 0 (UnaryOp USub 16) 16 8 22 20 24)))) (__list__ (Return False))) (If (Compare (Call list (__list__ (Call (Attribute tree postorder_traverse)))) (__list__ NotEq) (__list__ (List (__list__ (UnaryOp USub 16) 8 20 24 22 16 0)))) (__list__ (Return False))) (Return True)) (__list__ ) bool) (FunctionDef test_tree_chaining arguments (__list__ (Expr STRING_39) (Assign (__list__ tree) (Call RedBlackTree (__list__ 0))) (Assign (__list__ tree) (Call (Attribute (Call (Attribute (Call (Attribute (Call (Attribute (Call (Attribute (Call (Attribute tree insert) (__list__ (UnaryOp USub 16))) insert) (__list__ 16)) insert) (__list__ 8)) insert) (__list__ 24)) insert) (__list__ 20)) insert) (__list__ 22))) (If (Compare (Call list (__list__ (Call (Attribute tree inorder_traverse)))) (__list__ NotEq) (__list__ (List (__list__ (UnaryOp USub 16) 0 8 16 20 22 24)))) (__list__ (Return False))) (If (Compare (Call list (__list__ (Call (Attribute tree preorder_traverse)))) (__list__ NotEq) (__list__ (List (__list__ 0 (UnaryOp USub 16) 16 8 22 20 24)))) (__list__ (Return False))) (If (Compare (Call list (__list__ (Call (Attribute tree postorder_traverse)))) (__list__ NotEq) (__list__ (List (__list__ (UnaryOp USub 16) 8 20 24 22 16 0)))) (__list__ (Return False))) (Return True)) (__list__ ) bool) (FunctionDef print_results (arguments (__list__ (arg msg str) (arg passes bool))) (__list__ (Expr (Call print (__list__ (Call str (__list__ msg)) (IfExp passes STRING_40 STRING_41))))) (__list__ ) None) (FunctionDef pytests arguments (__list__ (Assert (Call test_rotations)) (Assert (Call test_insert)) (Assert (Call test_insert_and_search)) (Assert (Call test_insert_delete)) (Assert (Call test_floor_ceil)) (Assert (Call test_tree_traversal)) (Assert (Call test_tree_chaining))) (__list__ ) None) (FunctionDef main arguments (__list__ (Expr STRING_42) (Expr (Call print_results (__list__ STRING_43 (Call test_rotations)))) (Expr (Call print_results (__list__ STRING_44 (Call test_insert)))) (Expr (Call print_results (__list__ STRING_45 (Call test_insert_and_search)))) (Expr (Call print_results (__list__ STRING_46 (Call test_insert_delete)))) (Expr (Call print_results (__list__ STRING_47 (Call test_floor_ceil)))) (Expr (Call print_results (__list__ STRING_48 (Call test_tree_traversal)))) (Expr (Call print_results (__list__ STRING_48 (Call test_tree_chaining)))) (Expr (Call print (__list__ STRING_49))) (Expr (Call print (__list__ STRING_50))) (Expr (Call test_insertion_speed)) (Expr (Call print (__list__ STRING_51)))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call main)))))",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign key int 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (If (Attribute self left) (__list__ (Expr (YieldFrom (Attribute self left))))) (Expr (Yield (Attribute self key))) (If (Attribute self right) (__list__ (Expr (YieldFrom (Attribute self right)))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int)) (__list__ dataclass)) (FunctionDef floor_ceiling (arguments (__list__ (arg root (BinOp Node BitOr None)) (arg key int))) (__list__ (Expr STRING_1) (Assign (__list__ floor_val) None) (Assign (__list__ ceiling_val) None) (While root (__list__ (If (Compare (Attribute root key) (__list__ Eq) (__list__ key)) (__list__ (Assign (__list__ floor_val) (Attribute root key)) (Assign (__list__ ceiling_val) (Attribute root key)) Break)) (If (Compare key (__list__ Lt) (__list__ (Attribute root key))) (__list__ (Assign (__list__ ceiling_val) (Attribute root key)) (Assign (__list__ root) (Attribute root left))) (__list__ (Assign (__list__ floor_val) (Attribute root key)) (Assign (__list__ root) (Attribute root right)))))) (Return (Tuple (__list__ floor_val ceiling_val)))) (__list__ ) (Subscript tuple (Tuple (__list__ (BinOp int BitOr None) (BinOp int BitOr None))))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ClassDef Node (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg value int))) (__list__ (Assign (__list__ (Attribute self value)) value) (AnnAssign (Attribute self left) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp Node BitOr None) None 0)) (__list__ ) None))) (ClassDef BinaryTreePathSum (__list__ (Expr STRING_1) (AnnAssign target int 1) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self paths)) 0)) (__list__ ) None) (FunctionDef depth_first_search (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)) (arg path_sum int))) (__list__ (If (Compare node (__list__ Is) (__list__ None)) (__list__ Return)) (If (Compare path_sum (__list__ Eq) (__list__ (Attribute self target))) (__list__ (AugAssign (Attribute self paths) Add 1))) (If (Attribute node left) (__list__ (Expr (Call (Attribute self depth_first_search) (__list__ (Attribute node left) (BinOp path_sum Add (Attribute (Attribute node left) value))))))) (If (Attribute node right) (__list__ (Expr (Call (Attribute self depth_first_search) (__list__ (Attribute node right) (BinOp path_sum Add (Attribute (Attribute node right) value)))))))) (__list__ ) None) (FunctionDef path_sum (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)) (arg target (BinOp int BitOr None))) (__list__ None)) (__list__ (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Return 0))) (If (Compare target (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute self target)) target))) (Expr (Call (Attribute self depth_first_search) (__list__ node (Attribute node value)))) (Expr (Call (Attribute self path_sum) (__list__ (Attribute node left)))) (Expr (Call (Attribute self path_sum) (__list__ (Attribute node right)))) (Return (Attribute self paths))) (__list__ ) int))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (Expr STRING_1) (AnnAssign data int 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1)) (__list__ dataclass)) (FunctionDef make_symmetric_tree arguments (__list__ (Expr STRING_2) (Assign (__list__ root) (Call Node (__list__ 1))) (Assign (__list__ (Attribute root left)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute root right)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute (Attribute root left) left)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute root left) right)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute (Attribute root right) left)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute (Attribute root right) right)) (Call Node (__list__ 3))) (Return root)) (__list__ ) Node) (FunctionDef make_asymmetric_tree arguments (__list__ (Expr STRING_3) (Assign (__list__ root) (Call Node (__list__ 1))) (Assign (__list__ (Attribute root left)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute root right)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute (Attribute root left) left)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute root left) right)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute (Attribute root right) left)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute root right) right)) (Call Node (__list__ 4))) (Return root)) (__list__ ) Node) (FunctionDef is_symmetric_tree (arguments (__list__ (arg tree Node))) (__list__ (Expr STRING_4) (If tree (__list__ (Return (Call is_mirror (__list__ (Attribute tree left) (Attribute tree right)))))) (Return True)) (__list__ ) bool) (FunctionDef is_mirror (arguments (__list__ (arg left (BinOp Node BitOr None)) (arg right (BinOp Node BitOr None)))) (__list__ (Expr STRING_5) (If (BoolOp And (__list__ (Compare left (__list__ Is) (__list__ None)) (Compare right (__list__ Is) (__list__ None)))) (__list__ (Return True))) (If (BoolOp Or (__list__ (Compare left (__list__ Is) (__list__ None)) (Compare right (__list__ Is) (__list__ None)))) (__list__ (Return False))) (If (Compare (Attribute left data) (__list__ Eq) (__list__ (Attribute right data))) (__list__ (Return (BoolOp And (__list__ (Call is_mirror (__list__ (Attribute left left) (Attribute right right))) (Call is_mirror (__list__ (Attribute left right) (Attribute right left)))))))) (Return False)) (__list__ ) bool) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections (__list__ (alias defaultdict)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef TreeNode (__list__ (AnnAssign val int 1) (AnnAssign left (BinOp TreeNode BitOr None) None 1) (AnnAssign right (BinOp TreeNode BitOr None) None 1)) (__list__ dataclass)) (FunctionDef make_tree arguments (__list__ (Expr STRING_1) (Return (Call TreeNode (__list__ 3 (Call TreeNode (__list__ 9)) (Call TreeNode (__list__ 20 (Call TreeNode (__list__ 15)) (Call TreeNode (__list__ 7)))))))) (__list__ ) TreeNode) (FunctionDef binary_tree_right_side_view (arguments (__list__ (arg root TreeNode))) (__list__ (Expr STRING_2) (FunctionDef depth_first_search (arguments (__list__ (arg root (BinOp TreeNode BitOr None)) (arg depth int) (arg right_view (Subscript list int)))) (__list__ (Expr STRING_3) (If (UnaryOp Not root) (__list__ Return)) (If (Compare depth (__list__ Eq) (__list__ (Call len (__list__ right_view)))) (__list__ (Expr (Call (Attribute right_view append) (__list__ (Attribute root val)))))) (Expr (Call depth_first_search (__list__ (Attribute root right) (BinOp depth Add 1) right_view))) (Expr (Call depth_first_search (__list__ (Attribute root left) (BinOp depth Add 1) right_view)))) (__list__ ) None) (AnnAssign right_view list List 1) (If (UnaryOp Not root) (__list__ (Return right_view))) (Expr (Call depth_first_search (__list__ root 0 right_view))) (Return right_view)) (__list__ ) (Subscript list int)) (FunctionDef binary_tree_left_side_view (arguments (__list__ (arg root TreeNode))) (__list__ (Expr STRING_4) (FunctionDef depth_first_search (arguments (__list__ (arg root (BinOp TreeNode BitOr None)) (arg depth int) (arg left_view (Subscript list int)))) (__list__ (Expr STRING_5) (If (UnaryOp Not root) (__list__ Return)) (If (Compare depth (__list__ Eq) (__list__ (Call len (__list__ left_view)))) (__list__ (Expr (Call (Attribute left_view append) (__list__ (Attribute root val)))))) (Expr (Call depth_first_search (__list__ (Attribute root left) (BinOp depth Add 1) left_view))) (Expr (Call depth_first_search (__list__ (Attribute root right) (BinOp depth Add 1) left_view)))) (__list__ ) None) (AnnAssign left_view list List 1) (If (UnaryOp Not root) (__list__ (Return left_view))) (Expr (Call depth_first_search (__list__ root 0 left_view))) (Return left_view)) (__list__ ) (Subscript list int)) (FunctionDef binary_tree_top_side_view (arguments (__list__ (arg root TreeNode))) (__list__ (Expr STRING_6) (FunctionDef breadth_first_search (arguments (__list__ (arg root TreeNode) (arg top_view (Subscript list int)))) (__list__ (Expr STRING_7) (Assign (__list__ queue) (List (__list__ (Tuple (__list__ root 0))))) (Assign (__list__ lookup) (Call defaultdict (__list__ list))) (While queue (__list__ (Assign (__list__ first) (Call (Attribute queue pop) (__list__ 0))) (Assign (__list__ (Tuple (__list__ node hd))) first) (Expr (Call (Attribute (Subscript lookup hd) append) (__list__ (Attribute node val)))) (If (Attribute node left) (__list__ (Expr (Call (Attribute queue append) (__list__ (Tuple (__list__ (Attribute node left) (BinOp hd Sub 1)))))))) (If (Attribute node right) (__list__ (Expr (Call (Attribute queue append) (__list__ (Tuple (__list__ (Attribute node right) (BinOp hd Add 1)))))))))) (For pair (Call sorted (__list__ (Call (Attribute lookup items))) (__list__ (keyword key (Lambda (arguments (__list__ (arg each))) (Subscript each 0))))) (__list__ (Expr (Call (Attribute top_view append) (__list__ (Subscript (Subscript pair 1) 0))))))) (__list__ ) None) (AnnAssign top_view list List 1) (If (UnaryOp Not root) (__list__ (Return top_view))) (Expr (Call breadth_first_search (__list__ root top_view))) (Return top_view)) (__list__ ) (Subscript list int)) (FunctionDef binary_tree_bottom_side_view (arguments (__list__ (arg root TreeNode))) (__list__ (Expr STRING_8) (ImportFrom collections (__list__ (alias defaultdict)) 0) (FunctionDef breadth_first_search (arguments (__list__ (arg root TreeNode) (arg bottom_view (Subscript list int)))) (__list__ (Expr STRING_9) (Assign (__list__ queue) (List (__list__ (Tuple (__list__ root 0))))) (Assign (__list__ lookup) (Call defaultdict (__list__ list))) (While queue (__list__ (Assign (__list__ first) (Call (Attribute queue pop) (__list__ 0))) (Assign (__list__ (Tuple (__list__ node hd))) first) (Expr (Call (Attribute (Subscript lookup hd) append) (__list__ (Attribute node val)))) (If (Attribute node left) (__list__ (Expr (Call (Attribute queue append) (__list__ (Tuple (__list__ (Attribute node left) (BinOp hd Sub 1)))))))) (If (Attribute node right) (__list__ (Expr (Call (Attribute queue append) (__list__ (Tuple (__list__ (Attribute node right) (BinOp hd Add 1)))))))))) (For pair (Call sorted (__list__ (Call (Attribute lookup items))) (__list__ (keyword key (Lambda (arguments (__list__ (arg each))) (Subscript each 0))))) (__list__ (Expr (Call (Attribute bottom_view append) (__list__ (Subscript (Subscript pair 1) (UnaryOp USub 1)))))))) (__list__ ) None) (AnnAssign bottom_view list List 1) (If (UnaryOp Not root) (__list__ (Return bottom_view))) (Expr (Call breadth_first_search (__list__ root bottom_view))) (Return bottom_view)) (__list__ ) (Subscript list int)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef BinaryTreeNode (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg data int))) (__list__ (Assign (__list__ (Attribute self data)) data) (AnnAssign (Attribute self left_child) (BinOp BinaryTreeNode BitOr None) None 0) (AnnAssign (Attribute self right_child) (BinOp BinaryTreeNode BitOr None) None 0)) (__list__ ) None))) (FunctionDef insert (arguments (__list__ (arg node (BinOp BinaryTreeNode BitOr None)) (arg new_value int))) (__list__ (Expr STRING_2) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ node) (Call BinaryTreeNode (__list__ new_value))) (Return node))) (If (Compare new_value (__list__ Lt) (__list__ (Attribute node data))) (__list__ (Assign (__list__ (Attribute node left_child)) (Call insert (__list__ (Attribute node left_child) new_value)))) (__list__ (Assign (__list__ (Attribute node right_child)) (Call insert (__list__ (Attribute node right_child) new_value))))) (Return node)) (__list__ ) (BinOp BinaryTreeNode BitOr None)) (FunctionDef inorder (arguments (__list__ (arg node (BinOp None BitOr BinaryTreeNode)))) (__list__ (Expr STRING_3) (If node (__list__ (Assign (__list__ inorder_array) (Call inorder (__list__ (Attribute node left_child)))) (Assign (__list__ inorder_array) (List (__list__ (Starred inorder_array) (Attribute node data)))) (Assign (__list__ inorder_array) (BinOp inorder_array Add (Call inorder (__list__ (Attribute node right_child)))))) (__list__ (Assign (__list__ inorder_array) List))) (Return inorder_array)) (__list__ ) (Subscript list int)) (FunctionDef make_tree arguments (__list__ (Assign (__list__ root) (Call insert (__list__ None 15))) (Expr (Call insert (__list__ root 10))) (Expr (Call insert (__list__ root 25))) (Expr (Call insert (__list__ root 6))) (Expr (Call insert (__list__ root 14))) (Expr (Call insert (__list__ root 20))) (Expr (Call insert (__list__ root 60))) (Return root)) (__list__ ) (BinOp BinaryTreeNode BitOr None)) (FunctionDef main arguments (__list__ (Assign (__list__ root) (Call make_tree)) (Expr (Call print (__list__ STRING_4))) (Expr (Call inorder (__list__ root)))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Expr (Call main)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom typing (__list__ (alias NamedTuple)) 0) (ClassDef TreeNode (__list__ (AnnAssign data int 1) (AnnAssign left (BinOp TreeNode BitOr None) None 1) (AnnAssign right (BinOp TreeNode BitOr None) None 1)) (__list__ dataclass)) (ClassDef CoinsDistribResult (__list__ NamedTuple) (__list__ (AnnAssign moves int 1) (AnnAssign excess int 1))) (FunctionDef distribute_coins (arguments (__list__ (arg root (BinOp TreeNode BitOr None)))) (__list__ (Expr STRING_1) (If (Compare root (__list__ Is) (__list__ None)) (__list__ (Return 0))) (FunctionDef count_nodes (arguments (__list__ (arg node (BinOp TreeNode BitOr None)))) (__list__ (Expr STRING_2) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Return 0))) (Return (BinOp (BinOp (Call count_nodes (__list__ (Attribute node left))) Add (Call count_nodes (__list__ (Attribute node right)))) Add 1))) (__list__ ) int) (FunctionDef count_coins (arguments (__list__ (arg node (BinOp TreeNode BitOr None)))) (__list__ (Expr STRING_3) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Return 0))) (Return (BinOp (BinOp (Call count_coins (__list__ (Attribute node left))) Add (Call count_coins (__list__ (Attribute node right)))) Add (Attribute node data)))) (__list__ ) int) (If (Compare (Call count_nodes (__list__ root)) (__list__ NotEq) (__list__ (Call count_coins (__list__ root)))) (__list__ (Raise (Call ValueError (__list__ STRING_4))))) (FunctionDef get_distrib (arguments (__list__ (arg node (BinOp TreeNode BitOr None)))) (__list__ (Expr STRING_5) (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Return (Call CoinsDistribResult (__list__ 0 1))))) (Assign (__list__ (Tuple (__list__ left_distrib_moves left_distrib_excess))) (Call get_distrib (__list__ (Attribute node left)))) (Assign (__list__ (Tuple (__list__ right_distrib_moves right_distrib_excess))) (Call get_distrib (__list__ (Attribute node right)))) (Assign (__list__ coins_to_left) (BinOp 1 Sub left_distrib_excess)) (Assign (__list__ coins_to_right) (BinOp 1 Sub right_distrib_excess)) (Assign (__list__ result_moves) (BinOp (BinOp (BinOp left_distrib_moves Add right_distrib_moves) Add (Call abs (__list__ coins_to_left))) Add (Call abs (__list__ coins_to_right)))) (Assign (__list__ result_excess) (BinOp (BinOp (Attribute node data) Sub coins_to_left) Sub coins_to_right)) (Return (Call CoinsDistribResult (__list__ result_moves result_excess)))) (__list__ ) CoinsDistribResult) (Return (Subscript (Call get_distrib (__list__ root)) 0))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign data int 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (If (Attribute self left) (__list__ (Expr (YieldFrom (Attribute self left))))) (Expr (Yield (Attribute self data))) (If (Attribute self right) (__list__ (Expr (YieldFrom (Attribute self right)))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef is_full (arguments (__list__ (arg self))) (__list__ (If (BoolOp Or (__list__ (UnaryOp Not self) (BoolOp And (__list__ (UnaryOp Not (Attribute self left)) (UnaryOp Not (Attribute self right)))))) (__list__ (Return True))) (If (BoolOp And (__list__ (Attribute self left) (Attribute self right))) (__list__ (Return (BoolOp And (__list__ (Call (Attribute (Attribute self left) is_full)) (Call (Attribute (Attribute self right) is_full))))))) (Return False)) (__list__ ) bool)) (__list__ dataclass)) (ClassDef BinaryTree (__list__ (AnnAssign root Node 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Return (Call iter (__list__ (Attribute self root))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Return (Call len (__list__ (Attribute self root))))) (__list__ ) int) (FunctionDef small_tree (arguments (__list__ (arg cls))) (__list__ (Expr STRING_0) (Assign (__list__ binary_tree) (Call BinaryTree (__list__ (Call Node (__list__ 2))))) (Assign (__list__ (Attribute (Attribute binary_tree root) left)) (Call Node (__list__ 1))) (Assign (__list__ (Attribute (Attribute binary_tree root) right)) (Call Node (__list__ 3))) (Return binary_tree)) (__list__ classmethod) BinaryTree) (FunctionDef medium_tree (arguments (__list__ (arg cls))) (__list__ (Expr STRING_1) (Assign (__list__ binary_tree) (Call BinaryTree (__list__ (Call Node (__list__ 4))))) (Assign (__list__ (Attribute (Attribute binary_tree root) left) two) (Call Node (__list__ 2))) (Assign (__list__ (Attribute two left)) (Call Node (__list__ 1))) (Assign (__list__ (Attribute two right)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute binary_tree root) right) five) (Call Node (__list__ 5))) (Assign (__list__ (Attribute five right) six) (Call Node (__list__ 6))) (Assign (__list__ (Attribute six right)) (Call Node (__list__ 7))) (Return binary_tree)) (__list__ classmethod) BinaryTree) (FunctionDef depth (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call (Attribute self _depth) (__list__ (Attribute self root))))) (__list__ ) int) (FunctionDef _depth (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)))) (__list__ (If (UnaryOp Not node) (__list__ (Return 0))) (Return (BinOp 1 Add (Call max (__list__ (Call (Attribute self _depth) (__list__ (Attribute node left))) (Call (Attribute self _depth) (__list__ (Attribute node right)))))))) (__list__ ) int) (FunctionDef is_full (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (Call (Attribute (Attribute self root) is_full)))) (__list__ ) bool)) (__list__ dataclass)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Import (__list__ (alias math))) (ClassDef SegmentTree (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg a))) (__list__ (Assign (__list__ (Attribute self A)) a) (Assign (__list__ (Attribute self N)) (Call len (__list__ (Attribute self A)))) (Assign (__list__ (Attribute self st)) (BinOp (List (__list__ 0)) Mult (BinOp 4 Mult (Attribute self N)))) (If (Attribute self N) (__list__ (Expr (Call (Attribute self build) (__list__ 1 0 (BinOp (Attribute self N) Sub 1))))))) (__list__ )) (FunctionDef left (arguments (__list__ (arg self) (arg idx))) (__list__ (Expr STRING_0) (Return (BinOp idx Mult 2))) (__list__ )) (FunctionDef right (arguments (__list__ (arg self) (arg idx))) (__list__ (Expr STRING_1) (Return (BinOp (BinOp idx Mult 2) Add 1))) (__list__ )) (FunctionDef build (arguments (__list__ (arg self) (arg idx) (arg left) (arg right))) (__list__ (If (Compare left (__list__ Eq) (__list__ right)) (__list__ (Assign (__list__ (Subscript (Attribute self st) idx)) (Subscript (Attribute self A) left))) (__list__ (Assign (__list__ mid) (BinOp (BinOp left Add right) FloorDiv 2)) (Expr (Call (Attribute self build) (__list__ (Call (Attribute self left) (__list__ idx)) left mid))) (Expr (Call (Attribute self build) (__list__ (Call (Attribute self right) (__list__ idx)) (BinOp mid Add 1) right))) (Assign (__list__ (Subscript (Attribute self st) idx)) (Call max (__list__ (Subscript (Attribute self st) (Call (Attribute self left) (__list__ idx))) (Subscript (Attribute self st) (Call (Attribute self right) (__list__ idx))))))))) (__list__ )) (FunctionDef update (arguments (__list__ (arg self) (arg a) (arg b) (arg val))) (__list__ (Expr STRING_2) (Return (Call (Attribute self update_recursive) (__list__ 1 0 (BinOp (Attribute self N) Sub 1) (BinOp a Sub 1) (BinOp b Sub 1) val)))) (__list__ )) (FunctionDef update_recursive (arguments (__list__ (arg self) (arg idx) (arg left) (arg right) (arg a) (arg b) (arg val))) (__list__ (Expr STRING_3) (If (BoolOp Or (__list__ (Compare right (__list__ Lt) (__list__ a)) (Compare left (__list__ Gt) (__list__ b)))) (__list__ (Return True))) (If (Compare left (__list__ Eq) (__list__ right)) (__list__ (Assign (__list__ (Subscript (Attribute self st) idx)) val) (Return True))) (Assign (__list__ mid) (BinOp (BinOp left Add right) FloorDiv 2)) (Expr (Call (Attribute self update_recursive) (__list__ (Call (Attribute self left) (__list__ idx)) left mid a b val))) (Expr (Call (Attribute self update_recursive) (__list__ (Call (Attribute self right) (__list__ idx)) (BinOp mid Add 1) right a b val))) (Assign (__list__ (Subscript (Attribute self st) idx)) (Call max (__list__ (Subscript (Attribute self st) (Call (Attribute self left) (__list__ idx))) (Subscript (Attribute self st) (Call (Attribute self right) (__list__ idx)))))) (Return True)) (__list__ )) (FunctionDef query (arguments (__list__ (arg self) (arg a) (arg b))) (__list__ (Expr STRING_4) (Return (Call (Attribute self query_recursive) (__list__ 1 0 (BinOp (Attribute self N) Sub 1) (BinOp a Sub 1) (BinOp b Sub 1))))) (__list__ )) (FunctionDef query_recursive (arguments (__list__ (arg self) (arg idx) (arg left) (arg right) (arg a) (arg b))) (__list__ (Expr STRING_5) (If (BoolOp Or (__list__ (Compare right (__list__ Lt) (__list__ a)) (Compare left (__list__ Gt) (__list__ b)))) (__list__ (Return (UnaryOp USub (Attribute math inf))))) (If (BoolOp And (__list__ (Compare left (__list__ GtE) (__list__ a)) (Compare right (__list__ LtE) (__list__ b)))) (__list__ (Return (Subscript (Attribute self st) idx)))) (Assign (__list__ mid) (BinOp (BinOp left Add right) FloorDiv 2)) (Assign (__list__ q1) (Call (Attribute self query_recursive) (__list__ (Call (Attribute self left) (__list__ idx)) left mid a b))) (Assign (__list__ q2) (Call (Attribute self query_recursive) (__list__ (Call (Attribute self right) (__list__ idx)) (BinOp mid Add 1) right a b))) (Return (Call max (__list__ q1 q2)))) (__list__ )) (FunctionDef show_data (arguments (__list__ (arg self))) (__list__ (Assign (__list__ show_list) List) (For i (Call range (__list__ 1 (BinOp N Add 1))) (__list__ (AugAssign show_list Add (List (__list__ (Call (Attribute self query) (__list__ i i))))))) (Expr (Call print (__list__ show_list)))) (__list__ )))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ A) (List (__list__ 1 2 (UnaryOp USub 4) 7 3 (UnaryOp USub 5) 6 11 (UnaryOp USub 20) 9 14 15 5 2 (UnaryOp USub 8)))) (Assign (__list__ N) 15) (Assign (__list__ segt) (Call SegmentTree (__list__ A))) (Expr (Call print (__list__ (Call (Attribute segt query) (__list__ 4 6))))) (Expr (Call print (__list__ (Call (Attribute segt query) (__list__ 7 11))))) (Expr (Call print (__list__ (Call (Attribute segt query) (__list__ 7 12))))) (Expr (Call (Attribute segt update) (__list__ 1 3 111))) (Expr (Call print (__list__ (Call (Attribute segt query) (__list__ 1 15))))) (Expr (Call (Attribute segt update) (__list__ 7 8 235))) (Expr (Call (Attribute segt show_data))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom queue (__list__ (alias Queue)) 0) (FunctionDef swap (arguments (__list__ (arg a int) (arg b int))) (__list__ (Expr STRING_0) (AugAssign a BitXor b) (AugAssign b BitXor a) (AugAssign a BitXor b) (Return (Tuple (__list__ a b)))) (__list__ ) (Subscript tuple (Tuple (__list__ int int)))) (FunctionDef create_sparse (arguments (__list__ (arg max_node int) (arg parent (Subscript list (Subscript list int))))) (__list__ (Expr STRING_1) (Assign (__list__ j) 1) (While (Compare (BinOp 1 LShift j) (__list__ Lt) (__list__ max_node)) (__list__ (For i (Call range (__list__ 1 (BinOp max_node Add 1))) (__list__ (Assign (__list__ (Subscript (Subscript parent j) i)) (Subscript (Subscript parent (BinOp j Sub 1)) (Subscript (Subscript parent (BinOp j Sub 1)) i))))) (AugAssign j Add 1))) (Return parent)) (__list__ ) (Subscript list (Subscript list int))) (FunctionDef lowest_common_ancestor (arguments (__list__ (arg u int) (arg v int) (arg level (Subscript list int)) (arg parent (Subscript list (Subscript list int))))) (__list__ (If (Compare (Subscript level u) (__list__ Lt) (__list__ (Subscript level v))) (__list__ (Assign (__list__ (Tuple (__list__ u v))) (Call swap (__list__ u v))))) (For i (Call range (__list__ 18 (UnaryOp USub 1) (UnaryOp USub 1))) (__list__ (If (Compare (BinOp (Subscript level u) Sub (BinOp 1 LShift i)) (__list__ GtE) (__list__ (Subscript level v))) (__list__ (Assign (__list__ u) (Subscript (Subscript parent i) u)))))) (If (Compare u (__list__ Eq) (__list__ v)) (__list__ (Return u))) (For i (Call range (__list__ 18 (UnaryOp USub 1) (UnaryOp USub 1))) (__list__ (If (Compare (Subscript (Subscript parent i) u) (__list__ NotIn) (__list__ (List (__list__ 0 (Subscript (Subscript parent i) v))))) (__list__ (Assign (__list__ (Tuple (__list__ u v))) (Tuple (__list__ (Subscript (Subscript parent i) u) (Subscript (Subscript parent i) v)))))))) (Return (Subscript (Subscript parent 0) u))) (__list__ ) int) (FunctionDef breadth_first_search (arguments (__list__ (arg level (Subscript list int)) (arg parent (Subscript list (Subscript list int))) (arg max_node int) (arg graph (Subscript dict (Tuple (__list__ int (Subscript list int))))) (arg root int)) (__list__ 1)) (__list__ (Expr STRING_2) (Assign (__list__ (Subscript level root)) 0) (AnnAssign q (Subscript Queue int) (Call Queue (__list__ (keyword maxsize max_node))) 1) (Expr (Call (Attribute q put) (__list__ root))) (While (Compare (Call (Attribute q qsize)) (__list__ NotEq) (__list__ 0)) (__list__ (Assign (__list__ u) (Call (Attribute q get))) (For v (Subscript graph u) (__list__ (If (Compare (Subscript level v) (__list__ Eq) (__list__ (UnaryOp USub 1))) (__list__ (Assign (__list__ (Subscript level v)) (BinOp (Subscript level u) Add 1)) (Expr (Call (Attribute q put) (__list__ v))) (Assign (__list__ (Subscript (Subscript parent 0) v)) u))))))) (Return (Tuple (__list__ level parent)))) (__list__ ) (Subscript tuple (Tuple (__list__ (Subscript list int) (Subscript list (Subscript list int)))))) (FunctionDef main arguments (__list__ (Assign (__list__ max_node) 13) (Assign (__list__ parent) (ListComp (ListComp 0 (__list__ (comprehension _ (Call range (__list__ (BinOp max_node Add 10))) 0))) (__list__ (comprehension _ (Call range (__list__ 20)) 0)))) (Assign (__list__ level) (ListComp (UnaryOp USub 1) (__list__ (comprehension _ (Call range (__list__ (BinOp max_node Add 10))) 0)))) (AnnAssign graph (Subscript dict (Tuple (__list__ int (Subscript list int)))) (Dict (__list__ 1 2 3 4 5 6 7 8 9 10 11 12 13) (__list__ (List (__list__ 2 3 4)) (List (__list__ 5)) (List (__list__ 6 7)) (List (__list__ 8)) (List (__list__ 9 10)) (List (__list__ 11)) List (List (__list__ 12 13)) List List List List List)) 1) (Assign (__list__ (Tuple (__list__ level parent))) (Call breadth_first_search (__list__ level parent max_node graph 1))) (Assign (__list__ parent) (Call create_sparse (__list__ max_node parent))) (Expr (Call print (__list__ STRING_3 (Call lowest_common_ancestor (__list__ 1 3 level parent))))) (Expr (Call print (__list__ STRING_4 (Call lowest_common_ancestor (__list__ 5 6 level parent))))) (Expr (Call print (__list__ STRING_5 (Call lowest_common_ancestor (__list__ 7 11 level parent))))) (Expr (Call print (__list__ STRING_6 (Call lowest_common_ancestor (__list__ 6 7 level parent))))) (Expr (Call print (__list__ STRING_7 (Call lowest_common_ancestor (__list__ 4 12 level parent))))) (Expr (Call print (__list__ STRING_8 (Call lowest_common_ancestor (__list__ 8 8 level parent)))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call main)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign data int 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1) (FunctionDef depth (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Assign (__list__ left_depth) (IfExp (Attribute self left) (Call (Attribute (Attribute self left) depth)) 0)) (Assign (__list__ right_depth) (IfExp (Attribute self right) (Call (Attribute (Attribute self right) depth)) 0)) (Return (BinOp (Call max (__list__ left_depth right_depth)) Add 1))) (__list__ ) int) (FunctionDef diameter (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Assign (__list__ left_depth) (IfExp (Attribute self left) (Call (Attribute (Attribute self left) depth)) 0)) (Assign (__list__ right_depth) (IfExp (Attribute self right) (Call (Attribute (Attribute self right) depth)) 0)) (Return (BinOp (BinOp left_depth Add right_depth) Add 1))) (__list__ ) int)) (__list__ dataclass)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Assign (__list__ root) (Call Node (__list__ 1))) (Assign (__list__ (Attribute root left)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute root right)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute root left) left)) (Call Node (__list__ 4))) (Assign (__list__ (Attribute (Attribute root left) right)) (Call Node (__list__ 5))) (Expr STRING_3) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_4 (FormattedValue (Call (Attribute root diameter)) 114)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_5 (FormattedValue (Call (Attribute (Attribute root left) diameter)) 114)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_6 (FormattedValue (Call (Attribute (Attribute root right) diameter)) 114)))))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (Import (__list__ (alias math))) (ClassDef SegmentTree (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg size int))) (__list__ (Assign (__list__ (Attribute self size)) size) (Assign (__list__ (Attribute self segment_tree)) (ListComp 0 (__list__ (comprehension i (Call range (__list__ (BinOp 4 Mult size))) 0)))) (Assign (__list__ (Attribute self lazy)) (ListComp 0 (__list__ (comprehension i (Call range (__list__ (BinOp 4 Mult size))) 0)))) (Assign (__list__ (Attribute self flag)) (ListComp 0 (__list__ (comprehension i (Call range (__list__ (BinOp 4 Mult size))) 0))))) (__list__ ) None) (FunctionDef left (arguments (__list__ (arg self) (arg idx int))) (__list__ (Expr STRING_0) (Return (BinOp idx Mult 2))) (__list__ ) int) (FunctionDef right (arguments (__list__ (arg self) (arg idx int))) (__list__ (Expr STRING_1) (Return (BinOp (BinOp idx Mult 2) Add 1))) (__list__ ) int) (FunctionDef build (arguments (__list__ (arg self) (arg idx int) (arg left_element int) (arg right_element int) (arg a (Subscript list int)))) (__list__ (If (Compare left_element (__list__ Eq) (__list__ right_element)) (__list__ (Assign (__list__ (Subscript (Attribute self segment_tree) idx)) (Subscript a (BinOp left_element Sub 1)))) (__list__ (Assign (__list__ mid) (BinOp (BinOp left_element Add right_element) FloorDiv 2)) (Expr (Call (Attribute self build) (__list__ (Call (Attribute self left) (__list__ idx)) left_element mid a))) (Expr (Call (Attribute self build) (__list__ (Call (Attribute self right) (__list__ idx)) (BinOp mid Add 1) right_element a))) (Assign (__list__ (Subscript (Attribute self segment_tree) idx)) (Call max (__list__ (Subscript (Attribute self segment_tree) (Call (Attribute self left) (__list__ idx))) (Subscript (Attribute self segment_tree) (Call (Attribute self right) (__list__ idx))))))))) (__list__ ) None) (FunctionDef update (arguments (__list__ (arg self) (arg idx int) (arg left_element int) (arg right_element int) (arg a int) (arg b int) (arg val int))) (__list__ (Expr STRING_2) (If (Compare (Subscript (Attribute self flag) idx) (__list__ Is) (__list__ True)) (__list__ (Assign (__list__ (Subscript (Attribute self segment_tree) idx)) (Subscript (Attribute self lazy) idx)) (Assign (__list__ (Subscript (Attribute self flag) idx)) False) (If (Compare left_element (__list__ NotEq) (__list__ right_element)) (__list__ (Assign (__list__ (Subscript (Attribute self lazy) (Call (Attribute self left) (__list__ idx)))) (Subscript (Attribute self lazy) idx)) (Assign (__list__ (Subscript (Attribute self lazy) (Call (Attribute self right) (__list__ idx)))) (Subscript (Attribute self lazy) idx)) (Assign (__list__ (Subscript (Attribute self flag) (Call (Attribute self left) (__list__ idx)))) True) (Assign (__list__ (Subscript (Attribute self flag) (Call (Attribute self right) (__list__ idx)))) True))))) (If (BoolOp Or (__list__ (Compare right_element (__list__ Lt) (__list__ a)) (Compare left_element (__list__ Gt) (__list__ b)))) (__list__ (Return True))) (If (BoolOp And (__list__ (Compare left_element (__list__ GtE) (__list__ a)) (Compare right_element (__list__ LtE) (__list__ b)))) (__list__ (Assign (__list__ (Subscript (Attribute self segment_tree) idx)) val) (If (Compare left_element (__list__ NotEq) (__list__ right_element)) (__list__ (Assign (__list__ (Subscript (Attribute self lazy) (Call (Attribute self left) (__list__ idx)))) val) (Assign (__list__ (Subscript (Attribute self lazy) (Call (Attribute self right) (__list__ idx)))) val) (Assign (__list__ (Subscript (Attribute self flag) (Call (Attribute self left) (__list__ idx)))) True) (Assign (__list__ (Subscript (Attribute self flag) (Call (Attribute self right) (__list__ idx)))) True))) (Return True))) (Assign (__list__ mid) (BinOp (BinOp left_element Add right_element) FloorDiv 2)) (Expr (Call (Attribute self update) (__list__ (Call (Attribute self left) (__list__ idx)) left_element mid a b val))) (Expr (Call (Attribute self update) (__list__ (Call (Attribute self right) (__list__ idx)) (BinOp mid Add 1) right_element a b val))) (Assign (__list__ (Subscript (Attribute self segment_tree) idx)) (Call max (__list__ (Subscript (Attribute self segment_tree) (Call (Attribute self left) (__list__ idx))) (Subscript (Attribute self segment_tree) (Call (Attribute self right) (__list__ idx)))))) (Return True)) (__list__ ) bool) (FunctionDef query (arguments (__list__ (arg self) (arg idx int) (arg left_element int) (arg right_element int) (arg a int) (arg b int))) (__list__ (Expr STRING_3) (If (Compare (Subscript (Attribute self flag) idx) (__list__ Is) (__list__ True)) (__list__ (Assign (__list__ (Subscript (Attribute self segment_tree) idx)) (Subscript (Attribute self lazy) idx)) (Assign (__list__ (Subscript (Attribute self flag) idx)) False) (If (Compare left_element (__list__ NotEq) (__list__ right_element)) (__list__ (Assign (__list__ (Subscript (Attribute self lazy) (Call (Attribute self left) (__list__ idx)))) (Subscript (Attribute self lazy) idx)) (Assign (__list__ (Subscript (Attribute self lazy) (Call (Attribute self right) (__list__ idx)))) (Subscript (Attribute self lazy) idx)) (Assign (__list__ (Subscript (Attribute self flag) (Call (Attribute self left) (__list__ idx)))) True) (Assign (__list__ (Subscript (Attribute self flag) (Call (Attribute self right) (__list__ idx)))) True))))) (If (BoolOp Or (__list__ (Compare right_element (__list__ Lt) (__list__ a)) (Compare left_element (__list__ Gt) (__list__ b)))) (__list__ (Return (UnaryOp USub (Attribute math inf))))) (If (BoolOp And (__list__ (Compare left_element (__list__ GtE) (__list__ a)) (Compare right_element (__list__ LtE) (__list__ b)))) (__list__ (Return (Subscript (Attribute self segment_tree) idx)))) (Assign (__list__ mid) (BinOp (BinOp left_element Add right_element) FloorDiv 2)) (Assign (__list__ q1) (Call (Attribute self query) (__list__ (Call (Attribute self left) (__list__ idx)) left_element mid a b))) (Assign (__list__ q2) (Call (Attribute self query) (__list__ (Call (Attribute self right) (__list__ idx)) (BinOp mid Add 1) right_element a b))) (Return (Call max (__list__ q1 q2)))) (__list__ ) (BinOp int BitOr float)) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (Call str (__list__ (ListComp (Call (Attribute self query) (__list__ 1 1 (Attribute self size) i i)) (__list__ (comprehension i (Call range (__list__ 1 (BinOp (Attribute self size) Add 1))) 0))))))) (__list__ ) str))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ A) (List (__list__ 1 2 (UnaryOp USub 4) 7 3 (UnaryOp USub 5) 6 11 (UnaryOp USub 20) 9 14 15 5 2 (UnaryOp USub 8)))) (Assign (__list__ size) 15) (Assign (__list__ segt) (Call SegmentTree (__list__ size))) (Expr (Call (Attribute segt build) (__list__ 1 1 size A))) (Expr (Call print (__list__ (Call (Attribute segt query) (__list__ 1 1 size 4 6))))) (Expr (Call print (__list__ (Call (Attribute segt query) (__list__ 1 1 size 7 11))))) (Expr (Call print (__list__ (Call (Attribute segt query) (__list__ 1 1 size 7 12))))) (Expr (Call (Attribute segt update) (__list__ 1 1 size 1 3 111))) (Expr (Call print (__list__ (Call (Attribute segt query) (__list__ 1 1 size 1 15))))) (Expr (Call (Attribute segt update) (__list__ 1 1 size 7 8 235))) (Expr (Call print (__list__ segt))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef TreeNode (__list__ (Expr STRING_0) (AnnAssign value int 0 1) (AnnAssign left (BinOp TreeNode BitOr None) None 1) (AnnAssign right (BinOp TreeNode BitOr None) None 1) (FunctionDef __post_init__ (arguments (__list__ (arg self))) (__list__ (If (UnaryOp Not (Call isinstance (__list__ (Attribute self value) int))) (__list__ (Raise (Call TypeError (__list__ STRING_1)))))) (__list__ )) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Expr (Yield self)) (Expr (YieldFrom (BoolOp Or (__list__ (Attribute self left) Tuple)))) (Expr (YieldFrom (BoolOp Or (__list__ (Attribute self right) Tuple))))) (__list__ ) (Subscript Iterator TreeNode)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Return (Call (Attribute (JoinedStr (__list__ (FormattedValue (Attribute self value) -1) STRING_13 (FormattedValue (Attribute self left) 114) STRING_13 (FormattedValue (Attribute self right) 114))) replace) (__list__ STRING_5 STRING_6)))) (__list__ ) str) (FunctionDef five_tree (arguments (__list__ (arg cls))) (__list__ (Expr STRING_7) (Assign (__list__ root) (Call TreeNode (__list__ 1))) (Assign (__list__ (Attribute root left)) (Call TreeNode (__list__ 2))) (Assign (__list__ (Attribute root right)) (Call TreeNode (__list__ 3))) (Assign (__list__ (Attribute (Attribute root right) left)) (Call TreeNode (__list__ 4))) (Assign (__list__ (Attribute (Attribute root right) right)) (Call TreeNode (__list__ 5))) (Return root)) (__list__ classmethod) TreeNode)) (__list__ dataclass)) (FunctionDef deserialize (arguments (__list__ (arg data str))) (__list__ (Expr STRING_8) (If (UnaryOp Not data) (__list__ (Raise (Call ValueError (__list__ STRING_9))))) (Assign (__list__ nodes) (Call (Attribute data split) (__list__ STRING_13))) (FunctionDef build_tree arguments (__list__ (Assign (__list__ value) (Call (Attribute nodes pop) (__list__ 0))) (If (Compare value (__list__ Eq) (__list__ STRING_6)) (__list__ (Return None))) (Assign (__list__ node) (Call TreeNode (__list__ (Call int (__list__ value))))) (Assign (__list__ (Attribute node left)) (Call build_tree)) (Assign (__list__ (Attribute node right)) (Call build_tree)) (Return node)) (__list__ ) (BinOp TreeNode BitOr None)) (Return (Call build_tree))) (__list__ ) (BinOp TreeNode BitOr None)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ClassDef MaxFenwickTree (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg size int))) (__list__ (Expr STRING_1) (Assign (__list__ (Attribute self size)) size) (Assign (__list__ (Attribute self arr)) (BinOp (List (__list__ 0)) Mult size)) (Assign (__list__ (Attribute self tree)) (BinOp (List (__list__ 0)) Mult size))) (__list__ ) None) (FunctionDef get_next (arguments (__list__ (arg index int))) (__list__ (Expr STRING_2) (Return (BinOp index BitOr (BinOp index Add 1)))) (__list__ staticmethod) int) (FunctionDef get_prev (arguments (__list__ (arg index int))) (__list__ (Expr STRING_3) (Return (BinOp (BinOp index BitAnd (BinOp index Add 1)) Sub 1))) (__list__ staticmethod) int) (FunctionDef update (arguments (__list__ (arg self) (arg index int) (arg value int))) (__list__ (Expr STRING_4) (Assign (__list__ (Subscript (Attribute self arr) index)) value) (While (Compare index (__list__ Lt) (__list__ (Attribute self size))) (__list__ (Assign (__list__ current_left_border) (BinOp (Call (Attribute self get_prev) (__list__ index)) Add 1)) (If (Compare current_left_border (__list__ Eq) (__list__ index)) (__list__ (Assign (__list__ (Subscript (Attribute self tree) index)) value)) (__list__ (Assign (__list__ (Subscript (Attribute self tree) index)) (Call max (__list__ value current_left_border index))))) (Assign (__list__ index) (Call (Attribute self get_next) (__list__ index)))))) (__list__ ) None) (FunctionDef query (arguments (__list__ (arg self) (arg left int) (arg right int))) (__list__ (Expr STRING_5) (AugAssign right Sub 1) (Assign (__list__ result) 0) (While (Compare left (__list__ LtE) (__list__ right)) (__list__ (Assign (__list__ current_left) (Call (Attribute self get_prev) (__list__ right))) (If (Compare left (__list__ LtE) (__list__ current_left)) (__list__ (Assign (__list__ result) (Call max (__list__ result (Subscript (Attribute self tree) right)))) (Assign (__list__ right) current_left)) (__list__ (Assign (__list__ result) (Call max (__list__ result (Subscript (Attribute self arr) right)))) (AugAssign right Sub 1))))) (Return result)) (__list__ ) int))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (Import (__list__ (alias unittest))) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (Import (__list__ (alias pytest))) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg label int) (arg parent (BinOp Node BitOr None)))) (__list__ (Assign (__list__ (Attribute self label)) label) (Assign (__list__ (Attribute self parent)) parent) (AnnAssign (Attribute self left) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp Node BitOr None) None 0)) (__list__ ) None))) (ClassDef BinarySearchTree (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self root) (BinOp Node BitOr None) None 0)) (__list__ ) None) (FunctionDef empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Assign (__list__ (Attribute self root)) None)) (__list__ ) None) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Compare (Attribute self root) (__list__ Is) (__list__ None)))) (__list__ ) bool) (FunctionDef put (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_3) (Assign (__list__ (Attribute self root)) (Call (Attribute self _put) (__list__ (Attribute self root) label)))) (__list__ ) None) (FunctionDef _put (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)) (arg label int) (arg parent (BinOp Node BitOr None))) (__list__ None)) (__list__ (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ node) (Call Node (__list__ label parent)))) (__list__ (If (Compare label (__list__ Lt) (__list__ (Attribute node label))) (__list__ (Assign (__list__ (Attribute node left)) (Call (Attribute self _put) (__list__ (Attribute node left) label node)))) (__list__ (If (Compare label (__list__ Gt) (__list__ (Attribute node label))) (__list__ (Assign (__list__ (Attribute node right)) (Call (Attribute self _put) (__list__ (Attribute node right) label node)))) (__list__ (Assign (__list__ msg) (JoinedStr (__list__ STRING_4 (FormattedValue label -1) STRING_5))) (Raise (Call ValueError (__list__ msg))))))))) (Return node)) (__list__ ) Node) (FunctionDef search (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_6) (Return (Call (Attribute self _search) (__list__ (Attribute self root) label)))) (__list__ ) Node) (FunctionDef _search (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)) (arg label int))) (__list__ (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ msg) (JoinedStr (__list__ STRING_4 (FormattedValue label -1) STRING_7))) (Raise (Call ValueError (__list__ msg)))) (__list__ (If (Compare label (__list__ Lt) (__list__ (Attribute node label))) (__list__ (Assign (__list__ node) (Call (Attribute self _search) (__list__ (Attribute node left) label)))) (__list__ (If (Compare label (__list__ Gt) (__list__ (Attribute node label))) (__list__ (Assign (__list__ node) (Call (Attribute self _search) (__list__ (Attribute node right) label))))))))) (Return node)) (__list__ ) Node) (FunctionDef remove (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_8) (Assign (__list__ node) (Call (Attribute self search) (__list__ label))) (If (BoolOp And (__list__ (Attribute node right) (Attribute node left))) (__list__ (Assign (__list__ lowest_node) (Call (Attribute self _get_lowest_node) (__list__ (Attribute node right)))) (Assign (__list__ (Attribute lowest_node left)) (Attribute node left)) (Assign (__list__ (Attribute lowest_node right)) (Attribute node right)) (Assign (__list__ (Attribute (Attribute node left) parent)) lowest_node) (If (Attribute node right) (__list__ (Assign (__list__ (Attribute (Attribute node right) parent)) lowest_node))) (Expr (Call (Attribute self _reassign_nodes) (__list__ node lowest_node)))) (__list__ (If (BoolOp And (__list__ (UnaryOp Not (Attribute node right)) (Attribute node left))) (__list__ (Expr (Call (Attribute self _reassign_nodes) (__list__ node (Attribute node left))))) (__list__ (If (BoolOp And (__list__ (Attribute node right) (UnaryOp Not (Attribute node left)))) (__list__ (Expr (Call (Attribute self _reassign_nodes) (__list__ node (Attribute node right))))) (__list__ (Expr (Call (Attribute self _reassign_nodes) (__list__ node None)))))))))) (__list__ ) None) (FunctionDef _reassign_nodes (arguments (__list__ (arg self) (arg node Node) (arg new_children (BinOp Node BitOr None)))) (__list__ (If new_children (__list__ (Assign (__list__ (Attribute new_children parent)) (Attribute node parent)))) (If (Attribute node parent) (__list__ (If (Compare (Attribute (Attribute node parent) right) (__list__ Eq) (__list__ node)) (__list__ (Assign (__list__ (Attribute (Attribute node parent) right)) new_children)) (__list__ (Assign (__list__ (Attribute (Attribute node parent) left)) new_children)))) (__list__ (Assign (__list__ (Attribute self root)) new_children)))) (__list__ ) None) (FunctionDef _get_lowest_node (arguments (__list__ (arg self) (arg node Node))) (__list__ (If (Attribute node left) (__list__ (Assign (__list__ lowest_node) (Call (Attribute self _get_lowest_node) (__list__ (Attribute node left))))) (__list__ (Assign (__list__ lowest_node) node) (Expr (Call (Attribute self _reassign_nodes) (__list__ node (Attribute node right)))))) (Return lowest_node)) (__list__ ) Node) (FunctionDef exists (arguments (__list__ (arg self) (arg label int))) (__list__ (Expr STRING_9) (Try (__list__ (Expr (Call (Attribute self search) (__list__ label))) (Return True)) (__list__ (ExceptHandler ValueError (__list__ (Return False)))))) (__list__ ) bool) (FunctionDef get_max_label (arguments (__list__ (arg self))) (__list__ (Expr STRING_10) (If (Compare (Attribute self root) (__list__ Is) (__list__ None)) (__list__ (Raise (Call ValueError (__list__ STRING_11))))) (Assign (__list__ node) (Attribute self root)) (While (Compare (Attribute node right) (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ node) (Attribute node right)))) (Return (Attribute node label))) (__list__ ) int) (FunctionDef get_min_label (arguments (__list__ (arg self))) (__list__ (Expr STRING_12) (If (Compare (Attribute self root) (__list__ Is) (__list__ None)) (__list__ (Raise (Call ValueError (__list__ STRING_11))))) (Assign (__list__ node) (Attribute self root)) (While (Compare (Attribute node left) (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ node) (Attribute node left)))) (Return (Attribute node label))) (__list__ ) int) (FunctionDef inorder_traversal (arguments (__list__ (arg self))) (__list__ (Expr STRING_13) (Return (Call (Attribute self _inorder_traversal) (__list__ (Attribute self root))))) (__list__ ) (Subscript Iterator Node)) (FunctionDef _inorder_traversal (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)))) (__list__ (If (Compare node (__list__ IsNot) (__list__ None)) (__list__ (Expr (YieldFrom (Call (Attribute self _inorder_traversal) (__list__ (Attribute node left))))) (Expr (Yield node)) (Expr (YieldFrom (Call (Attribute self _inorder_traversal) (__list__ (Attribute node right)))))))) (__list__ ) (Subscript Iterator Node)) (FunctionDef preorder_traversal (arguments (__list__ (arg self))) (__list__ (Expr STRING_14) (Return (Call (Attribute self _preorder_traversal) (__list__ (Attribute self root))))) (__list__ ) (Subscript Iterator Node)) (FunctionDef _preorder_traversal (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)))) (__list__ (If (Compare node (__list__ IsNot) (__list__ None)) (__list__ (Expr (Yield node)) (Expr (YieldFrom (Call (Attribute self _preorder_traversal) (__list__ (Attribute node left))))) (Expr (YieldFrom (Call (Attribute self _preorder_traversal) (__list__ (Attribute node right)))))))) (__list__ ) (Subscript Iterator Node)))) (ClassDef BinarySearchTreeTest (__list__ (Attribute unittest TestCase)) (__list__ (FunctionDef _get_binary_search_tree arguments (__list__ (Expr STRING_15) (Assign (__list__ t) (Call BinarySearchTree)) (Expr (Call (Attribute t put) (__list__ 8))) (Expr (Call (Attribute t put) (__list__ 3))) (Expr (Call (Attribute t put) (__list__ 6))) (Expr (Call (Attribute t put) (__list__ 1))) (Expr (Call (Attribute t put) (__list__ 10))) (Expr (Call (Attribute t put) (__list__ 14))) (Expr (Call (Attribute t put) (__list__ 13))) (Expr (Call (Attribute t put) (__list__ 4))) (Expr (Call (Attribute t put) (__list__ 7))) (Expr (Call (Attribute t put) (__list__ 5))) (Return t)) (__list__ staticmethod) BinarySearchTree) (FunctionDef test_put (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call BinarySearchTree)) (Assert (Call (Attribute t is_empty))) (Expr (Call (Attribute t put) (__list__ 8))) (Expr STRING_16) (Assert (Compare (Attribute t root) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute t root) parent) (__list__ Is) (__list__ None))) (Assert (Compare (Attribute (Attribute t root) label) (__list__ Eq) (__list__ 8))) (Expr (Call (Attribute t put) (__list__ 10))) (Expr STRING_17) (Assert (Compare (Attribute (Attribute t root) right) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) right) parent) (__list__ Eq) (__list__ (Attribute t root)))) (Assert (Compare (Attribute (Attribute (Attribute t root) right) label) (__list__ Eq) (__list__ 10))) (Expr (Call (Attribute t put) (__list__ 3))) (Expr STRING_18) (Assert (Compare (Attribute (Attribute t root) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) parent) (__list__ Eq) (__list__ (Attribute t root)))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) label) (__list__ Eq) (__list__ 3))) (Expr (Call (Attribute t put) (__list__ 6))) (Expr STRING_19) (Assert (Compare (Attribute (Attribute (Attribute t root) left) right) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) label) (__list__ Eq) (__list__ 6))) (Expr (Call (Attribute t put) (__list__ 1))) (Expr STRING_20) (Assert (Compare (Attribute (Attribute (Attribute t root) left) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) label) (__list__ Eq) (__list__ 1))) (With (__list__ (withitem (Call (Attribute pytest raises) (__list__ ValueError)))) (__list__ (Expr (Call (Attribute t put) (__list__ 1)))))) (__list__ ) None) (FunctionDef test_search (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Assign (__list__ node) (Call (Attribute t search) (__list__ 6))) (Assert (Compare (Attribute node label) (__list__ Eq) (__list__ 6))) (Assign (__list__ node) (Call (Attribute t search) (__list__ 13))) (Assert (Compare (Attribute node label) (__list__ Eq) (__list__ 13))) (With (__list__ (withitem (Call (Attribute pytest raises) (__list__ ValueError)))) (__list__ (Expr (Call (Attribute t search) (__list__ 2)))))) (__list__ ) None) (FunctionDef test_remove (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Expr (Call (Attribute t remove) (__list__ 13))) (Expr STRING_21) (Assert (Compare (Attribute t root) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute t root) right) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) right) right) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) right) right) right) (__list__ Is) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) right) right) left) (__list__ Is) (__list__ None))) (Expr (Call (Attribute t remove) (__list__ 7))) (Expr STRING_22) (Assert (Compare (Attribute (Attribute t root) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) right) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) right) (__list__ Is) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute (Attribute t root) left) right) left) label) (__list__ Eq) (__list__ 4))) (Expr (Call (Attribute t remove) (__list__ 6))) (Expr STRING_23) (Assert (Compare (Attribute (Attribute (Attribute t root) left) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) right) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) label) (__list__ Eq) (__list__ 1))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) label) (__list__ Eq) (__list__ 4))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute (Attribute t root) left) right) right) label) (__list__ Eq) (__list__ 5))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) left) (__list__ Is) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left)))) (Expr (Call (Attribute t remove) (__list__ 3))) (Expr STRING_24) (Assert (Compare (Attribute t root) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) label) (__list__ Eq) (__list__ 4))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) label) (__list__ Eq) (__list__ 5))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) label) (__list__ Eq) (__list__ 1))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) parent) (__list__ Eq) (__list__ (Attribute t root)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left)))) (Expr (Call (Attribute t remove) (__list__ 4))) (Expr STRING_25) (Assert (Compare (Attribute (Attribute t root) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) label) (__list__ Eq) (__list__ 5))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) right) (__list__ Is) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) label) (__list__ Eq) (__list__ 1))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) parent) (__list__ Eq) (__list__ (Attribute t root)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left))))) (__list__ ) None) (FunctionDef test_remove_2 (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Expr (Call (Attribute t remove) (__list__ 3))) (Expr STRING_26) (Assert (Compare (Attribute t root) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute t root) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) right) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) left) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) right) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) label) (__list__ Eq) (__list__ 4))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) label) (__list__ Eq) (__list__ 6))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) label) (__list__ Eq) (__list__ 1))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute (Attribute t root) left) right) right) label) (__list__ Eq) (__list__ 7))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute (Attribute t root) left) right) left) label) (__list__ Eq) (__list__ 5))) (Assert (Compare (Attribute (Attribute (Attribute t root) left) parent) (__list__ Eq) (__list__ (Attribute t root)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) right) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute t root) left) left) parent) (__list__ Eq) (__list__ (Attribute (Attribute t root) left)))) (Assert (Compare (Attribute (Attribute (Attribute (Attribute (Attribute t root) left) right) left) parent) (__list__ Eq) (__list__ (Attribute (Attribute (Attribute t root) left) right))))) (__list__ ) None) (FunctionDef test_empty (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Expr (Call (Attribute t empty))) (Assert (Compare (Attribute t root) (__list__ Is) (__list__ None)))) (__list__ ) None) (FunctionDef test_is_empty (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Assert (UnaryOp Not (Call (Attribute t is_empty)))) (Expr (Call (Attribute t empty))) (Assert (Call (Attribute t is_empty)))) (__list__ ) None) (FunctionDef test_exists (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Assert (Call (Attribute t exists) (__list__ 6))) (Assert (UnaryOp Not (Call (Attribute t exists) (__list__ (UnaryOp USub 1)))))) (__list__ ) None) (FunctionDef test_get_max_label (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Assert (Compare (Call (Attribute t get_max_label)) (__list__ Eq) (__list__ 14))) (Expr (Call (Attribute t empty))) (With (__list__ (withitem (Call (Attribute pytest raises) (__list__ ValueError)))) (__list__ (Expr (Call (Attribute t get_max_label)))))) (__list__ ) None) (FunctionDef test_get_min_label (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Assert (Compare (Call (Attribute t get_min_label)) (__list__ Eq) (__list__ 1))) (Expr (Call (Attribute t empty))) (With (__list__ (withitem (Call (Attribute pytest raises) (__list__ ValueError)))) (__list__ (Expr (Call (Attribute t get_min_label)))))) (__list__ ) None) (FunctionDef test_inorder_traversal (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Assign (__list__ inorder_traversal_nodes) (ListComp (Attribute i label) (__list__ (comprehension i (Call (Attribute t inorder_traversal)) 0)))) (Assert (Compare inorder_traversal_nodes (__list__ Eq) (__list__ (List (__list__ 1 3 4 5 6 7 8 10 13 14)))))) (__list__ ) None) (FunctionDef test_preorder_traversal (arguments (__list__ (arg self))) (__list__ (Assign (__list__ t) (Call (Attribute self _get_binary_search_tree))) (Assign (__list__ preorder_traversal_nodes) (ListComp (Attribute i label) (__list__ (comprehension i (Call (Attribute t preorder_traversal)) 0)))) (Assert (Compare preorder_traversal_nodes (__list__ Eq) (__list__ (List (__list__ 8 3 1 6 4 5 7 10 14 13)))))) (__list__ ) None))) (FunctionDef binary_search_tree_example arguments (__list__ (Expr STRING_27) (Assign (__list__ t) (Call BinarySearchTree)) (Expr (Call (Attribute t put) (__list__ 8))) (Expr (Call (Attribute t put) (__list__ 3))) (Expr (Call (Attribute t put) (__list__ 6))) (Expr (Call (Attribute t put) (__list__ 1))) (Expr (Call (Attribute t put) (__list__ 10))) (Expr (Call (Attribute t put) (__list__ 14))) (Expr (Call (Attribute t put) (__list__ 13))) (Expr (Call (Attribute t put) (__list__ 4))) (Expr (Call (Attribute t put) (__list__ 7))) (Expr (Call (Attribute t put) (__list__ 5))) (Expr (Call print (__list__ STRING_28))) (Expr (Call print (__list__ STRING_29 (Call (Attribute t exists) (__list__ 6))))) (Expr (Call print (__list__ STRING_30 (Call (Attribute t exists) (__list__ 13))))) (Expr (Call print (__list__ STRING_31 (Call (Attribute t exists) (__list__ (UnaryOp USub 1)))))) (Expr (Call print (__list__ STRING_32 (Call (Attribute t exists) (__list__ 12))))) (Assign (__list__ inorder_traversal_nodes) (ListComp (Attribute i label) (__list__ (comprehension i (Call (Attribute t inorder_traversal)) 0)))) (Expr (Call print (__list__ STRING_33 inorder_traversal_nodes))) (Assign (__list__ preorder_traversal_nodes) (ListComp (Attribute i label) (__list__ (comprehension i (Call (Attribute t preorder_traversal)) 0)))) (Expr (Call print (__list__ STRING_34 preorder_traversal_nodes))) (Expr (Call print (__list__ STRING_35 (Call (Attribute t get_max_label))))) (Expr (Call print (__list__ STRING_36 (Call (Attribute t get_min_label))))) (Expr (Call print (__list__ STRING_37))) (Expr (Call print (__list__ STRING_38))) (Expr (Call (Attribute t remove) (__list__ 13))) (Expr (Call (Attribute t remove) (__list__ 10))) (Expr (Call (Attribute t remove) (__list__ 8))) (Expr (Call (Attribute t remove) (__list__ 3))) (Expr (Call (Attribute t remove) (__list__ 6))) (Expr (Call (Attribute t remove) (__list__ 14))) (Assign (__list__ inorder_traversal_nodes) (ListComp (Attribute i label) (__list__ (comprehension i (Call (Attribute t inorder_traversal)) 0)))) (Expr (Call print (__list__ STRING_39 inorder_traversal_nodes))) (Assign (__list__ preorder_traversal_nodes) (ListComp (Attribute i label) (__list__ (comprehension i (Call (Attribute t preorder_traversal)) 0)))) (Expr (Call print (__list__ STRING_40 preorder_traversal_nodes))) (Expr (Call print (__list__ STRING_35 (Call (Attribute t get_max_label))))) (Expr (Call print (__list__ STRING_36 (Call (Attribute t get_min_label)))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call binary_search_tree_example)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ClassDef Node (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg value int))) (__list__ (Assign (__list__ (Attribute self value)) value) (AnnAssign (Attribute self left) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp Node BitOr None) None 0)) (__list__ ) None))) (ClassDef BinaryTreeNodeSum (__list__ (Expr STRING_2) (FunctionDef __init__ (arguments (__list__ (arg self) (arg tree Node))) (__list__ (Assign (__list__ (Attribute self tree)) tree)) (__list__ ) None) (FunctionDef depth_first_search (arguments (__list__ (arg self) (arg node (BinOp Node BitOr None)))) (__list__ (If (Compare node (__list__ Is) (__list__ None)) (__list__ (Return 0))) (Return (BinOp (Attribute node value) Add (BinOp (Call (Attribute self depth_first_search) (__list__ (Attribute node left))) Add (Call (Attribute self depth_first_search) (__list__ (Attribute node right))))))) (__list__ ) int) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr (Yield (Call (Attribute self depth_first_search) (__list__ (Attribute self tree)))))) (__list__ ) (Subscript Iterator int)))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (Expr STRING_1) (FunctionDef binomial_coefficient (arguments (__list__ (arg n int) (arg k int))) (__list__ (Expr STRING_2) (Assign (__list__ result) 1) (If (Compare k (__list__ Gt) (__list__ (BinOp n Sub k))) (__list__ (Assign (__list__ k) (BinOp n Sub k)))) (For i (Call range (__list__ k)) (__list__ (AugAssign result Mult (BinOp n Sub i)) (AugAssign result FloorDiv (BinOp i Add 1)))) (Return result)) (__list__ ) int) (FunctionDef catalan_number (arguments (__list__ (arg node_count int))) (__list__ (Expr STRING_3) (Return (BinOp (Call binomial_coefficient (__list__ (BinOp 2 Mult node_count) node_count)) FloorDiv (BinOp node_count Add 1)))) (__list__ ) int) (FunctionDef factorial (arguments (__list__ (arg n int))) (__list__ (Expr STRING_4) (If (Compare n (__list__ Lt) (__list__ 0)) (__list__ (Raise (Call ValueError (__list__ STRING_5))))) (Assign (__list__ result) 1) (For i (Call range (__list__ 1 (BinOp n Add 1))) (__list__ (AugAssign result Mult i))) (Return result)) (__list__ ) int) (FunctionDef binary_tree_count (arguments (__list__ (arg node_count int))) (__list__ (Expr STRING_6) (Return (BinOp (Call catalan_number (__list__ node_count)) Mult (Call factorial (__list__ node_count))))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ node_count) (Call int (__list__ (BoolOp Or (__list__ (Call (Attribute (Call input (__list__ STRING_7)) strip)) 0))))) (If (Compare node_count (__list__ LtE) (__list__ 0)) (__list__ (Raise (Call ValueError (__list__ STRING_8))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_9 (FormattedValue node_count -1) STRING_10 (FormattedValue (Call binary_tree_count (__list__ node_count)) -1) STRING_11 (FormattedValue (Call catalan_number (__list__ node_count)) -1) STRING_12))))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign data float 1) (AnnAssign left (BinOp Node BitOr None) None 1) (AnnAssign right (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (If (Attribute self left) (__list__ (Expr (YieldFrom (Attribute self left))))) (Expr (Yield (Attribute self data))) (If (Attribute self right) (__list__ (Expr (YieldFrom (Attribute self right)))))) (__list__ ) (Subscript Iterator float)) (FunctionDef is_sorted (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (If (BoolOp And (__list__ (Attribute self left) (BoolOp Or (__list__ (Compare (Attribute self data) (__list__ Lt) (__list__ (Attribute (Attribute self left) data))) (UnaryOp Not (Attribute (Attribute self left) is_sorted)))))) (__list__ (Return False))) (If (BoolOp And (__list__ (Attribute self right) (BoolOp Or (__list__ (Compare (Attribute self data) (__list__ Gt) (__list__ (Attribute (Attribute self right) data))) (UnaryOp Not (Attribute (Attribute self right) is_sorted)))))) (__list__ (Return False))) (Return True)) (__list__ property) bool)) (__list__ dataclass)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Assign (__list__ tree) (Call Node (__list__ (keyword data 2.1) (keyword left (Call Node (__list__ (keyword data 2.0)))) (keyword right (Call Node (__list__ (keyword data 2.2))))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_3 (FormattedValue (Call list (__list__ tree)) -1) STRING_4 (FormattedValue (Attribute tree is_sorted) 114) STRING_12))))) (Assert (Attribute tree right)) (Assign (__list__ (Attribute (Attribute tree right) data)) 2.0) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_3 (FormattedValue (Call list (__list__ tree)) -1) STRING_4 (FormattedValue (Attribute tree is_sorted) 114) STRING_12))))) (Assign (__list__ (Attribute (Attribute tree right) data)) 2.1) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_3 (FormattedValue (Call list (__list__ tree)) -1) STRING_4 (FormattedValue (Attribute tree is_sorted) 114) STRING_12))))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterable) (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (Assign (__list__ test_data_odd) (Tuple (__list__ 3 9 (UnaryOp USub 11) 0 7 5 1 (UnaryOp USub 1)))) (Assign (__list__ test_data_even) (Tuple (__list__ 4 6 2 0 8 10 3 (UnaryOp USub 2)))) (ClassDef Node (__list__ (AnnAssign data int 1) (AnnAssign next_node (BinOp Node BitOr None) 1)) (__list__ dataclass)) (ClassDef SortedLinkedList (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg ints (Subscript Iterable int)))) (__list__ (AnnAssign (Attribute self head) (BinOp Node BitOr None) None 0) (For i (Call sorted (__list__ ints) (__list__ (keyword reverse True))) (__list__ (Assign (__list__ (Attribute self head)) (Call Node (__list__ i (Attribute self head))))))) (__list__ ) None) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next_node))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (Call (Attribute STRING_4 join) (__list__ (ListComp (Call str (__list__ node)) (__list__ (comprehension node self 0))))))) (__list__ ) str))) (FunctionDef merge_lists (arguments (__list__ (arg sll_one SortedLinkedList) (arg sll_two SortedLinkedList))) (__list__ (Expr STRING_5) (Return (Call SortedLinkedList (__list__ (BinOp (Call list (__list__ sll_one)) Add (Call list (__list__ sll_two))))))) (__list__ ) SortedLinkedList) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Assign (__list__ SSL) SortedLinkedList) (Expr (Call print (__list__ (Call merge_lists (__list__ (Call SSL (__list__ test_data_odd)) (Call SSL (__list__ test_data_even))))))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef ListNode (__list__ (AnnAssign val int 0 1) (AnnAssign next_node (BinOp ListNode BitOr None) None 1)) (__list__ dataclass)) (FunctionDef is_palindrome (arguments (__list__ (arg head (BinOp ListNode BitOr None)))) (__list__ (Expr STRING_0) (If (UnaryOp Not head) (__list__ (Return True))) (AnnAssign fast (BinOp ListNode BitOr None) (Attribute head next_node) 1) (AnnAssign slow (BinOp ListNode BitOr None) head 1) (While (BoolOp And (__list__ fast (Attribute fast next_node))) (__list__ (Assign (__list__ fast) (Attribute (Attribute fast next_node) next_node)) (Assign (__list__ slow) (IfExp slow (Attribute slow next_node) None)))) (If slow (__list__ (Assign (__list__ second) (Attribute slow next_node)) (Assign (__list__ (Attribute slow next_node)) None))) (AnnAssign node (BinOp ListNode BitOr None) None 1) (While second (__list__ (Assign (__list__ nxt) (Attribute second next_node)) (Assign (__list__ (Attribute second next_node)) node) (Assign (__list__ node) second) (Assign (__list__ second) nxt))) (While (BoolOp And (__list__ node head)) (__list__ (If (Compare (Attribute node val) (__list__ NotEq) (__list__ (Attribute head val))) (__list__ (Return False))) (Assign (__list__ node) (Attribute node next_node)) (Assign (__list__ head) (Attribute head next_node)))) (Return True)) (__list__ ) bool) (FunctionDef is_palindrome_stack (arguments (__list__ (arg head (BinOp ListNode BitOr None)))) (__list__ (Expr STRING_1) (If (BoolOp Or (__list__ (UnaryOp Not head) (UnaryOp Not (Attribute head next_node)))) (__list__ (Return True))) (AnnAssign slow (BinOp ListNode BitOr None) head 1) (AnnAssign fast (BinOp ListNode BitOr None) head 1) (While (BoolOp And (__list__ fast (Attribute fast next_node))) (__list__ (Assign (__list__ fast) (Attribute (Attribute fast next_node) next_node)) (Assign (__list__ slow) (IfExp slow (Attribute slow next_node) None)))) (If slow (__list__ (Assign (__list__ stack) (List (__list__ (Attribute slow val)))) (While (Attribute slow next_node) (__list__ (Assign (__list__ slow) (Attribute slow next_node)) (Expr (Call (Attribute stack append) (__list__ (Attribute slow val)))))) (AnnAssign cur (BinOp ListNode BitOr None) head 1) (While (BoolOp And (__list__ stack cur)) (__list__ (If (Compare (Call (Attribute stack pop)) (__list__ NotEq) (__list__ (Attribute cur val))) (__list__ (Return False))) (Assign (__list__ cur) (Attribute cur next_node)))))) (Return True)) (__list__ ) bool) (FunctionDef is_palindrome_dict (arguments (__list__ (arg head (BinOp ListNode BitOr None)))) (__list__ (Expr STRING_2) (If (BoolOp Or (__list__ (UnaryOp Not head) (UnaryOp Not (Attribute head next_node)))) (__list__ (Return True))) (AnnAssign d (Subscript dict (Tuple (__list__ int (Subscript list int)))) Dict 1) (Assign (__list__ pos) 0) (While head (__list__ (If (Compare (Attribute head val) (__list__ In) (__list__ d)) (__list__ (Expr (Call (Attribute (Subscript d (Attribute head val)) append) (__list__ pos)))) (__list__ (Assign (__list__ (Subscript d (Attribute head val))) (List (__list__ pos))))) (Assign (__list__ head) (Attribute head next_node)) (AugAssign pos Add 1))) (Assign (__list__ checksum) (BinOp pos Sub 1)) (Assign (__list__ middle) 0) (For v (Call (Attribute d values)) (__list__ (If (Compare (BinOp (Call len (__list__ v)) Mod 2) (__list__ NotEq) (__list__ 0)) (__list__ (AugAssign middle Add 1)) (__list__ (For (Tuple (__list__ step i)) (Call enumerate (__list__ (Call range (__list__ (Call len (__list__ v)))))) (__list__ (If (Compare (BinOp (Subscript v i) Add (Subscript v (BinOp (BinOp (Call len (__list__ v)) Sub 1) Sub step))) (__list__ NotEq) (__list__ checksum)) (__list__ (Return False))))))) (If (Compare middle (__list__ Gt) (__list__ 1)) (__list__ (Return False))))) (Return True)) (__list__ ) bool) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg item Any) (arg next Any))) (__list__ (Assign (__list__ (Attribute self item)) item) (Assign (__list__ (Attribute self next)) next)) (__list__ ) None))) (ClassDef LinkedList (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self head) (BinOp Node BitOr None) None 0) (Assign (__list__ (Attribute self size)) 0)) (__list__ ) None) (FunctionDef add (arguments (__list__ (arg self) (arg item Any) (arg position int)) (__list__ 0)) (__list__ (Expr STRING_1) (If (Compare position (__list__ Lt) (__list__ 0)) (__list__ (Raise (Call ValueError (__list__ STRING_2))))) (If (BoolOp Or (__list__ (Compare position (__list__ Eq) (__list__ 0)) (Compare (Attribute self head) (__list__ Is) (__list__ None)))) (__list__ (Assign (__list__ new_node) (Call Node (__list__ item (Attribute self head)))) (Assign (__list__ (Attribute self head)) new_node)) (__list__ (Assign (__list__ current) (Attribute self head)) (For _ (Call range (__list__ (BinOp position Sub 1))) (__list__ (Assign (__list__ current) (Attribute current next)) (If (Compare current (__list__ Is) (__list__ None)) (__list__ (Raise (Call ValueError (__list__ STRING_3))))))) (Assign (__list__ new_node) (Call Node (__list__ item (Attribute current next)))) (Assign (__list__ (Attribute current next)) new_node))) (AugAssign (Attribute self size) Add 1)) (__list__ ) None) (FunctionDef remove (arguments (__list__ (arg self))) (__list__ (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Return None)) (__list__ (Assign (__list__ item) (Attribute (Attribute self head) item)) (Assign (__list__ (Attribute self head)) (Attribute (Attribute self head) next)) (AugAssign (Attribute self size) Sub 1) (Return item)))) (__list__ ) Any) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Return (Compare (Attribute self head) (__list__ Is) (__list__ None)))) (__list__ ) bool) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (If (Call (Attribute self is_empty)) (__list__ (Return STRING_10)) (__list__ (Assign (__list__ iterate) (Attribute self head)) (Assign (__list__ item_str) STRING_10) (AnnAssign item_list (Subscript list str) List 1) (While iterate (__list__ (Expr (Call (Attribute item_list append) (__list__ (Call str (__list__ (Attribute iterate item)))))) (Assign (__list__ iterate) (Attribute iterate next)))) (Assign (__list__ item_str) (Call (Attribute STRING_5 join) (__list__ item_list))) (Return item_str)))) (__list__ ) str) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (Return (Attribute self size))) (__list__ ) int))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data int))) (__list__ (Assign (__list__ (Attribute self data)) data) (Assign (__list__ (Attribute self next)) None)) (__list__ ) None))) (ClassDef LinkedList (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self head)) None)) (__list__ )) (FunctionDef push (arguments (__list__ (arg self) (arg new_data int))) (__list__ (Assign (__list__ new_node) (Call Node (__list__ new_data))) (Assign (__list__ (Attribute new_node next)) (Attribute self head)) (Assign (__list__ (Attribute self head)) new_node) (Return (Attribute (Attribute self head) data))) (__list__ ) int) (FunctionDef middle_element (arguments (__list__ (arg self))) (__list__ (Expr STRING_0) (Assign (__list__ slow_pointer) (Attribute self head)) (Assign (__list__ fast_pointer) (Attribute self head)) (If (Attribute self head) (__list__ (While (BoolOp And (__list__ fast_pointer (Attribute fast_pointer next))) (__list__ (Assign (__list__ fast_pointer) (Attribute (Attribute fast_pointer next) next)) (Assign (__list__ slow_pointer) (Attribute slow_pointer next)))) (Return (Attribute slow_pointer data))) (__list__ (Expr (Call print (__list__ STRING_1))) (Return None)))) (__list__ ) (BinOp int BitOr None)))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ link) (Call LinkedList)) (For _ (Call range (__list__ (Call int (__list__ (Call (Attribute (Call input) strip)))))) (__list__ (Assign (__list__ data) (Call int (__list__ (Call (Attribute (Call input) strip))))) (Expr (Call (Attribute link push) (__list__ data))))) (Expr (Call print (__list__ (Call (Attribute link middle_element))))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign data int 1) (AnnAssign next_node (BinOp Node BitOr None) None 1)) (__list__ dataclass)) (FunctionDef print_linked_list (arguments (__list__ (arg head (BinOp Node BitOr None)))) (__list__ (Expr STRING_0) (If (Compare head (__list__ Is) (__list__ None)) (__list__ Return)) (While (Compare (Attribute head next_node) (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call print (__list__ (Attribute head data)) (__list__ (keyword end STRING_4)))) (Assign (__list__ head) (Attribute head next_node)))) (Expr (Call print (__list__ (Attribute head data))))) (__list__ ) None) (FunctionDef insert_node (arguments (__list__ (arg head (BinOp Node BitOr None)) (arg data int))) (__list__ (Expr STRING_1) (Assign (__list__ new_node) (Call Node (__list__ data))) (If (Compare head (__list__ Is) (__list__ None)) (__list__ (Return new_node))) (Assign (__list__ temp_node) head) (While (Attribute temp_node next_node) (__list__ (Assign (__list__ temp_node) (Attribute temp_node next_node)))) (Assign (__list__ (Attribute temp_node next_node)) new_node) (Return head)) (__list__ ) Node) (FunctionDef rotate_to_the_right (arguments (__list__ (arg head Node) (arg places int))) (__list__ (Expr STRING_2) (If (UnaryOp Not head) (__list__ (Raise (Call ValueError (__list__ STRING_3))))) (If (Compare (Attribute head next_node) (__list__ Is) (__list__ None)) (__list__ (Return head))) (Assign (__list__ length) 1) (Assign (__list__ temp_node) head) (While (Compare (Attribute temp_node next_node) (__list__ IsNot) (__list__ None)) (__list__ (AugAssign length Add 1) (Assign (__list__ temp_node) (Attribute temp_node next_node)))) (AugAssign places Mod length) (If (Compare places (__list__ Eq) (__list__ 0)) (__list__ (Return head))) (Assign (__list__ new_head_index) (BinOp length Sub places)) (Assign (__list__ temp_node) head) (For _ (Call range (__list__ (BinOp new_head_index Sub 1))) (__list__ (Assert (Attribute temp_node next_node)) (Assign (__list__ temp_node) (Attribute temp_node next_node)))) (Assert (Attribute temp_node next_node)) (Assign (__list__ new_head) (Attribute temp_node next_node)) (Assign (__list__ (Attribute temp_node next_node)) None) (Assign (__list__ temp_node) new_head) (While (Attribute temp_node next_node) (__list__ (Assign (__list__ temp_node) (Attribute temp_node next_node)))) (Assign (__list__ (Attribute temp_node next_node)) head) (Assert new_head) (Return new_head)) (__list__ ) Node) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Assign (__list__ head) (Call insert_node (__list__ None 5))) (Assign (__list__ head) (Call insert_node (__list__ head 1))) (Assign (__list__ head) (Call insert_node (__list__ head 2))) (Assign (__list__ head) (Call insert_node (__list__ head 4))) (Assign (__list__ head) (Call insert_node (__list__ head 3))) (Expr (Call print (__list__ STRING_4) (__list__ (keyword end STRING_10)))) (Expr (Call print_linked_list (__list__ head))) (Assign (__list__ places) 3) (Assign (__list__ new_head) (Call rotate_to_the_right (__list__ head places))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_5 (FormattedValue places -1) STRING_6))) (__list__ (keyword end STRING_10)))) (Expr (Call print_linked_list (__list__ new_head))))))",
    "(ProgramStatements (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data)) (__list__ None)) (__list__ (Assign (__list__ (Attribute self data)) data) (Assign (__list__ (Attribute self next)) None)) (__list__ )) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_0) (Assign (__list__ string_rep) STRING_10) (Assign (__list__ temp) self) (While temp (__list__ (AugAssign string_rep Add (JoinedStr (__list__ STRING_1 (FormattedValue (Attribute temp data) -1) STRING_2))) (Assign (__list__ temp) (Attribute temp next)))) (AugAssign string_rep Add STRING_3) (Return string_rep)) (__list__ )))) (FunctionDef make_linked_list (arguments (__list__ (arg elements_list))) (__list__ (Expr STRING_4) (If (UnaryOp Not elements_list) (__list__ (Raise (Call Exception (__list__ STRING_5))))) (Assign (__list__ head) (Call Node (__list__ (Subscript elements_list 0)))) (Assign (__list__ current) head) (For data (Subscript elements_list (Slice 1)) (__list__ (Assign (__list__ (Attribute current next)) (Call Node (__list__ data))) (Assign (__list__ current) (Attribute current next)))) (Return head)) (__list__ )) (Assign (__list__ list_data) (List (__list__ 1 3 5 32 44 12 43))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_6 (FormattedValue list_data -1)))))) (Expr (Call print (__list__ STRING_7))) (Assign (__list__ linked_list) (Call make_linked_list (__list__ list_data))) (Expr (Call print (__list__ STRING_8))) (Expr (Call print (__list__ linked_list))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom itertools (__list__ (alias pairwise)) 0) (ImportFrom random (__list__ (alias random)) 0) (ImportFrom typing (__list__ (alias Generic) (alias TypeVar)) 0) (Assign (__list__ KT) (Call TypeVar (__list__ STRING_1))) (Assign (__list__ VT) (Call TypeVar (__list__ STRING_2))) (ClassDef Node (__list__ (Subscript Generic (Tuple (__list__ KT VT)))) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg key (BinOp KT BitOr str)) (arg value (BinOp VT BitOr None))) (__list__ STRING_3 None)) (__list__ (Assign (__list__ (Attribute self key)) key) (Assign (__list__ (Attribute self value)) value) (AnnAssign (Attribute self forward) (Subscript list (Subscript Node (Tuple (__list__ KT VT)))) List 0)) (__list__ )) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Return (JoinedStr (__list__ STRING_5 (FormattedValue (Attribute self key) -1) STRING_2 (FormattedValue (Attribute self value) -1) STRING_3)))) (__list__ ) str) (FunctionDef level (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (Return (Call len (__list__ (Attribute self forward))))) (__list__ property) int))) (ClassDef SkipList (__list__ (Subscript Generic (Tuple (__list__ KT VT)))) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg p float) (arg max_level int)) (__list__ 0.5 16)) (__list__ (AnnAssign (Attribute self head) (Subscript Node (Tuple (__list__ KT VT))) (Call (Subscript Node (Tuple (__list__ KT VT)))) 0) (Assign (__list__ (Attribute self level)) 0) (Assign (__list__ (Attribute self p)) p) (Assign (__list__ (Attribute self max_level)) max_level)) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (Assign (__list__ items) (Call list (__list__ self))) (If (Compare (Call len (__list__ items)) (__list__ Eq) (__list__ 0)) (__list__ (Return (JoinedStr (__list__ STRING_8 (FormattedValue (Attribute self level) -1) STRING_3))))) (Assign (__list__ label_size) (Call max (__list__ (GeneratorExp (Call len (__list__ (Call str (__list__ item)))) (__list__ (comprehension item items 0)))) (__list__ (keyword default 4)))) (Assign (__list__ label_size) (BinOp (Call max (__list__ label_size 4)) Add 4)) (Assign (__list__ node) (Attribute self head)) (Assign (__list__ lines) List) (Assign (__list__ forwards) (Call (Attribute (Attribute node forward) copy))) (Expr (Call (Attribute lines append) (__list__ (BinOp (Call (Attribute (JoinedStr (__list__ STRING_1 (FormattedValue (Attribute node key) -1) STRING_3)) ljust) (__list__ label_size STRING_2)) Add (BinOp STRING_9 Mult (Call len (__list__ forwards))))))) (Expr (Call (Attribute lines append) (__list__ (BinOp (BinOp STRING_12 Mult label_size) Add (BinOp STRING_10 Mult (Call len (__list__ forwards))))))) (While (Compare (Call len (__list__ (Attribute node forward))) (__list__ NotEq) (__list__ 0)) (__list__ (Assign (__list__ node) (Subscript (Attribute node forward) 0)) (Expr (Call (Attribute lines append) (__list__ (BinOp (Call (Attribute (JoinedStr (__list__ STRING_1 (FormattedValue (Attribute node key) -1) STRING_3)) ljust) (__list__ label_size STRING_2)) Add (Call (Attribute STRING_12 join) (__list__ (GeneratorExp (IfExp (Compare (Attribute n key) (__list__ Eq) (__list__ (Attribute node key))) (Call str (__list__ (Attribute n key))) STRING_11) (__list__ (comprehension n forwards 0))))))))) (Expr (Call (Attribute lines append) (__list__ (BinOp (BinOp STRING_12 Mult label_size) Add (BinOp STRING_10 Mult (Call len (__list__ forwards))))))) (Assign (__list__ (Subscript forwards (Slice (Attribute node level)))) (Attribute node forward)))) (Expr (Call (Attribute lines append) (__list__ (BinOp (Call (Attribute STRING_5 ljust) (__list__ label_size)) Add (BinOp STRING_9 Mult (Call len (__list__ forwards))))))) (Return (BinOp (JoinedStr (__list__ STRING_8 (FormattedValue (Attribute self level) -1) STRING_12)) Add (Call (Attribute STRING_13 join) (__list__ lines))))) (__list__ ) str) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ node) (Attribute self head)) (While (Compare (Call len (__list__ (Attribute node forward))) (__list__ NotEq) (__list__ 0)) (__list__ (Expr (Yield (Attribute (Subscript (Attribute node forward) 0) key))) (Assign (__list__ node) (Subscript (Attribute node forward) 0))))) (__list__ )) (FunctionDef random_level (arguments (__list__ (arg self))) (__list__ (Expr STRING_13) (Assign (__list__ level) 1) (While (BoolOp And (__list__ (Compare (Call random) (__list__ Lt) (__list__ (Attribute self p))) (Compare level (__list__ Lt) (__list__ (Attribute self max_level))))) (__list__ (AugAssign level Add 1))) (Return level)) (__list__ ) int) (FunctionDef _locate_node (arguments (__list__ (arg self) (arg key))) (__list__ (Expr STRING_14) (Assign (__list__ update_vector) List) (Assign (__list__ node) (Attribute self head)) (For i (Call reversed (__list__ (Call range (__list__ (Attribute self level))))) (__list__ (While (BoolOp And (__list__ (Compare i (__list__ Lt) (__list__ (Attribute node level))) (Compare (Attribute (Subscript (Attribute node forward) i) key) (__list__ Lt) (__list__ key)))) (__list__ (Assign (__list__ node) (Subscript (Attribute node forward) i)))) (Expr (Call (Attribute update_vector append) (__list__ node))))) (Expr (Call (Attribute update_vector reverse))) (If (BoolOp And (__list__ (Compare (Call len (__list__ (Attribute node forward))) (__list__ NotEq) (__list__ 0)) (Compare (Attribute (Subscript (Attribute node forward) 0) key) (__list__ Eq) (__list__ key)))) (__list__ (Return (Tuple (__list__ (Subscript (Attribute node forward) 0) update_vector)))) (__list__ (Return (Tuple (__list__ None update_vector)))))) (__list__ ) (Subscript tuple (Tuple (__list__ (BinOp (Subscript Node (Tuple (__list__ KT VT))) BitOr None) (Subscript list (Subscript Node (Tuple (__list__ KT VT)))))))) (FunctionDef delete (arguments (__list__ (arg self) (arg key KT))) (__list__ (Expr STRING_15) (Assign (__list__ (Tuple (__list__ node update_vector))) (Call (Attribute self _locate_node) (__list__ key))) (If (Compare node (__list__ IsNot) (__list__ None)) (__list__ (For (Tuple (__list__ i update_node)) (Call enumerate (__list__ update_vector)) (__list__ (If (BoolOp And (__list__ (Compare (Attribute update_node level) (__list__ Gt) (__list__ i)) (Compare (Attribute (Subscript (Attribute update_node forward) i) key) (__list__ Eq) (__list__ key)))) (__list__ (If (Compare (Attribute node level) (__list__ Gt) (__list__ i)) (__list__ (Assign (__list__ (Subscript (Attribute update_node forward) i)) (Subscript (Attribute node forward) i))) (__list__ (Assign (__list__ (Attribute update_node forward)) (Subscript (Attribute update_node forward) (Slice i)))))))))))) (__list__ )) (FunctionDef insert (arguments (__list__ (arg self) (arg key KT) (arg value VT))) (__list__ (Expr STRING_16) (Assign (__list__ (Tuple (__list__ node update_vector))) (Call (Attribute self _locate_node) (__list__ key))) (If (Compare node (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ (Attribute node value)) value)) (__list__ (Assign (__list__ level) (Call (Attribute self random_level))) (If (Compare level (__list__ Gt) (__list__ (Attribute self level))) (__list__ (For _ (Call range (__list__ (BinOp (Attribute self level) Sub 1) level)) (__list__ (Expr (Call (Attribute update_vector append) (__list__ (Attribute self head)))))) (Assign (__list__ (Attribute self level)) level))) (Assign (__list__ new_node) (Call Node (__list__ key value))) (For (Tuple (__list__ i update_node)) (Call enumerate (__list__ (Subscript update_vector (Slice level)))) (__list__ (If (Compare (Attribute update_node level) (__list__ Gt) (__list__ i)) (__list__ (Expr (Call (Attribute (Attribute new_node forward) append) (__list__ (Subscript (Attribute update_node forward) i)))))) (If (Compare (Attribute update_node level) (__list__ Lt) (__list__ (BinOp i Add 1))) (__list__ (Expr (Call (Attribute (Attribute update_node forward) append) (__list__ new_node)))) (__list__ (Assign (__list__ (Subscript (Attribute update_node forward) i)) new_node)))))))) (__list__ )) (FunctionDef find (arguments (__list__ (arg self) (arg key VT))) (__list__ (Expr STRING_17) (Assign (__list__ (Tuple (__list__ node _))) (Call (Attribute self _locate_node) (__list__ key))) (If (Compare node (__list__ IsNot) (__list__ None)) (__list__ (Return (Attribute node value)))) (Return None)) (__list__ ) (BinOp VT BitOr None)))) (FunctionDef test_insert arguments (__list__ (Assign (__list__ skip_list) (Call SkipList)) (Expr (Call (Attribute skip_list insert) (__list__ STRING_18 3))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_19 12))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_20 41))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_21 (UnaryOp USub 19)))) (Assign (__list__ node) (Attribute skip_list head)) (Assign (__list__ all_values) Dict) (While (Compare (Attribute node level) (__list__ NotEq) (__list__ 0)) (__list__ (Assign (__list__ node) (Subscript (Attribute node forward) 0)) (Assign (__list__ (Subscript all_values (Attribute node key))) (Attribute node value)))) (Assert (Compare (Call len (__list__ all_values)) (__list__ Eq) (__list__ 4))) (Assert (Compare (Subscript all_values STRING_18) (__list__ Eq) (__list__ 3))) (Assert (Compare (Subscript all_values STRING_19) (__list__ Eq) (__list__ 12))) (Assert (Compare (Subscript all_values STRING_20) (__list__ Eq) (__list__ 41))) (Assert (Compare (Subscript all_values STRING_21) (__list__ Eq) (__list__ (UnaryOp USub 19))))) (__list__ )) (FunctionDef test_insert_overrides_existing_value arguments (__list__ (Assign (__list__ skip_list) (Call SkipList)) (Expr (Call (Attribute skip_list insert) (__list__ STRING_18 10))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_18 12))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_22 7))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_23 10))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_24 5))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_23 7))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_22 5))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_24 10))) (Assign (__list__ node) (Attribute skip_list head)) (Assign (__list__ all_values) Dict) (While (Compare (Attribute node level) (__list__ NotEq) (__list__ 0)) (__list__ (Assign (__list__ node) (Subscript (Attribute node forward) 0)) (Assign (__list__ (Subscript all_values (Attribute node key))) (Attribute node value)))) (If (Compare (Call len (__list__ all_values)) (__list__ NotEq) (__list__ 4)) (__list__ (Expr (Call print)))) (Assert (Compare (Call len (__list__ all_values)) (__list__ Eq) (__list__ 4))) (Assert (Compare (Subscript all_values STRING_18) (__list__ Eq) (__list__ 12))) (Assert (Compare (Subscript all_values STRING_23) (__list__ Eq) (__list__ 7))) (Assert (Compare (Subscript all_values STRING_22) (__list__ Eq) (__list__ 5))) (Assert (Compare (Subscript all_values STRING_24) (__list__ Eq) (__list__ 10)))) (__list__ )) (FunctionDef test_searching_empty_list_returns_none arguments (__list__ (Assign (__list__ skip_list) (Call SkipList)) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_25)) (__list__ Is) (__list__ None)))) (__list__ )) (FunctionDef test_search arguments (__list__ (Assign (__list__ skip_list) (Call SkipList)) (Expr (Call (Attribute skip_list insert) (__list__ STRING_19 20))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_19)) (__list__ Eq) (__list__ 20))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_26 10))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_19 8))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_27 13))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_28)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_19)) (__list__ Eq) (__list__ 8))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_26)) (__list__ Eq) (__list__ 10))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_27)) (__list__ Eq) (__list__ 13)))) (__list__ )) (FunctionDef test_deleting_item_from_empty_list_do_nothing arguments (__list__ (Assign (__list__ skip_list) (Call SkipList)) (Expr (Call (Attribute skip_list delete) (__list__ STRING_25))) (Assert (Compare (Call len (__list__ (Attribute (Attribute skip_list head) forward))) (__list__ Eq) (__list__ 0)))) (__list__ )) (FunctionDef test_deleted_items_are_not_founded_by_find_method arguments (__list__ (Assign (__list__ skip_list) (Call SkipList)) (Expr (Call (Attribute skip_list insert) (__list__ STRING_18 12))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_27 13))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_29 14))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_19 15))) (Expr (Call (Attribute skip_list delete) (__list__ STRING_27))) (Expr (Call (Attribute skip_list delete) (__list__ STRING_19))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_27)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_19)) (__list__ Is) (__list__ None)))) (__list__ )) (FunctionDef test_delete_removes_only_given_key arguments (__list__ (Assign (__list__ skip_list) (Call SkipList)) (Expr (Call (Attribute skip_list insert) (__list__ STRING_18 12))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_27 13))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_29 14))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_19 15))) (Expr (Call (Attribute skip_list delete) (__list__ STRING_27))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_27)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_29)) (__list__ Eq) (__list__ 14))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_18)) (__list__ Eq) (__list__ 12))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_19)) (__list__ Eq) (__list__ 15))) (Expr (Call (Attribute skip_list delete) (__list__ STRING_29))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_27)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_29)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_18)) (__list__ Eq) (__list__ 12))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_19)) (__list__ Eq) (__list__ 15))) (Expr (Call (Attribute skip_list delete) (__list__ STRING_18))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_27)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_29)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_18)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_19)) (__list__ Eq) (__list__ 15))) (Expr (Call (Attribute skip_list delete) (__list__ STRING_19))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_27)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_29)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_18)) (__list__ Is) (__list__ None))) (Assert (Compare (Call (Attribute skip_list find) (__list__ STRING_19)) (__list__ Is) (__list__ None)))) (__list__ )) (FunctionDef test_delete_doesnt_leave_dead_nodes arguments (__list__ (Assign (__list__ skip_list) (Call SkipList)) (Expr (Call (Attribute skip_list insert) (__list__ STRING_18 12))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_27 13))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_29 142))) (Expr (Call (Attribute skip_list insert) (__list__ STRING_19 15))) (Expr (Call (Attribute skip_list delete) (__list__ STRING_29))) (FunctionDef traverse_keys (arguments (__list__ (arg node))) (__list__ (Expr (Yield (Attribute node key))) (For forward_node (Attribute node forward) (__list__ (Expr (YieldFrom (Call traverse_keys (__list__ forward_node))))))) (__list__ )) (Assert (Compare (Call len (__list__ (Call set (__list__ (Call traverse_keys (__list__ (Attribute skip_list head))))))) (__list__ Eq) (__list__ 4)))) (__list__ )) (FunctionDef test_iter_always_yields_sorted_values arguments (__list__ (FunctionDef is_sorted (arguments (__list__ (arg lst))) (__list__ (Return (Call all (__list__ (GeneratorExp (Compare next_item (__list__ GtE) (__list__ item)) (__list__ (comprehension (Tuple (__list__ item next_item)) (Call pairwise (__list__ lst)) 0))))))) (__list__ )) (Assign (__list__ skip_list) (Call SkipList)) (For i (Call range (__list__ 10)) (__list__ (Expr (Call (Attribute skip_list insert) (__list__ i i))))) (Assert (Call is_sorted (__list__ (Call list (__list__ skip_list))))) (Expr (Call (Attribute skip_list delete) (__list__ 5))) (Expr (Call (Attribute skip_list delete) (__list__ 8))) (Expr (Call (Attribute skip_list delete) (__list__ 2))) (Assert (Call is_sorted (__list__ (Call list (__list__ skip_list))))) (Expr (Call (Attribute skip_list insert) (__list__ (UnaryOp USub 12) (UnaryOp USub 12)))) (Expr (Call (Attribute skip_list insert) (__list__ 77 77))) (Assert (Call is_sorted (__list__ (Call list (__list__ skip_list)))))) (__list__ )) (FunctionDef pytests arguments (__list__ (For _ (Call range (__list__ 100)) (__list__ (Expr (Call test_insert)) (Expr (Call test_insert_overrides_existing_value)) (Expr (Call test_searching_empty_list_returns_none)) (Expr (Call test_search)) (Expr (Call test_deleting_item_from_empty_list_do_nothing)) (Expr (Call test_deleted_items_are_not_founded_by_find_method)) (Expr (Call test_delete_removes_only_given_key)) (Expr (Call test_delete_doesnt_leave_dead_nodes)) (Expr (Call test_iter_always_yields_sorted_values))))) (__list__ )) (FunctionDef main arguments (__list__ (Expr STRING_42) (Assign (__list__ skip_list) (Call SkipList)) (Expr (Call (Attribute skip_list insert) (__list__ 2 STRING_10))) (Expr (Call (Attribute skip_list insert) (__list__ 4 STRING_15))) (Expr (Call (Attribute skip_list insert) (__list__ 6 STRING_15))) (Expr (Call (Attribute skip_list insert) (__list__ 4 STRING_30))) (Expr (Call (Attribute skip_list insert) (__list__ 8 STRING_15))) (Expr (Call (Attribute skip_list insert) (__list__ 9 STRING_15))) (Expr (Call (Attribute skip_list delete) (__list__ 4))) (Expr (Call print (__list__ skip_list)))) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Expr (Call main)))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef Node (__list__ (AnnAssign data Any 1) (AnnAssign next_node (BinOp Node BitOr None) None 1)) (__list__ dataclass)) (ClassDef CircularLinkedList (__list__ (AnnAssign head (BinOp Node BitOr None) None 1) (AnnAssign tail (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_0) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next_node)) (If (Compare node (__list__ Eq) (__list__ (Attribute self head))) (__list__ Break))))) (__list__ ) (Subscript Iterator Any)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ item)) (__list__ (comprehension item (Call iter (__list__ self)) 0))))))) (__list__ ) str) (FunctionDef insert_tail (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr STRING_3) (Expr (Call (Attribute self insert_nth) (__list__ (Call len (__list__ self)) data)))) (__list__ ) None) (FunctionDef insert_head (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr STRING_4) (Expr (Call (Attribute self insert_nth) (__list__ 0 data)))) (__list__ ) None) (FunctionDef insert_nth (arguments (__list__ (arg self) (arg index int) (arg data Any))) (__list__ (Expr STRING_5) (If (BoolOp Or (__list__ (Compare index (__list__ Lt) (__list__ 0)) (Compare index (__list__ Gt) (__list__ (Call len (__list__ self)))))) (__list__ (Raise (Call IndexError (__list__ STRING_6))))) (AnnAssign new_node Node (Call Node (__list__ data)) 1) (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute new_node next_node)) new_node) (Assign (__list__ (Attribute self tail) (Attribute self head)) new_node)) (__list__ (If (Compare index (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute new_node next_node)) (Attribute self head)) (Assert (Compare (Attribute self tail) (__list__ IsNot) (__list__ None))) (Assign (__list__ (Attribute self head) (Attribute (Attribute self tail) next_node)) new_node)) (__list__ (AnnAssign temp (BinOp Node BitOr None) (Attribute self head) 1) (For _ (Call range (__list__ (BinOp index Sub 1))) (__list__ (Assert (Compare temp (__list__ IsNot) (__list__ None))) (Assign (__list__ temp) (Attribute temp next_node)))) (Assert (Compare temp (__list__ IsNot) (__list__ None))) (Assign (__list__ (Attribute new_node next_node)) (Attribute temp next_node)) (Assign (__list__ (Attribute temp next_node)) new_node) (If (Compare index (__list__ Eq) (__list__ (BinOp (Call len (__list__ self)) Sub 1))) (__list__ (Assign (__list__ (Attribute self tail)) new_node)))))))) (__list__ ) None) (FunctionDef delete_front (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (Return (Call (Attribute self delete_nth) (__list__ 0)))) (__list__ ) Any) (FunctionDef delete_tail (arguments (__list__ (arg self))) (__list__ (Expr STRING_8) (Return (Call (Attribute self delete_nth) (__list__ (BinOp (Call len (__list__ self)) Sub 1))))) (__list__ ) Any) (FunctionDef delete_nth (arguments (__list__ (arg self) (arg index int)) (__list__ 0)) (__list__ (Expr STRING_9) (If (UnaryOp Not (Compare 0 (__list__ LtE Lt) (__list__ index (Call len (__list__ self))))) (__list__ (Raise (Call IndexError (__list__ STRING_6))))) (Assert (Compare (Attribute self head) (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute self tail) (__list__ IsNot) (__list__ None))) (AnnAssign delete_node Node (Attribute self head) 1) (If (Compare (Attribute self head) (__list__ Eq) (__list__ (Attribute self tail))) (__list__ (Assign (__list__ (Attribute self head) (Attribute self tail)) None)) (__list__ (If (Compare index (__list__ Eq) (__list__ 0)) (__list__ (Assert (Compare (Attribute (Attribute self tail) next_node) (__list__ IsNot) (__list__ None))) (Assign (__list__ (Attribute (Attribute self tail) next_node)) (Attribute (Attribute (Attribute self tail) next_node) next_node)) (Assign (__list__ (Attribute self head)) (Attribute (Attribute self head) next_node))) (__list__ (AnnAssign temp (BinOp Node BitOr None) (Attribute self head) 1) (For _ (Call range (__list__ (BinOp index Sub 1))) (__list__ (Assert (Compare temp (__list__ IsNot) (__list__ None))) (Assign (__list__ temp) (Attribute temp next_node)))) (Assert (Compare temp (__list__ IsNot) (__list__ None))) (Assert (Compare (Attribute temp next_node) (__list__ IsNot) (__list__ None))) (Assign (__list__ delete_node) (Attribute temp next_node)) (Assign (__list__ (Attribute temp next_node)) (Attribute (Attribute temp next_node) next_node)) (If (Compare index (__list__ Eq) (__list__ (BinOp (Call len (__list__ self)) Sub 1))) (__list__ (Assign (__list__ (Attribute self tail)) temp))))))) (Return (Attribute delete_node data))) (__list__ ) Any) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_10) (Return (Compare (Call len (__list__ self)) (__list__ Eq) (__list__ 0)))) (__list__ ) bool)) (__list__ dataclass)) (FunctionDef test_circular_linked_list arguments (__list__ (Expr STRING_11) (Assign (__list__ circular_linked_list) (Call CircularLinkedList)) (Assert (Compare (Call len (__list__ circular_linked_list)) (__list__ Eq) (__list__ 0))) (Assert (Compare (Call (Attribute circular_linked_list is_empty)) (__list__ Is) (__list__ True))) (Assert (Compare (Call str (__list__ circular_linked_list)) (__list__ Eq) (__list__ STRING_10))) (Try (__list__ (Expr (Call (Attribute circular_linked_list delete_front))) (Raise AssertionError)) (__list__ (ExceptHandler IndexError (__list__ (Assert True))))) (Try (__list__ (Expr (Call (Attribute circular_linked_list delete_tail))) (Raise AssertionError)) (__list__ (ExceptHandler IndexError (__list__ (Assert True))))) (Try (__list__ (Expr (Call (Attribute circular_linked_list delete_nth) (__list__ (UnaryOp USub 1)))) (Raise AssertionError)) (__list__ (ExceptHandler IndexError (__list__ (Assert True))))) (Try (__list__ (Expr (Call (Attribute circular_linked_list delete_nth) (__list__ 0))) (Raise AssertionError)) (__list__ (ExceptHandler IndexError (__list__ (Assert True))))) (Assert (Compare (Call (Attribute circular_linked_list is_empty)) (__list__ Is) (__list__ True))) (For i (Call range (__list__ 5)) (__list__ (Assert (Compare (Call len (__list__ circular_linked_list)) (__list__ Eq) (__list__ i))) (Expr (Call (Attribute circular_linked_list insert_nth) (__list__ i (BinOp i Add 1)))))) (Assert (Compare (Call str (__list__ circular_linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 1 6)) 0)))))))) (Expr (Call (Attribute circular_linked_list insert_tail) (__list__ 6))) (Assert (Compare (Call str (__list__ circular_linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 1 7)) 0)))))))) (Expr (Call (Attribute circular_linked_list insert_head) (__list__ 0))) (Assert (Compare (Call str (__list__ circular_linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 7)) 0)))))))) (Assert (Compare (Call (Attribute circular_linked_list delete_front)) (__list__ Eq) (__list__ 0))) (Assert (Compare (Call (Attribute circular_linked_list delete_tail)) (__list__ Eq) (__list__ 6))) (Assert (Compare (Call str (__list__ circular_linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 1 6)) 0)))))))) (Assert (Compare (Call (Attribute circular_linked_list delete_nth) (__list__ 2)) (__list__ Eq) (__list__ 3))) (Expr (Call (Attribute circular_linked_list insert_nth) (__list__ 2 3))) (Assert (Compare (Call str (__list__ circular_linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 1 6)) 0)))))))) (Assert (Compare (Call (Attribute circular_linked_list is_empty)) (__list__ Is) (__list__ False)))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef Node (__list__ (AnnAssign data Any 1) (AnnAssign next_node (BinOp Node BitOr None) None 1)) (__list__ dataclass)) (ClassDef LinkedList (__list__ (AnnAssign head (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_0) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next_node))))) (__list__ ) Iterator) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef push (arguments (__list__ (arg self) (arg new_data Any))) (__list__ (Expr STRING_2) (Assign (__list__ new_node) (Call Node (__list__ new_data))) (Assign (__list__ (Attribute new_node next_node)) (Attribute self head)) (Assign (__list__ (Attribute self head)) new_node)) (__list__ ) None) (FunctionDef swap_nodes (arguments (__list__ (arg self) (arg node_data_1 Any) (arg node_data_2 Any))) (__list__ (Expr STRING_3) (If (Compare node_data_1 (__list__ Eq) (__list__ node_data_2)) (__list__ Return)) (Assign (__list__ node_1) (Attribute self head)) (While (BoolOp And (__list__ node_1 (Compare (Attribute node_1 data) (__list__ NotEq) (__list__ node_data_1)))) (__list__ (Assign (__list__ node_1) (Attribute node_1 next_node)))) (Assign (__list__ node_2) (Attribute self head)) (While (BoolOp And (__list__ node_2 (Compare (Attribute node_2 data) (__list__ NotEq) (__list__ node_data_2)))) (__list__ (Assign (__list__ node_2) (Attribute node_2 next_node)))) (If (BoolOp Or (__list__ (Compare node_1 (__list__ Is) (__list__ None)) (Compare node_2 (__list__ Is) (__list__ None)))) (__list__ Return)) (Assign (__list__ (Tuple (__list__ (Attribute node_1 data) (Attribute node_2 data)))) (Tuple (__list__ (Attribute node_2 data) (Attribute node_1 data))))) (__list__ ) None)) (__list__ dataclass)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr STRING_4) (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Assign (__list__ linked_list) (Call LinkedList)) (For i (Call range (__list__ 5 0 (UnaryOp USub 1))) (__list__ (Expr (Call (Attribute linked_list push) (__list__ i))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_5 (FormattedValue (Call list (__list__ linked_list)) -1)))))) (Expr (Call (Attribute linked_list swap_nodes) (__list__ 1 4))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_6 (FormattedValue (Call list (__list__ linked_list)) -1)))))) (Expr (Call print (__list__ STRING_7))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterable) (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign data int 1) (AnnAssign next_node (BinOp Node BitOr None) None 1)) (__list__ dataclass)) (ClassDef LinkedList (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg ints (Subscript Iterable int)))) (__list__ (AnnAssign (Attribute self head) (BinOp Node BitOr None) None 0) (For i ints (__list__ (Expr (Call (Attribute self append) (__list__ i)))))) (__list__ ) None) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_0) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next_node))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call (Attribute STRING_4 join) (__list__ (ListComp (Call str (__list__ node)) (__list__ (comprehension node self 0))))))) (__list__ ) str) (FunctionDef append (arguments (__list__ (arg self) (arg data int))) (__list__ (Expr STRING_3) (If (UnaryOp Not (Attribute self head)) (__list__ (Assign (__list__ (Attribute self head)) (Call Node (__list__ data))) Return)) (Assign (__list__ node) (Attribute self head)) (While (Attribute node next_node) (__list__ (Assign (__list__ node) (Attribute node next_node)))) (Assign (__list__ (Attribute node next_node)) (Call Node (__list__ data)))) (__list__ ) None) (FunctionDef reverse_k_nodes (arguments (__list__ (arg self) (arg group_size int))) (__list__ (Expr STRING_4) (If (BoolOp Or (__list__ (Compare (Attribute self head) (__list__ Is) (__list__ None)) (Compare (Attribute (Attribute self head) next_node) (__list__ Is) (__list__ None)))) (__list__ Return)) (Assign (__list__ length) (Call len (__list__ self))) (Assign (__list__ dummy_head) (Call Node (__list__ 0))) (Assign (__list__ (Attribute dummy_head next_node)) (Attribute self head)) (Assign (__list__ previous_node) dummy_head) (While (Compare length (__list__ GtE) (__list__ group_size)) (__list__ (Assign (__list__ current_node) (Attribute previous_node next_node)) (Assert current_node) (Assign (__list__ next_node) (Attribute current_node next_node)) (For _ (Call range (__list__ 1 group_size)) (__list__ (Assert next_node current_node) (Assign (__list__ (Attribute current_node next_node)) (Attribute next_node next_node)) (Assert previous_node) (Assign (__list__ (Attribute next_node next_node)) (Attribute previous_node next_node)) (Assign (__list__ (Attribute previous_node next_node)) next_node) (Assign (__list__ next_node) (Attribute current_node next_node)))) (Assign (__list__ previous_node) current_node) (AugAssign length Sub group_size))) (Assign (__list__ (Attribute self head)) (Attribute dummy_head next_node))) (__list__ ) None))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Assign (__list__ ll) (Call LinkedList (__list__ (List (__list__ 1 2 3 4 5))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_5 (FormattedValue ll -1)))))) (Assign (__list__ k) 2) (Expr (Call (Attribute ll reverse_k_nodes) (__list__ k))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_5 (FormattedValue k -1) STRING_2 (FormattedValue ll -1)))))))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data int) (arg previous) (arg next_node)) (__list__ None None)) (__list__ (Assign (__list__ (Attribute self data)) data) (Assign (__list__ (Attribute self previous)) previous) (Assign (__list__ (Attribute self next)) next_node)) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (JoinedStr (__list__ (FormattedValue (Attribute self data) -1))))) (__list__ ) str) (FunctionDef get_data (arguments (__list__ (arg self))) (__list__ (Return (Attribute self data))) (__list__ ) int) (FunctionDef get_next (arguments (__list__ (arg self))) (__list__ (Return (Attribute self next))) (__list__ )) (FunctionDef get_previous (arguments (__list__ (arg self))) (__list__ (Return (Attribute self previous))) (__list__ )))) (ClassDef LinkedListIterator (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg head))) (__list__ (Assign (__list__ (Attribute self current)) head)) (__list__ )) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Return self)) (__list__ )) (FunctionDef __next__ (arguments (__list__ (arg self))) (__list__ (If (UnaryOp Not (Attribute self current)) (__list__ (Raise StopIteration)) (__list__ (Assign (__list__ value) (Call (Attribute (Attribute self current) get_data))) (Assign (__list__ (Attribute self current)) (Call (Attribute (Attribute self current) get_next))) (Return value)))) (__list__ )))) (ClassDef LinkedList (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self head)) None) (Assign (__list__ (Attribute self tail)) None)) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ current) (Attribute self head)) (Assign (__list__ nodes) List) (While (Compare current (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call (Attribute nodes append) (__list__ (Call (Attribute current get_data))))) (Assign (__list__ current) (Call (Attribute current get_next))))) (Return (Call (Attribute STRING_12 join) (__list__ (GeneratorExp (Call str (__list__ node)) (__list__ (comprehension node nodes 0))))))) (__list__ )) (FunctionDef __contains__ (arguments (__list__ (arg self) (arg value int))) (__list__ (Assign (__list__ current) (Attribute self head)) (While current (__list__ (If (Compare (Call (Attribute current get_data)) (__list__ Eq) (__list__ value)) (__list__ (Return True))) (Assign (__list__ current) (Call (Attribute current get_next))))) (Return False)) (__list__ )) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Return (Call LinkedListIterator (__list__ (Attribute self head))))) (__list__ )) (FunctionDef get_head_data (arguments (__list__ (arg self))) (__list__ (If (Attribute self head) (__list__ (Return (Call (Attribute (Attribute self head) get_data))))) (Return None)) (__list__ )) (FunctionDef get_tail_data (arguments (__list__ (arg self))) (__list__ (If (Attribute self tail) (__list__ (Return (Call (Attribute (Attribute self tail) get_data))))) (Return None)) (__list__ )) (FunctionDef set_head (arguments (__list__ (arg self) (arg node Node))) (__list__ (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self head)) node) (Assign (__list__ (Attribute self tail)) node)) (__list__ (Expr (Call (Attribute self insert_before_node) (__list__ (Attribute self head) node)))))) (__list__ ) None) (FunctionDef set_tail (arguments (__list__ (arg self) (arg node Node))) (__list__ (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Expr (Call (Attribute self set_head) (__list__ node)))) (__list__ (Expr (Call (Attribute self insert_after_node) (__list__ (Attribute self tail) node)))))) (__list__ ) None) (FunctionDef insert (arguments (__list__ (arg self) (arg value int))) (__list__ (Assign (__list__ node) (Call Node (__list__ value))) (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Expr (Call (Attribute self set_head) (__list__ node)))) (__list__ (Expr (Call (Attribute self set_tail) (__list__ node)))))) (__list__ ) None) (FunctionDef insert_before_node (arguments (__list__ (arg self) (arg node Node) (arg node_to_insert Node))) (__list__ (Assign (__list__ (Attribute node_to_insert next)) node) (Assign (__list__ (Attribute node_to_insert previous)) (Attribute node previous)) (If (Compare (Call (Attribute node get_previous)) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self head)) node_to_insert)) (__list__ (Assign (__list__ (Attribute (Attribute node previous) next)) node_to_insert))) (Assign (__list__ (Attribute node previous)) node_to_insert)) (__list__ ) None) (FunctionDef insert_after_node (arguments (__list__ (arg self) (arg node Node) (arg node_to_insert Node))) (__list__ (Assign (__list__ (Attribute node_to_insert previous)) node) (Assign (__list__ (Attribute node_to_insert next)) (Attribute node next)) (If (Compare (Call (Attribute node get_next)) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self tail)) node_to_insert)) (__list__ (Assign (__list__ (Attribute (Attribute node next) previous)) node_to_insert))) (Assign (__list__ (Attribute node next)) node_to_insert)) (__list__ ) None) (FunctionDef insert_at_position (arguments (__list__ (arg self) (arg position int) (arg value int))) (__list__ (Assign (__list__ current_position) 1) (Assign (__list__ new_node) (Call Node (__list__ value))) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (If (Compare current_position (__list__ Eq) (__list__ position)) (__list__ (Expr (Call (Attribute self insert_before_node) (__list__ node new_node))) Return)) (AugAssign current_position Add 1) (Assign (__list__ node) (Attribute node next)))) (Expr (Call (Attribute self insert_after_node) (__list__ (Attribute self tail) new_node)))) (__list__ ) None) (FunctionDef get_node (arguments (__list__ (arg self) (arg item int))) (__list__ (Assign (__list__ node) (Attribute self head)) (While node (__list__ (If (Compare (Call (Attribute node get_data)) (__list__ Eq) (__list__ item)) (__list__ (Return node))) (Assign (__list__ node) (Call (Attribute node get_next))))) (Raise (Call Exception (__list__ STRING_1)))) (__list__ ) Node) (FunctionDef delete_value (arguments (__list__ (arg self) (arg value))) (__list__ (If (Compare (NamedExpr node (Call (Attribute self get_node) (__list__ value))) (__list__ IsNot) (__list__ None)) (__list__ (If (Compare node (__list__ Eq) (__list__ (Attribute self head))) (__list__ (Assign (__list__ (Attribute self head)) (Call (Attribute (Attribute self head) get_next))))) (If (Compare node (__list__ Eq) (__list__ (Attribute self tail))) (__list__ (Assign (__list__ (Attribute self tail)) (Call (Attribute (Attribute self tail) get_previous))))) (Expr (Call (Attribute self remove_node_pointers) (__list__ node)))))) (__list__ )) (FunctionDef remove_node_pointers (arguments (__list__ (arg node Node))) (__list__ (If (Call (Attribute node get_next)) (__list__ (Assign (__list__ (Attribute (Attribute node next) previous)) (Attribute node previous)))) (If (Call (Attribute node get_previous)) (__list__ (Assign (__list__ (Attribute (Attribute node previous) next)) (Attribute node next)))) (Assign (__list__ (Attribute node next)) None) (Assign (__list__ (Attribute node previous)) None)) (__list__ staticmethod) None) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Return (Compare (Attribute self head) (__list__ Is) (__list__ None)))) (__list__ )))) (FunctionDef create_linked_list arguments (__list__ (Expr STRING_2)) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom typing (__list__ (alias Any) (alias Self)) 0) (ClassDef Node (__list__ (Expr STRING_1) (AnnAssign data Any 1) (AnnAssign next_node (BinOp Self BitOr None) None 1)) (__list__ dataclass)) (ClassDef LinkedList (__list__ (Expr STRING_2) (AnnAssign head (BinOp Node BitOr None) None 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Assign (__list__ visited) List) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (If (Compare node (__list__ In) (__list__ visited)) (__list__ Return)) (Expr (Call (Attribute visited append) (__list__ node))) (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next_node))))) (__list__ ) Iterator) (FunctionDef add_node (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr STRING_4) (Assign (__list__ new_node) (Call Node (__list__ data))) (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self head)) new_node) Return)) (Assign (__list__ current_node) (Attribute self head)) (While (Compare (Attribute current_node next_node) (__list__ IsNot) (__list__ None)) (__list__ (Assign (__list__ current_node) (Attribute current_node next_node)))) (Assign (__list__ (Attribute current_node next_node)) new_node)) (__list__ ) None) (FunctionDef detect_cycle (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Return False))) (AnnAssign slow_pointer (BinOp Node BitOr None) (Attribute self head) 1) (AnnAssign fast_pointer (BinOp Node BitOr None) (Attribute self head) 1) (While (BoolOp And (__list__ (Compare fast_pointer (__list__ IsNot) (__list__ None)) (Compare (Attribute fast_pointer next_node) (__list__ IsNot) (__list__ None)))) (__list__ (Assign (__list__ slow_pointer) (IfExp slow_pointer (Attribute slow_pointer next_node) None)) (Assign (__list__ fast_pointer) (Attribute (Attribute fast_pointer next_node) next_node)) (If (Compare slow_pointer (__list__ Eq) (__list__ fast_pointer)) (__list__ (Return True))))) (Return False)) (__list__ ) bool)) (__list__ dataclass)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Assign (__list__ linked_list) (Call LinkedList)) (Expr (Call (Attribute linked_list add_node) (__list__ 1))) (Expr (Call (Attribute linked_list add_node) (__list__ 2))) (Expr (Call (Attribute linked_list add_node) (__list__ 3))) (Expr (Call (Attribute linked_list add_node) (__list__ 4))) (If (BoolOp And (__list__ (Attribute linked_list head) (Attribute (Attribute linked_list head) next_node) (Attribute (Attribute (Attribute linked_list head) next_node) next_node))) (__list__ (Assign (__list__ (Attribute (Attribute (Attribute (Attribute linked_list head) next_node) next_node) next_node)) (Attribute (Attribute linked_list head) next_node)))) (Assign (__list__ has_cycle) (Call (Attribute linked_list detect_cycle))) (Expr (Call print (__list__ has_cycle))))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data))) (__list__ (Assign (__list__ (Attribute self data)) data) (Assign (__list__ (Attribute self previous)) None) (Assign (__list__ (Attribute self next)) None)) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (JoinedStr (__list__ (FormattedValue (Attribute self data) -1))))) (__list__ )))) (ClassDef DoublyLinkedList (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self head)) None) (Assign (__list__ (Attribute self tail)) None)) (__list__ )) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next))))) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call (Attribute STRING_4 join) (__list__ (ListComp (Call str (__list__ item)) (__list__ (comprehension item self 0))))))) (__list__ )) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ )) (FunctionDef insert_at_head (arguments (__list__ (arg self) (arg data))) (__list__ (Expr (Call (Attribute self insert_at_nth) (__list__ 0 data)))) (__list__ )) (FunctionDef insert_at_tail (arguments (__list__ (arg self) (arg data))) (__list__ (Expr (Call (Attribute self insert_at_nth) (__list__ (Call len (__list__ self)) data)))) (__list__ )) (FunctionDef insert_at_nth (arguments (__list__ (arg self) (arg index int) (arg data))) (__list__ (Expr STRING_4) (Assign (__list__ length) (Call len (__list__ self))) (If (UnaryOp Not (Compare 0 (__list__ LtE LtE) (__list__ index length))) (__list__ (Raise (Call IndexError (__list__ STRING_9))))) (Assign (__list__ new_node) (Call Node (__list__ data))) (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self head) (Attribute self tail)) new_node)) (__list__ (If (Compare index (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute (Attribute self head) previous)) new_node) (Assign (__list__ (Attribute new_node next)) (Attribute self head)) (Assign (__list__ (Attribute self head)) new_node)) (__list__ (If (Compare index (__list__ Eq) (__list__ length)) (__list__ (Assign (__list__ (Attribute (Attribute self tail) next)) new_node) (Assign (__list__ (Attribute new_node previous)) (Attribute self tail)) (Assign (__list__ (Attribute self tail)) new_node)) (__list__ (Assign (__list__ temp) (Attribute self head)) (For _ (Call range (__list__ index)) (__list__ (Assign (__list__ temp) (Attribute temp next)))) (Assign (__list__ (Attribute (Attribute temp previous) next)) new_node) (Assign (__list__ (Attribute new_node previous)) (Attribute temp previous)) (Assign (__list__ (Attribute new_node next)) temp) (Assign (__list__ (Attribute temp previous)) new_node)))))))) (__list__ )) (FunctionDef delete_head (arguments (__list__ (arg self))) (__list__ (Return (Call (Attribute self delete_at_nth) (__list__ 0)))) (__list__ )) (FunctionDef delete_tail (arguments (__list__ (arg self))) (__list__ (Return (Call (Attribute self delete_at_nth) (__list__ (BinOp (Call len (__list__ self)) Sub 1))))) (__list__ )) (FunctionDef delete_at_nth (arguments (__list__ (arg self) (arg index int))) (__list__ (Expr STRING_5) (Assign (__list__ length) (Call len (__list__ self))) (If (UnaryOp Not (Compare 0 (__list__ LtE LtE) (__list__ index (BinOp length Sub 1)))) (__list__ (Raise (Call IndexError (__list__ STRING_9))))) (Assign (__list__ delete_node) (Attribute self head)) (If (Compare length (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ (Attribute self head) (Attribute self tail)) None)) (__list__ (If (Compare index (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute self head)) (Attribute (Attribute self head) next)) (Assign (__list__ (Attribute (Attribute self head) previous)) None)) (__list__ (If (Compare index (__list__ Eq) (__list__ (BinOp length Sub 1))) (__list__ (Assign (__list__ delete_node) (Attribute self tail)) (Assign (__list__ (Attribute self tail)) (Attribute (Attribute self tail) previous)) (Assign (__list__ (Attribute (Attribute self tail) next)) None)) (__list__ (Assign (__list__ temp) (Attribute self head)) (For _ (Call range (__list__ index)) (__list__ (Assign (__list__ temp) (Attribute temp next)))) (Assign (__list__ delete_node) temp) (Assign (__list__ (Attribute (Attribute temp next) previous)) (Attribute temp previous)) (Assign (__list__ (Attribute (Attribute temp previous) next)) (Attribute temp next)))))))) (Return (Attribute delete_node data))) (__list__ )) (FunctionDef delete (arguments (__list__ (arg self) (arg data))) (__list__ (Assign (__list__ current) (Attribute self head)) (While (Compare (Attribute current data) (__list__ NotEq) (__list__ data)) (__list__ (If (Attribute current next) (__list__ (Assign (__list__ current) (Attribute current next))) (__list__ (Raise (Call ValueError (__list__ STRING_6))))))) (If (Compare current (__list__ Eq) (__list__ (Attribute self head))) (__list__ (Expr (Call (Attribute self delete_head)))) (__list__ (If (Compare current (__list__ Eq) (__list__ (Attribute self tail))) (__list__ (Expr (Call (Attribute self delete_tail)))) (__list__ (Assign (__list__ (Attribute (Attribute current previous) next)) (Attribute current next)) (Assign (__list__ (Attribute (Attribute current next) previous)) (Attribute current previous)))))) (Return data)) (__list__ ) str) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (Return (Compare (Call len (__list__ self)) (__list__ Eq) (__list__ 0)))) (__list__ )))) (FunctionDef test_doubly_linked_list arguments (__list__ (Expr STRING_8) (Assign (__list__ linked_list) (Call DoublyLinkedList)) (Assert (Compare (Call (Attribute linked_list is_empty)) (__list__ Is) (__list__ True))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_10))) (Try (__list__ (Expr (Call (Attribute linked_list delete_head))) (Raise AssertionError)) (__list__ (ExceptHandler IndexError (__list__ (Assert True))))) (Try (__list__ (Expr (Call (Attribute linked_list delete_tail))) (Raise AssertionError)) (__list__ (ExceptHandler IndexError (__list__ (Assert True))))) (For i (Call range (__list__ 10)) (__list__ (Assert (Compare (Call len (__list__ linked_list)) (__list__ Eq) (__list__ i))) (Expr (Call (Attribute linked_list insert_at_nth) (__list__ i (BinOp i Add 1)))))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 1 11)) 0)))))))) (Expr (Call (Attribute linked_list insert_at_head) (__list__ 0))) (Expr (Call (Attribute linked_list insert_at_tail) (__list__ 11))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 12)) 0)))))))) (Assert (Compare (Call (Attribute linked_list delete_head)) (__list__ Eq) (__list__ 0))) (Assert (Compare (Call (Attribute linked_list delete_at_nth) (__list__ 9)) (__list__ Eq) (__list__ 10))) (Assert (Compare (Call (Attribute linked_list delete_tail)) (__list__ Eq) (__list__ 11))) (Assert (Compare (Call len (__list__ linked_list)) (__list__ Eq) (__list__ 9))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 1 10)) 0))))))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterable) (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Node (__list__ (AnnAssign data int 1) (AnnAssign next_node (BinOp Node BitOr None) None 1)) (__list__ dataclass)) (ClassDef LinkedList (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (AnnAssign (Attribute self head) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self tail) (BinOp Node BitOr None) None 0)) (__list__ ) None) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next_node))))) (__list__ ) (Subscript Iterator int)) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (Call (Attribute STRING_4 join) (__list__ (ListComp (Call str (__list__ data)) (__list__ (comprehension data self 0))))))) (__list__ ) str) (FunctionDef append (arguments (__list__ (arg self) (arg data int))) (__list__ (Expr STRING_4) (If (Attribute self tail) (__list__ (Assign (__list__ (Attribute (Attribute self tail) next_node) (Attribute self tail)) (Call Node (__list__ data)))) (__list__ (Assign (__list__ (Attribute self head) (Attribute self tail)) (Call Node (__list__ data)))))) (__list__ ) None) (FunctionDef extend (arguments (__list__ (arg self) (arg items (Subscript Iterable int)))) (__list__ (Expr STRING_5) (For item items (__list__ (Expr (Call (Attribute self append) (__list__ item)))))) (__list__ ) None))) (FunctionDef make_linked_list (arguments (__list__ (arg elements_list (Subscript Iterable int)))) (__list__ (Expr STRING_6) (If (UnaryOp Not elements_list) (__list__ (Raise (Call Exception (__list__ STRING_5))))) (Assign (__list__ linked_list) (Call LinkedList)) (Expr (Call (Attribute linked_list extend) (__list__ elements_list))) (Return linked_list)) (__list__ ) LinkedList) (FunctionDef in_reverse (arguments (__list__ (arg linked_list LinkedList))) (__list__ (Expr STRING_7) (Return (Call (Attribute STRING_8 join) (__list__ (GeneratorExp (Call str (__list__ line)) (__list__ (comprehension line (Call reversed (__list__ (Call tuple (__list__ linked_list)))) 0))))))) (__list__ ) str) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Assign (__list__ linked_list) (Call make_linked_list (__list__ (Tuple (__list__ 14 52 14 12 43))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_9 (FormattedValue linked_list -1)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_10 (FormattedValue (Call in_reverse (__list__ linked_list)) -1)))))))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef _DoublyLinkedBase (__list__ (Expr STRING_1) (ClassDef _Node (__list__ (Assign (__list__ __slots__) (Tuple (__list__ STRING_2 STRING_3 STRING_4))) (FunctionDef __init__ (arguments (__list__ (arg self) (arg link_p) (arg element) (arg link_n))) (__list__ (Assign (__list__ (Attribute self _prev)) link_p) (Assign (__list__ (Attribute self _data)) element) (Assign (__list__ (Attribute self _next)) link_n)) (__list__ )) (FunctionDef has_next_and_prev (arguments (__list__ (arg self))) (__list__ (Return (JoinedStr (__list__ STRING_5 (FormattedValue (Compare (Attribute self _prev) (__list__ IsNot) (__list__ None)) -1) STRING_6 (FormattedValue (Compare (Attribute self _next) (__list__ IsNot) (__list__ None)) -1))))) (__list__ )))) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self _header)) (Call (Attribute self _Node) (__list__ None None None))) (Assign (__list__ (Attribute self _trailer)) (Call (Attribute self _Node) (__list__ None None None))) (Assign (__list__ (Attribute (Attribute self _header) _next)) (Attribute self _trailer)) (Assign (__list__ (Attribute (Attribute self _trailer) _prev)) (Attribute self _header)) (Assign (__list__ (Attribute self _size)) 0)) (__list__ )) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Return (Attribute self _size))) (__list__ )) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Return (Compare (Call (Attribute self __len__)) (__list__ Eq) (__list__ 0)))) (__list__ )) (FunctionDef _insert (arguments (__list__ (arg self) (arg predecessor) (arg e) (arg successor))) (__list__ (Assign (__list__ new_node) (Call (Attribute self _Node) (__list__ predecessor e successor))) (Assign (__list__ (Attribute predecessor _next)) new_node) (Assign (__list__ (Attribute successor _prev)) new_node) (AugAssign (Attribute self _size) Add 1) (Return self)) (__list__ )) (FunctionDef _delete (arguments (__list__ (arg self) (arg node))) (__list__ (Assign (__list__ predecessor) (Attribute node _prev)) (Assign (__list__ successor) (Attribute node _next)) (Assign (__list__ (Attribute predecessor _next)) successor) (Assign (__list__ (Attribute successor _prev)) predecessor) (AugAssign (Attribute self _size) Sub 1) (Assign (__list__ temp) (Attribute node _data)) (Assign (__list__ (Attribute node _prev) (Attribute node _next) (Attribute node _data)) None) (Delete (__list__ node)) (Return temp)) (__list__ )))) (ClassDef LinkedDeque (__list__ _DoublyLinkedBase) (__list__ (FunctionDef first (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (If (Call (Attribute self is_empty)) (__list__ (Raise (Call Exception (__list__ STRING_8))))) (Return (Attribute (Attribute (Attribute self _header) _next) _data))) (__list__ )) (FunctionDef last (arguments (__list__ (arg self))) (__list__ (Expr STRING_9) (If (Call (Attribute self is_empty)) (__list__ (Raise (Call Exception (__list__ STRING_8))))) (Return (Attribute (Attribute (Attribute self _trailer) _prev) _data))) (__list__ )) (FunctionDef add_first (arguments (__list__ (arg self) (arg element))) (__list__ (Expr STRING_10) (Return (Call (Attribute self _insert) (__list__ (Attribute self _header) element (Attribute (Attribute self _header) _next))))) (__list__ )) (FunctionDef add_last (arguments (__list__ (arg self) (arg element))) (__list__ (Expr STRING_11) (Return (Call (Attribute self _insert) (__list__ (Attribute (Attribute self _trailer) _prev) element (Attribute self _trailer))))) (__list__ )) (FunctionDef remove_first (arguments (__list__ (arg self))) (__list__ (Expr STRING_12) (If (Call (Attribute self is_empty)) (__list__ (Raise (Call IndexError (__list__ STRING_13))))) (Return (Call (Attribute self _delete) (__list__ (Attribute (Attribute self _header) _next))))) (__list__ )) (FunctionDef remove_last (arguments (__list__ (arg self))) (__list__ (Expr STRING_14) (If (Call (Attribute self is_empty)) (__list__ (Raise (Call IndexError (__list__ STRING_13))))) (Return (Call (Attribute self _delete) (__list__ (Attribute (Attribute self _trailer) _prev))))) (__list__ )))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef ContainsLoopError (__list__ Exception) (__list__ Pass)) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data Any))) (__list__ (AnnAssign (Attribute self data) Any data 0) (AnnAssign (Attribute self next_node) (BinOp Node BitOr None) None 0)) (__list__ ) None) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ node) self) (Assign (__list__ visited) List) (While node (__list__ (If (Compare node (__list__ In) (__list__ visited)) (__list__ (Raise ContainsLoopError))) (Expr (Call (Attribute visited append) (__list__ node))) (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next_node))))) (__list__ )) (FunctionDef has_loop (arguments (__list__ (arg self))) (__list__ (Expr STRING_0) (Try (__list__ (Expr (Call list (__list__ self))) (Return False)) (__list__ (ExceptHandler ContainsLoopError (__list__ (Return True)))))) (__list__ property) bool))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Assign (__list__ root_node) (Call Node (__list__ 1))) (Assign (__list__ (Attribute root_node next_node)) (Call Node (__list__ 2))) (Assign (__list__ (Attribute (Attribute root_node next_node) next_node)) (Call Node (__list__ 3))) (Assign (__list__ (Attribute (Attribute (Attribute root_node next_node) next_node) next_node)) (Call Node (__list__ 4))) (Expr (Call print (__list__ (Attribute root_node has_loop)))) (Assign (__list__ (Attribute (Attribute (Attribute root_node next_node) next_node) next_node)) (Attribute root_node next_node)) (Expr (Call print (__list__ (Attribute root_node has_loop)))) (Assign (__list__ root_node) (Call Node (__list__ 5))) (Assign (__list__ (Attribute root_node next_node)) (Call Node (__list__ 6))) (Assign (__list__ (Attribute (Attribute root_node next_node) next_node)) (Call Node (__list__ 5))) (Assign (__list__ (Attribute (Attribute (Attribute root_node next_node) next_node) next_node)) (Call Node (__list__ 6))) (Expr (Call print (__list__ (Attribute root_node has_loop)))) (Assign (__list__ root_node) (Call Node (__list__ 1))) (Expr (Call print (__list__ (Attribute root_node has_loop)))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef Node (__list__ (Expr STRING_0) (AnnAssign data Any 1) (AnnAssign next_node (BinOp Node BitOr None) None 1) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (JoinedStr (__list__ STRING_5 (FormattedValue (Attribute self data) -1) STRING_3)))) (__list__ ) str)) (__list__ dataclass)) (ClassDef LinkedList (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Assign (__list__ (Attribute self head)) None)) (__list__ )) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Assign (__list__ node) (Attribute self head)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next_node))))) (__list__ ) (Subscript Iterator Any)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Return (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension _ self 0))))))) (__list__ ) int) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (Return (Call (Attribute STRING_4 join) (__list__ (ListComp (Call str (__list__ item)) (__list__ (comprehension item self 0))))))) (__list__ ) str) (FunctionDef __getitem__ (arguments (__list__ (arg self) (arg index int))) (__list__ (Expr STRING_6) (If (UnaryOp Not (Compare 0 (__list__ LtE Lt) (__list__ index (Call len (__list__ self))))) (__list__ (Raise (Call ValueError (__list__ STRING_6))))) (For (Tuple (__list__ i node)) (Call enumerate (__list__ self)) (__list__ (If (Compare i (__list__ Eq) (__list__ index)) (__list__ (Return node))))) (Return None)) (__list__ ) Any) (FunctionDef __setitem__ (arguments (__list__ (arg self) (arg index int) (arg data Any))) (__list__ (Expr STRING_7) (If (UnaryOp Not (Compare 0 (__list__ LtE Lt) (__list__ index (Call len (__list__ self))))) (__list__ (Raise (Call ValueError (__list__ STRING_6))))) (Assign (__list__ current) (Attribute self head)) (For _ (Call range (__list__ index)) (__list__ (Assign (__list__ current) (Attribute current next_node)))) (Assign (__list__ (Attribute current data)) data)) (__list__ ) None) (FunctionDef insert_tail (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr STRING_8) (Expr (Call (Attribute self insert_nth) (__list__ (Call len (__list__ self)) data)))) (__list__ ) None) (FunctionDef insert_head (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr STRING_9) (Expr (Call (Attribute self insert_nth) (__list__ 0 data)))) (__list__ ) None) (FunctionDef insert_nth (arguments (__list__ (arg self) (arg index int) (arg data Any))) (__list__ (Expr STRING_10) (If (UnaryOp Not (Compare 0 (__list__ LtE LtE) (__list__ index (Call len (__list__ self))))) (__list__ (Raise (Call IndexError (__list__ STRING_9))))) (Assign (__list__ new_node) (Call Node (__list__ data))) (If (Compare (Attribute self head) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self head)) new_node)) (__list__ (If (Compare index (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute new_node next_node)) (Attribute self head)) (Assign (__list__ (Attribute self head)) new_node)) (__list__ (Assign (__list__ temp) (Attribute self head)) (For _ (Call range (__list__ (BinOp index Sub 1))) (__list__ (Assign (__list__ temp) (Attribute temp next_node)))) (Assign (__list__ (Attribute new_node next_node)) (Attribute temp next_node)) (Assign (__list__ (Attribute temp next_node)) new_node)))))) (__list__ ) None) (FunctionDef print_list (arguments (__list__ (arg self))) (__list__ (Expr STRING_11) (Expr (Call print (__list__ self)))) (__list__ ) None) (FunctionDef delete_head (arguments (__list__ (arg self))) (__list__ (Expr STRING_12) (Return (Call (Attribute self delete_nth) (__list__ 0)))) (__list__ ) Any) (FunctionDef delete_tail (arguments (__list__ (arg self))) (__list__ (Expr STRING_13) (Return (Call (Attribute self delete_nth) (__list__ (BinOp (Call len (__list__ self)) Sub 1))))) (__list__ ) Any) (FunctionDef delete_nth (arguments (__list__ (arg self) (arg index int)) (__list__ 0)) (__list__ (Expr STRING_14) (If (UnaryOp Not (Compare 0 (__list__ LtE LtE) (__list__ index (BinOp (Call len (__list__ self)) Sub 1)))) (__list__ (Raise (Call IndexError (__list__ STRING_15))))) (Assign (__list__ delete_node) (Attribute self head)) (If (Compare index (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute self head)) (Attribute (Attribute self head) next_node))) (__list__ (Assign (__list__ temp) (Attribute self head)) (For _ (Call range (__list__ (BinOp index Sub 1))) (__list__ (Assign (__list__ temp) (Attribute temp next_node)))) (Assign (__list__ delete_node) (Attribute temp next_node)) (Assign (__list__ (Attribute temp next_node)) (Attribute (Attribute temp next_node) next_node)))) (Return (Attribute delete_node data))) (__list__ ) Any) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_16) (Return (Compare (Attribute self head) (__list__ Is) (__list__ None)))) (__list__ ) bool) (FunctionDef reverse (arguments (__list__ (arg self))) (__list__ (Expr STRING_17) (Assign (__list__ prev) None) (Assign (__list__ current) (Attribute self head)) (While current (__list__ (Assign (__list__ next_node) (Attribute current next_node)) (Assign (__list__ (Attribute current next_node)) prev) (Assign (__list__ prev) current) (Assign (__list__ current) next_node))) (Assign (__list__ (Attribute self head)) prev)) (__list__ ) None))) (FunctionDef test_singly_linked_list arguments (__list__ (Expr STRING_18) (Assign (__list__ linked_list) (Call LinkedList)) (Assert (Compare (Call (Attribute linked_list is_empty)) (__list__ Is) (__list__ True))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_10))) (Try (__list__ (Expr (Call (Attribute linked_list delete_head))) (Raise AssertionError)) (__list__ (ExceptHandler IndexError (__list__ (Assert True))))) (Try (__list__ (Expr (Call (Attribute linked_list delete_tail))) (Raise AssertionError)) (__list__ (ExceptHandler IndexError (__list__ (Assert True))))) (For i (Call range (__list__ 10)) (__list__ (Assert (Compare (Call len (__list__ linked_list)) (__list__ Eq) (__list__ i))) (Expr (Call (Attribute linked_list insert_nth) (__list__ i (BinOp i Add 1)))))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 1 11)) 0)))))))) (Expr (Call (Attribute linked_list insert_head) (__list__ 0))) (Expr (Call (Attribute linked_list insert_tail) (__list__ 11))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 12)) 0)))))))) (Assert (Compare (Call (Attribute linked_list delete_head)) (__list__ Eq) (__list__ 0))) (Assert (Compare (Call (Attribute linked_list delete_nth) (__list__ 9)) (__list__ Eq) (__list__ 10))) (Assert (Compare (Call (Attribute linked_list delete_tail)) (__list__ Eq) (__list__ 11))) (Assert (Compare (Call len (__list__ linked_list)) (__list__ Eq) (__list__ 9))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ 1 10)) 0)))))))) (Assert (Compare (Call all (__list__ (GeneratorExp (Compare (Subscript linked_list i) (__list__ Eq) (__list__ (BinOp i Add 1))) (__list__ (comprehension i (Call range (__list__ 9)) 0))))) (__list__ Is) (__list__ True))) (For i (Call range (__list__ 9)) (__list__ (Assign (__list__ (Subscript linked_list i)) (UnaryOp USub i)))) (Assert (Compare (Call all (__list__ (GeneratorExp (Compare (Subscript linked_list i) (__list__ Eq) (__list__ (UnaryOp USub i))) (__list__ (comprehension i (Call range (__list__ 9)) 0))))) (__list__ Is) (__list__ True))) (Expr (Call (Attribute linked_list reverse))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ (Call (Attribute STRING_4 join) (__list__ (GeneratorExp (Call str (__list__ i)) (__list__ (comprehension i (Call range (__list__ (UnaryOp USub 8) 1)) 0))))))))) (__list__ ) None) (FunctionDef test_singly_linked_list_2 arguments (__list__ (Expr STRING_19) (Assign (__list__ test_input) (List (__list__ (UnaryOp USub 9) 100 (Call Node (__list__ 77345112)) STRING_20 7 5555 0 (UnaryOp USub 192.55555) STRING_21 77.9 (Call Node (__list__ 10)) None None 12.2))) (Assign (__list__ linked_list) (Call LinkedList)) (For i test_input (__list__ (Expr (Call (Attribute linked_list insert_tail) (__list__ i))))) (Assert (Compare (Call (Attribute linked_list is_empty)) (__list__ Is) (__list__ False))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_22))) (Assign (__list__ result) (Call (Attribute linked_list delete_head))) (Assert (Compare result (__list__ Eq) (__list__ (UnaryOp USub 9)))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_23))) (Assign (__list__ result) (Call (Attribute linked_list delete_tail))) (Assert (Compare result (__list__ Eq) (__list__ 12.2))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_24))) (Assign (__list__ result) (Call (Attribute linked_list delete_nth) (__list__ 10))) (Assert (Compare result (__list__ Is) (__list__ None))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_25))) (Expr (Call (Attribute linked_list insert_head) (__list__ (Call Node (__list__ STRING_26))))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_27))) (Expr (Call (Attribute linked_list insert_tail) (__list__ None))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_28))) (Expr (Call (Attribute linked_list reverse))) (Assert (Compare (Call str (__list__ linked_list)) (__list__ Eq) (__list__ STRING_29)))) (__list__ ) None) (FunctionDef main arguments (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Assign (__list__ linked_list) (Call LinkedList)) (Expr (Call (Attribute linked_list insert_head) (__list__ (Call (Attribute (Call input (__list__ STRING_30)) strip))))) (Expr (Call (Attribute linked_list insert_head) (__list__ (Call (Attribute (Call input (__list__ STRING_31)) strip))))) (Expr (Call print (__list__ STRING_32))) (Expr (Call (Attribute linked_list print_list))) (Expr (Call (Attribute linked_list insert_tail) (__list__ (Call (Attribute (Call input (__list__ STRING_33)) strip))))) (Expr (Call (Attribute linked_list insert_tail) (__list__ (Call (Attribute (Call input (__list__ STRING_34)) strip))))) (Expr (Call print (__list__ STRING_32))) (Expr (Call (Attribute linked_list print_list))) (Expr (Call print (__list__ STRING_35))) (Expr (Call (Attribute linked_list delete_head))) (Expr (Call print (__list__ STRING_36))) (Expr (Call (Attribute linked_list delete_tail))) (Expr (Call print (__list__ STRING_32))) (Expr (Call (Attribute linked_list print_list))) (Expr (Call print (__list__ STRING_37))) (Expr (Call (Attribute linked_list reverse))) (Expr (Call print (__list__ STRING_32))) (Expr (Call (Attribute linked_list print_list))) (Expr (Call print (__list__ STRING_38))) (Expr (Call print (__list__ linked_list))) (Expr (Call print (__list__ STRING_39))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_40 (FormattedValue (Subscript linked_list 1) -1)))))) (Assign (__list__ (Subscript linked_list 1)) (Call (Attribute (Call input (__list__ STRING_41)) strip))) (Expr (Call print (__list__ STRING_42))) (Expr (Call print (__list__ linked_list))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_43 (FormattedValue (Call len (__list__ linked_list)) -1))))))) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call main)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom hashlib (__list__ (alias md5) (alias sha256)) 0) (Assign (__list__ HASH_FUNCTIONS) (Tuple (__list__ sha256 md5))) (ClassDef Bloom (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg size int)) (__list__ 8)) (__list__ (Assign (__list__ (Attribute self bitarray)) 0) (Assign (__list__ (Attribute self size)) size)) (__list__ ) None) (FunctionDef add (arguments (__list__ (arg self) (arg value str))) (__list__ (Assign (__list__ h) (Call (Attribute self hash_) (__list__ value))) (AugAssign (Attribute self bitarray) BitOr h)) (__list__ ) None) (FunctionDef exists (arguments (__list__ (arg self) (arg value str))) (__list__ (Assign (__list__ h) (Call (Attribute self hash_) (__list__ value))) (Return (Compare (BinOp h BitAnd (Attribute self bitarray)) (__list__ Eq) (__list__ h)))) (__list__ ) bool) (FunctionDef __contains__ (arguments (__list__ (arg self) (arg other str))) (__list__ (Return (Call (Attribute self exists) (__list__ other)))) (__list__ ) bool) (FunctionDef format_bin (arguments (__list__ (arg self) (arg bitarray int))) (__list__ (Assign (__list__ res) (Subscript (Call bin (__list__ bitarray)) (Slice 2))) (Return (Call (Attribute res zfill) (__list__ (Attribute self size))))) (__list__ ) str) (FunctionDef bitstring (arguments (__list__ (arg self))) (__list__ (Return (Call (Attribute self format_bin) (__list__ (Attribute self bitarray))))) (__list__ property) str) (FunctionDef hash_ (arguments (__list__ (arg self) (arg value str))) (__list__ (Assign (__list__ res) 0) (For func HASH_FUNCTIONS (__list__ (Assign (__list__ position) (BinOp (Call (Attribute int from_bytes) (__list__ (Call (Attribute (Call func (__list__ (Call (Attribute value encode)))) digest)) STRING_1)) Mod (Attribute self size))) (AugAssign res BitOr (BinOp 2 Pow position)))) (Return res)) (__list__ ) int) (FunctionDef format_hash (arguments (__list__ (arg self) (arg value str))) (__list__ (Return (Call (Attribute self format_bin) (__list__ (Call (Attribute self hash_) (__list__ value)))))) (__list__ ) str) (FunctionDef estimated_error_rate (arguments (__list__ (arg self))) (__list__ (Assign (__list__ n_ones) (Call (Attribute (Call bin (__list__ (Attribute self bitarray))) count) (__list__ STRING_7))) (Return (BinOp (BinOp n_ones Div (Attribute self size)) Pow (Call len (__list__ HASH_FUNCTIONS))))) (__list__ property) float))))",
    "(ProgramStatements (ImportFrom number_theory.prime_numbers (__list__ (alias next_prime)) 1) (ClassDef HashTable (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg size_table int) (arg charge_factor (BinOp int BitOr None)) (arg lim_charge (BinOp float BitOr None))) (__list__ None None)) (__list__ (Assign (__list__ (Attribute self size_table)) size_table) (Assign (__list__ (Attribute self values)) (BinOp (List (__list__ None)) Mult (Attribute self size_table))) (Assign (__list__ (Attribute self lim_charge)) (IfExp (Compare lim_charge (__list__ Is) (__list__ None)) 0.75 lim_charge)) (Assign (__list__ (Attribute self charge_factor)) (IfExp (Compare charge_factor (__list__ Is) (__list__ None)) 1 charge_factor)) (AnnAssign (Attribute self __aux_list) list List 0) (AnnAssign (Attribute self _keys) dict Dict 0)) (__list__ ) None) (FunctionDef keys (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (Attribute self _keys))) (__list__ )) (FunctionDef balanced_factor (arguments (__list__ (arg self))) (__list__ (Return (BinOp (Call sum (__list__ (GeneratorExp 1 (__list__ (comprehension slot (Attribute self values) (__list__ (Compare slot (__list__ IsNot) (__list__ None))) 0))))) Div (BinOp (Attribute self size_table) Mult (Attribute self charge_factor))))) (__list__ )) (FunctionDef hash_function (arguments (__list__ (arg self) (arg key))) (__list__ (Expr STRING_2) (Return (BinOp key Mod (Attribute self size_table)))) (__list__ )) (FunctionDef _step_by_step (arguments (__list__ (arg self) (arg step_ord))) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ STRING_3 (FormattedValue step_ord -1)))))) (Expr (Call print (__list__ (Call list (__list__ (Call range (__list__ (Call len (__list__ (Attribute self values)))))))))) (Expr (Call print (__list__ (Attribute self values))))) (__list__ )) (FunctionDef bulk_insert (arguments (__list__ (arg self) (arg values))) (__list__ (Expr STRING_4) (Assign (__list__ i) 1) (Assign (__list__ (Attribute self __aux_list)) values) (For value values (__list__ (Expr (Call (Attribute self insert_data) (__list__ value))) (Expr (Call (Attribute self _step_by_step) (__list__ i))) (AugAssign i Add 1)))) (__list__ )) (FunctionDef _set_value (arguments (__list__ (arg self) (arg key) (arg data))) (__list__ (Expr STRING_5) (Assign (__list__ (Subscript (Attribute self values) key)) data) (Assign (__list__ (Subscript (Attribute self _keys) key)) data)) (__list__ )) (FunctionDef _collision_resolution (arguments (__list__ (arg self) (arg key) (arg data)) (__list__ None)) (__list__ (Expr STRING_6) (Assign (__list__ new_key) (Call (Attribute self hash_function) (__list__ (BinOp key Add 1)))) (While (BoolOp And (__list__ (Compare (Subscript (Attribute self values) new_key) (__list__ IsNot) (__list__ None)) (Compare (Subscript (Attribute self values) new_key) (__list__ NotEq) (__list__ key)))) (__list__ (If (Compare (Call (Attribute (Attribute self values) count) (__list__ None)) (__list__ Gt) (__list__ 0)) (__list__ (Assign (__list__ new_key) (Call (Attribute self hash_function) (__list__ (BinOp new_key Add 1))))) (__list__ (Assign (__list__ new_key) None) Break)))) (Return new_key)) (__list__ )) (FunctionDef rehashing (arguments (__list__ (arg self))) (__list__ (Assign (__list__ survivor_values) (ListComp value (__list__ (comprehension value (Attribute self values) (__list__ (Compare value (__list__ IsNot) (__list__ None))) 0)))) (Assign (__list__ (Attribute self size_table)) (Call next_prime (__list__ (Attribute self size_table)) (__list__ (keyword factor 2)))) (Expr (Call (Attribute (Attribute self _keys) clear))) (Assign (__list__ (Attribute self values)) (BinOp (List (__list__ None)) Mult (Attribute self size_table))) (For value survivor_values (__list__ (Expr (Call (Attribute self insert_data) (__list__ value)))))) (__list__ )) (FunctionDef insert_data (arguments (__list__ (arg self) (arg data))) (__list__ (Expr STRING_7) (Assign (__list__ key) (Call (Attribute self hash_function) (__list__ data))) (If (Compare (Subscript (Attribute self values) key) (__list__ Is) (__list__ None)) (__list__ (Expr (Call (Attribute self _set_value) (__list__ key data)))) (__list__ (If (Compare (Subscript (Attribute self values) key) (__list__ Eq) (__list__ data)) (__list__ Pass) (__list__ (Assign (__list__ collision_resolution) (Call (Attribute self _collision_resolution) (__list__ key data))) (If (Compare collision_resolution (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call (Attribute self _set_value) (__list__ collision_resolution data)))) (__list__ (Expr (Call (Attribute self rehashing))) (Expr (Call (Attribute self insert_data) (__list__ data)))))))))) (__list__ )))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom hash_table (__list__ (alias HashTable)) 1) (ImportFrom number_theory.prime_numbers (__list__ (alias is_prime) (alias next_prime)) 1) (ClassDef DoubleHash (__list__ HashTable) (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self)) (arg args) (arg kwargs)) (__list__ (Expr (Call (Attribute (Call super) __init__) (__list__ (Starred args)) (__list__ (keyword kwargs))))) (__list__ )) (FunctionDef __hash_function_2 (arguments (__list__ (arg self) (arg value) (arg data))) (__list__ (Assign (__list__ next_prime_gt) (IfExp (UnaryOp Not (Call is_prime (__list__ (BinOp value Mod (Attribute self size_table))))) (Call next_prime (__list__ (BinOp value Mod (Attribute self size_table)))) (BinOp value Mod (Attribute self size_table)))) (Return (BinOp next_prime_gt Sub (BinOp data Mod next_prime_gt)))) (__list__ )) (FunctionDef __hash_double_function (arguments (__list__ (arg self) (arg key) (arg data) (arg increment))) (__list__ (Return (BinOp (BinOp increment Mult (Call (Attribute self __hash_function_2) (__list__ key data))) Mod (Attribute self size_table)))) (__list__ )) (FunctionDef _collision_resolution (arguments (__list__ (arg self) (arg key) (arg data)) (__list__ None)) (__list__ (Expr STRING_2) (Assign (__list__ i) 1) (Assign (__list__ new_key) (Call (Attribute self hash_function) (__list__ data))) (While (BoolOp And (__list__ (Compare (Subscript (Attribute self values) new_key) (__list__ IsNot) (__list__ None)) (Compare (Subscript (Attribute self values) new_key) (__list__ NotEq) (__list__ key)))) (__list__ (Assign (__list__ new_key) (IfExp (Compare (Call (Attribute self balanced_factor)) (__list__ GtE) (__list__ (Attribute self lim_charge))) (Call (Attribute self __hash_double_function) (__list__ key data i)) None)) (If (Compare new_key (__list__ Is) (__list__ None)) (__list__ Break) (__list__ (AugAssign i Add 1))))) (Return new_key)) (__list__ )))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ImportFrom collections (__list__ (alias deque)) 0) (ImportFrom hash_table (__list__ (alias HashTable)) 1) (ClassDef HashTableWithLinkedList (__list__ HashTable) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self)) (arg args) (arg kwargs)) (__list__ (Expr (Call (Attribute (Call super) __init__) (__list__ (Starred args)) (__list__ (keyword kwargs))))) (__list__ )) (FunctionDef _set_value (arguments (__list__ (arg self) (arg key) (arg data))) (__list__ (Assign (__list__ (Subscript (Attribute self values) key)) (IfExp (Compare (Subscript (Attribute self values) key) (__list__ Is) (__list__ None)) (Call deque (__list__ List)) (Subscript (Attribute self values) key))) (Expr (Call (Attribute (Subscript (Attribute self values) key) appendleft) (__list__ data))) (Assign (__list__ (Subscript (Attribute self _keys) key)) (Subscript (Attribute self values) key))) (__list__ )) (FunctionDef balanced_factor (arguments (__list__ (arg self))) (__list__ (Return (BinOp (BinOp (Call sum (__list__ (GeneratorExp (BinOp (Attribute self charge_factor) Sub (Call len (__list__ slot))) (__list__ (comprehension slot (Attribute self values) 0))))) Div (Attribute self size_table)) Mult (Attribute self charge_factor)))) (__list__ )) (FunctionDef _collision_resolution (arguments (__list__ (arg self) (arg key) (arg data)) (__list__ None)) (__list__ (If (UnaryOp Not (BoolOp And (__list__ (Compare (Call len (__list__ (Subscript (Attribute self values) key))) (__list__ Eq) (__list__ (Attribute self charge_factor))) (Compare (Call (Attribute (Attribute self values) count) (__list__ None)) (__list__ Eq) (__list__ 0))))) (__list__ (Return key))) (Return (Call (Attribute (Call super) _collision_resolution) (__list__ key data)))) (__list__ )))))",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (ImportFrom collections.abc (__list__ (alias Iterator) (alias MutableMapping)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom typing (__list__ (alias Generic) (alias TypeVar)) 0) (Assign (__list__ KEY) (Call TypeVar (__list__ STRING_1))) (Assign (__list__ VAL) (Call TypeVar (__list__ STRING_2))) (ClassDef _Item (__list__ (Subscript Generic (Tuple (__list__ KEY VAL)))) (__list__ (AnnAssign key KEY 1) (AnnAssign val VAL 1)) (__list__ (Call dataclass (__list__ (keyword frozen True) (keyword slots True))))) (ClassDef _DeletedItem (__list__ _Item) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Expr (Call (Attribute (Call super) __init__) (__list__ None None)))) (__list__ ) None) (FunctionDef __bool__ (arguments (__list__ (arg self))) (__list__ (Return False)) (__list__ ) bool))) (Assign (__list__ _deleted) (Call _DeletedItem)) (ClassDef HashMap (__list__ (Subscript MutableMapping (Tuple (__list__ KEY VAL)))) (__list__ (Expr STRING_3) (FunctionDef __init__ (arguments (__list__ (arg self) (arg initial_block_size int) (arg capacity_factor float)) (__list__ 8 0.75)) (__list__ (Assign (__list__ (Attribute self _initial_block_size)) initial_block_size) (AnnAssign (Attribute self _buckets) (Subscript list (BinOp _Item BitOr None)) (BinOp (List (__list__ None)) Mult initial_block_size) 0) (Assert (Compare 0.0 (__list__ Lt Lt) (__list__ capacity_factor 1.0))) (Assign (__list__ (Attribute self _capacity_factor)) capacity_factor) (Assign (__list__ (Attribute self _len)) 0)) (__list__ ) None) (FunctionDef _get_bucket_index (arguments (__list__ (arg self) (arg key KEY))) (__list__ (Return (BinOp (Call hash (__list__ key)) Mod (Call len (__list__ (Attribute self _buckets)))))) (__list__ ) int) (FunctionDef _get_next_ind (arguments (__list__ (arg self) (arg ind int))) (__list__ (Expr STRING_4) (Return (BinOp (BinOp ind Add 1) Mod (Call len (__list__ (Attribute self _buckets)))))) (__list__ ) int) (FunctionDef _try_set (arguments (__list__ (arg self) (arg ind int) (arg key KEY) (arg val VAL))) (__list__ (Expr STRING_5) (Assign (__list__ stored) (Subscript (Attribute self _buckets) ind)) (If (UnaryOp Not stored) (__list__ (Assign (__list__ (Subscript (Attribute self _buckets) ind)) (Call _Item (__list__ key val))) (AugAssign (Attribute self _len) Add 1) (Return True)) (__list__ (If (Compare (Attribute stored key) (__list__ Eq) (__list__ key)) (__list__ (Assign (__list__ (Subscript (Attribute self _buckets) ind)) (Call _Item (__list__ key val))) (Return True)) (__list__ (Return False)))))) (__list__ ) bool) (FunctionDef _is_full (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (Assign (__list__ limit) (BinOp (Call len (__list__ (Attribute self _buckets))) Mult (Attribute self _capacity_factor))) (Return (Compare (Call len (__list__ self)) (__list__ GtE) (__list__ (Call int (__list__ limit)))))) (__list__ ) bool) (FunctionDef _is_sparse (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (If (Compare (Call len (__list__ (Attribute self _buckets))) (__list__ LtE) (__list__ (Attribute self _initial_block_size))) (__list__ (Return False))) (Assign (__list__ limit) (BinOp (BinOp (Call len (__list__ (Attribute self _buckets))) Mult (Attribute self _capacity_factor)) Div 2)) (Return (Compare (Call len (__list__ self)) (__list__ Lt) (__list__ limit)))) (__list__ ) bool) (FunctionDef _resize (arguments (__list__ (arg self) (arg new_size int))) (__list__ (Assign (__list__ old_buckets) (Attribute self _buckets)) (Assign (__list__ (Attribute self _buckets)) (BinOp (List (__list__ None)) Mult new_size)) (Assign (__list__ (Attribute self _len)) 0) (For item old_buckets (__list__ (If item (__list__ (Expr (Call (Attribute self _add_item) (__list__ (Attribute item key) (Attribute item val))))))))) (__list__ ) None) (FunctionDef _size_up (arguments (__list__ (arg self))) (__list__ (Expr (Call (Attribute self _resize) (__list__ (BinOp (Call len (__list__ (Attribute self _buckets))) Mult 2))))) (__list__ ) None) (FunctionDef _size_down (arguments (__list__ (arg self))) (__list__ (Expr (Call (Attribute self _resize) (__list__ (BinOp (Call len (__list__ (Attribute self _buckets))) FloorDiv 2))))) (__list__ ) None) (FunctionDef _iterate_buckets (arguments (__list__ (arg self) (arg key KEY))) (__list__ (Assign (__list__ ind) (Call (Attribute self _get_bucket_index) (__list__ key))) (For _ (Call range (__list__ (Call len (__list__ (Attribute self _buckets))))) (__list__ (Expr (Yield ind)) (Assign (__list__ ind) (Call (Attribute self _get_next_ind) (__list__ ind)))))) (__list__ ) (Subscript Iterator int)) (FunctionDef _add_item (arguments (__list__ (arg self) (arg key KEY) (arg val VAL))) (__list__ (Expr STRING_8) (For ind (Call (Attribute self _iterate_buckets) (__list__ key)) (__list__ (If (Call (Attribute self _try_set) (__list__ ind key val)) (__list__ Break))))) (__list__ ) None) (FunctionDef __setitem__ (arguments (__list__ (arg self) (arg key KEY) (arg val VAL))) (__list__ (Expr STRING_9) (If (Call (Attribute self _is_full)) (__list__ (Expr (Call (Attribute self _size_up))))) (Expr (Call (Attribute self _add_item) (__list__ key val)))) (__list__ ) None) (FunctionDef __delitem__ (arguments (__list__ (arg self) (arg key KEY))) (__list__ (Expr STRING_10) (For ind (Call (Attribute self _iterate_buckets) (__list__ key)) (__list__ (Assign (__list__ item) (Subscript (Attribute self _buckets) ind)) (If (Compare item (__list__ Is) (__list__ None)) (__list__ (Raise (Call KeyError (__list__ key))))) (If (Compare item (__list__ Is) (__list__ _deleted)) (__list__ Continue)) (If (Compare (Attribute item key) (__list__ Eq) (__list__ key)) (__list__ (Assign (__list__ (Subscript (Attribute self _buckets) ind)) _deleted) (AugAssign (Attribute self _len) Sub 1) Break)))) (If (Call (Attribute self _is_sparse)) (__list__ (Expr (Call (Attribute self _size_down)))))) (__list__ ) None) (FunctionDef __getitem__ (arguments (__list__ (arg self) (arg key KEY))) (__list__ (Expr STRING_11) (For ind (Call (Attribute self _iterate_buckets) (__list__ key)) (__list__ (Assign (__list__ item) (Subscript (Attribute self _buckets) ind)) (If (Compare item (__list__ Is) (__list__ None)) (__list__ Break)) (If (Compare item (__list__ Is) (__list__ _deleted)) (__list__ Continue)) (If (Compare (Attribute item key) (__list__ Eq) (__list__ key)) (__list__ (Return (Attribute item val)))))) (Raise (Call KeyError (__list__ key)))) (__list__ ) VAL) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_12) (Return (Attribute self _len))) (__list__ ) int) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr (YieldFrom (GeneratorExp (Attribute item key) (__list__ (comprehension item (Attribute self _buckets) (__list__ item) 0)))))) (__list__ ) (Subscript Iterator KEY)) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ val_string) (Call (Attribute STRING_13 join) (__list__ (GeneratorExp (JoinedStr (__list__ (FormattedValue (Attribute item key) -1) STRING_2 (FormattedValue (Attribute item val) -1))) (__list__ (comprehension item (Attribute self _buckets) (__list__ item) 0)))))) (Return (JoinedStr (__list__ STRING_14 (FormattedValue val_string -1) STRING_3)))) (__list__ ) str))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ImportFrom hash_table (__list__ (alias HashTable)) 1) (ClassDef QuadraticProbing (__list__ HashTable) (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self)) (arg args) (arg kwargs)) (__list__ (Expr (Call (Attribute (Call super) __init__) (__list__ (Starred args)) (__list__ (keyword kwargs))))) (__list__ )) (FunctionDef _collision_resolution (arguments (__list__ (arg self) (arg key) (arg data)) (__list__ None)) (__list__ (Expr STRING_1) (Assign (__list__ i) 1) (Assign (__list__ new_key) (Call (Attribute self hash_function) (__list__ (BinOp key Add (BinOp i Mult i))))) (While (BoolOp And (__list__ (Compare (Subscript (Attribute self values) new_key) (__list__ IsNot) (__list__ None)) (Compare (Subscript (Attribute self values) new_key) (__list__ NotEq) (__list__ key)))) (__list__ (AugAssign i Add 1) (Assign (__list__ new_key) (IfExp (UnaryOp Not (Compare (Call (Attribute self balanced_factor)) (__list__ GtE) (__list__ (Attribute self lim_charge)))) (Call (Attribute self hash_function) (__list__ (BinOp key Add (BinOp i Mult i)))) None)) (If (Compare new_key (__list__ Is) (__list__ None)) (__list__ Break)))) (Return new_key)) (__list__ )))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias math))) (FunctionDef is_prime (arguments (__list__ (arg number int))) (__list__ (Expr STRING_1) (Assert (BoolOp And (__list__ (Call isinstance (__list__ number int)) (Compare number (__list__ GtE) (__list__ 0)))) STRING_2) (If (Compare 1 (__list__ Lt Lt) (__list__ number 4)) (__list__ (Return True)) (__list__ (If (BoolOp Or (__list__ (Compare number (__list__ Lt) (__list__ 2)) (UnaryOp Not (BinOp number Mod 2)))) (__list__ (Return False))))) (Assign (__list__ odd_numbers) (Call range (__list__ 3 (Call int (__list__ (BinOp (Call (Attribute math sqrt) (__list__ number)) Add 1))) 2))) (Return (UnaryOp Not (Call any (__list__ (GeneratorExp (UnaryOp Not (BinOp number Mod i)) (__list__ (comprehension i odd_numbers 0)))))))) (__list__ ) bool) (FunctionDef next_prime (arguments (__list__ (arg value) (arg factor)) (arg kwargs) (__list__ 1)) (__list__ (Assign (__list__ value) (BinOp factor Mult value)) (Assign (__list__ first_value_val) value) (While (UnaryOp Not (Call is_prime (__list__ value))) (__list__ (AugAssign value Add (IfExp (UnaryOp Not (BoolOp And (__list__ (Compare STRING_3 (__list__ In) (__list__ kwargs)) (Compare (Subscript kwargs STRING_3) (__list__ Is) (__list__ True))))) 1 (UnaryOp USub 1))))) (If (Compare value (__list__ Eq) (__list__ first_value_val)) (__list__ (Return (Call next_prime (__list__ (BinOp value Add 1)) (__list__ (keyword kwargs)))))) (Return value)) (__list__ )))",
    "(ProgramStatements )",
    "(ProgramStatements (ImportFrom operator (__list__ (alias delitem) (alias getitem) (alias setitem)) 0) (Import (__list__ (alias pytest))) (ImportFrom data_structures.hashing.hash_map (__list__ (alias HashMap)) 0) (FunctionDef _get (arguments (__list__ (arg k))) (__list__ (Return (Tuple (__list__ getitem k)))) (__list__ )) (FunctionDef _set (arguments (__list__ (arg k) (arg v))) (__list__ (Return (Tuple (__list__ setitem k v)))) (__list__ )) (FunctionDef _del (arguments (__list__ (arg k))) (__list__ (Return (Tuple (__list__ delitem k)))) (__list__ )) (FunctionDef _run_operation (arguments (__list__ (arg obj) (arg fun)) (arg args)) (__list__ (Try (__list__ (Return (Tuple (__list__ (Call fun (__list__ obj (Starred args))) None)))) (__list__ (ExceptHandler Exception e (__list__ (Return (Tuple (__list__ None e)))))))) (__list__ )) (Assign (__list__ _add_items) (Tuple (__list__ (Call _set (__list__ STRING_0 STRING_1)) (Call _set (__list__ STRING_2 STRING_3))))) (Assign (__list__ _overwrite_items) (List (__list__ (Call _set (__list__ STRING_0 STRING_1)) (Call _set (__list__ STRING_0 STRING_3))))) (Assign (__list__ _delete_items) (List (__list__ (Call _set (__list__ STRING_0 STRING_1)) (Call _set (__list__ STRING_2 STRING_3)) (Call _del (__list__ STRING_0)) (Call _del (__list__ STRING_2)) (Call _set (__list__ STRING_0 STRING_1)) (Call _del (__list__ STRING_0))))) (Assign (__list__ _access_absent_items) (List (__list__ (Call _get (__list__ STRING_0)) (Call _del (__list__ STRING_0)) (Call _set (__list__ STRING_0 STRING_1)) (Call _del (__list__ STRING_0)) (Call _del (__list__ STRING_0)) (Call _get (__list__ STRING_0))))) (Assign (__list__ _add_with_resize_up) (List (__list__ (Starred (ListComp (Call _set (__list__ x x)) (__list__ (comprehension x (Call range (__list__ 5)) 0))))))) (Assign (__list__ _add_with_resize_down) (List (__list__ (Starred (ListComp (Call _set (__list__ x x)) (__list__ (comprehension x (Call range (__list__ 5)) 0)))) (Starred (ListComp (Call _del (__list__ x)) (__list__ (comprehension x (Call range (__list__ 5)) 0)))) (Call _set (__list__ STRING_0 STRING_3))))) (FunctionDef test_hash_map_is_the_same_as_dict (arguments (__list__ (arg operations))) (__list__ (Assign (__list__ my) (Call HashMap (__list__ (keyword initial_block_size 4)))) (Assign (__list__ py) Dict) (For (Tuple (__list__ _ (Tuple (__list__ fun (Starred args))))) (Call enumerate (__list__ operations)) (__list__ (Assign (__list__ (Tuple (__list__ my_res my_exc))) (Call _run_operation (__list__ my fun (Starred args)))) (Assign (__list__ (Tuple (__list__ py_res py_exc))) (Call _run_operation (__list__ py fun (Starred args)))) (Assert (Compare my_res (__list__ Eq) (__list__ py_res))) (Assert (Compare (Call str (__list__ my_exc)) (__list__ Eq) (__list__ (Call str (__list__ py_exc))))) (Assert (Compare (Call set (__list__ py)) (__list__ Eq) (__list__ (Call set (__list__ my))))) (Assert (Compare (Call len (__list__ py)) (__list__ Eq) (__list__ (Call len (__list__ my))))) (Assert (Compare (Call set (__list__ (Call (Attribute my items)))) (__list__ Eq) (__list__ (Call set (__list__ (Call (Attribute py items)))))))))) (__list__ (Call (Attribute (Attribute pytest mark) parametrize) (__list__ STRING_4 (List (__list__ (Call (Attribute pytest param) (__list__ _add_items) (__list__ (keyword id STRING_5))) (Call (Attribute pytest param) (__list__ _overwrite_items) (__list__ (keyword id STRING_6))) (Call (Attribute pytest param) (__list__ _delete_items) (__list__ (keyword id STRING_7))) (Call (Attribute pytest param) (__list__ _access_absent_items) (__list__ (keyword id STRING_8))) (Call (Attribute pytest param) (__list__ _add_with_resize_up) (__list__ (keyword id STRING_9))) (Call (Attribute pytest param) (__list__ _add_with_resize_down) (__list__ (keyword id STRING_10))))))))) (FunctionDef test_no_new_methods_was_added_to_api arguments (__list__ (FunctionDef is_public (arguments (__list__ (arg name str))) (__list__ (Return (UnaryOp Not (Call (Attribute name startswith) (__list__ STRING_11))))) (__list__ ) bool) (Assign (__list__ dict_public_names) (SetComp name (__list__ (comprehension name (Call dir (__list__ Dict)) (__list__ (Call is_public (__list__ name))) 0)))) (Assign (__list__ hash_public_names) (SetComp name (__list__ (comprehension name (Call dir (__list__ (Call HashMap))) (__list__ (Call is_public (__list__ name))) 0)))) (Assert (Compare dict_public_names (__list__ Gt) (__list__ hash_public_names)))) (__list__ )))",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (ClassDef RadixNode (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg prefix str) (arg is_leaf bool)) (__list__ STRING_10 False)) (__list__ (AnnAssign (Attribute self nodes) (Subscript dict (Tuple (__list__ str RadixNode))) Dict 0) (Assign (__list__ (Attribute self is_leaf)) is_leaf) (Assign (__list__ (Attribute self prefix)) prefix)) (__list__ ) None) (FunctionDef match (arguments (__list__ (arg self) (arg word str))) (__list__ (Expr STRING_1) (Assign (__list__ x) 0) (For (Tuple (__list__ q w)) (Call zip (__list__ (Attribute self prefix) word)) (__list__ (If (Compare q (__list__ NotEq) (__list__ w)) (__list__ Break)) (AugAssign x Add 1))) (Return (Tuple (__list__ (Subscript (Attribute self prefix) (Slice x)) (Subscript (Attribute self prefix) (Slice x)) (Subscript word (Slice x)))))) (__list__ ) (Subscript tuple (Tuple (__list__ str str str)))) (FunctionDef insert_many (arguments (__list__ (arg self) (arg words (Subscript list str)))) (__list__ (Expr STRING_2) (For word words (__list__ (Expr (Call (Attribute self insert) (__list__ word)))))) (__list__ ) None) (FunctionDef insert (arguments (__list__ (arg self) (arg word str))) (__list__ (Expr STRING_3) (If (BoolOp And (__list__ (Compare (Attribute self prefix) (__list__ Eq) (__list__ word)) (UnaryOp Not (Attribute self is_leaf)))) (__list__ (Assign (__list__ (Attribute self is_leaf)) True)) (__list__ (If (Compare (Subscript word 0) (__list__ NotIn) (__list__ (Attribute self nodes))) (__list__ (Assign (__list__ (Subscript (Attribute self nodes) (Subscript word 0))) (Call RadixNode (__list__ (keyword prefix word) (keyword is_leaf True))))) (__list__ (Assign (__list__ incoming_node) (Subscript (Attribute self nodes) (Subscript word 0))) (Assign (__list__ (Tuple (__list__ matching_string remaining_prefix remaining_word))) (Call (Attribute incoming_node match) (__list__ word))) (If (Compare remaining_prefix (__list__ Eq) (__list__ STRING_10)) (__list__ (Expr (Call (Attribute (Subscript (Attribute self nodes) (Subscript matching_string 0)) insert) (__list__ remaining_word)))) (__list__ (Assign (__list__ (Attribute incoming_node prefix)) remaining_prefix) (Assign (__list__ aux_node) (Subscript (Attribute self nodes) (Subscript matching_string 0))) (Assign (__list__ (Subscript (Attribute self nodes) (Subscript matching_string 0))) (Call RadixNode (__list__ matching_string False))) (Assign (__list__ (Subscript (Attribute (Subscript (Attribute self nodes) (Subscript matching_string 0)) nodes) (Subscript remaining_prefix 0))) aux_node) (If (Compare remaining_word (__list__ Eq) (__list__ STRING_10)) (__list__ (Assign (__list__ (Attribute (Subscript (Attribute self nodes) (Subscript matching_string 0)) is_leaf)) True)) (__list__ (Expr (Call (Attribute (Subscript (Attribute self nodes) (Subscript matching_string 0)) insert) (__list__ remaining_word)))))))))))) (__list__ ) None) (FunctionDef find (arguments (__list__ (arg self) (arg word str))) (__list__ (Expr STRING_4) (Assign (__list__ incoming_node) (Call (Attribute (Attribute self nodes) get) (__list__ (Subscript word 0) None))) (If (UnaryOp Not incoming_node) (__list__ (Return False)) (__list__ (Assign (__list__ (Tuple (__list__ matching_string remaining_prefix remaining_word))) (Call (Attribute incoming_node match) (__list__ word))) (If (Compare remaining_prefix (__list__ NotEq) (__list__ STRING_10)) (__list__ (Return False)) (__list__ (If (Compare remaining_word (__list__ Eq) (__list__ STRING_10)) (__list__ (Return (Attribute incoming_node is_leaf))) (__list__ (Return (Call (Attribute incoming_node find) (__list__ remaining_word)))))))))) (__list__ ) bool) (FunctionDef delete (arguments (__list__ (arg self) (arg word str))) (__list__ (Expr STRING_5) (Assign (__list__ incoming_node) (Call (Attribute (Attribute self nodes) get) (__list__ (Subscript word 0) None))) (If (UnaryOp Not incoming_node) (__list__ (Return False)) (__list__ (Assign (__list__ (Tuple (__list__ matching_string remaining_prefix remaining_word))) (Call (Attribute incoming_node match) (__list__ word))) (If (Compare remaining_prefix (__list__ NotEq) (__list__ STRING_10)) (__list__ (Return False)) (__list__ (If (Compare remaining_word (__list__ NotEq) (__list__ STRING_10)) (__list__ (Return (Call (Attribute incoming_node delete) (__list__ remaining_word)))) (__list__ (If (UnaryOp Not (Attribute incoming_node is_leaf)) (__list__ (Return False)) (__list__ (If (Compare (Call len (__list__ (Attribute incoming_node nodes))) (__list__ Eq) (__list__ 0)) (__list__ (Delete (__list__ (Subscript (Attribute self nodes) (Subscript word 0) Del))) (If (BoolOp And (__list__ (Compare (Call len (__list__ (Attribute self nodes))) (__list__ Eq) (__list__ 1)) (UnaryOp Not (Attribute self is_leaf)))) (__list__ (Assign (__list__ merging_node) (Call next (__list__ (Call iter (__list__ (Call (Attribute (Attribute self nodes) values))))))) (Assign (__list__ (Attribute self is_leaf)) (Attribute merging_node is_leaf)) (AugAssign (Attribute self prefix) Add (Attribute merging_node prefix)) (Assign (__list__ (Attribute self nodes)) (Attribute merging_node nodes))))) (__list__ (If (Compare (Call len (__list__ (Attribute incoming_node nodes))) (__list__ Gt) (__list__ 1)) (__list__ (Assign (__list__ (Attribute incoming_node is_leaf)) False)) (__list__ (Assign (__list__ merging_node) (Call next (__list__ (Call iter (__list__ (Call (Attribute (Attribute incoming_node nodes) values))))))) (Assign (__list__ (Attribute incoming_node is_leaf)) (Attribute merging_node is_leaf)) (AugAssign (Attribute incoming_node prefix) Add (Attribute merging_node prefix)) (Assign (__list__ (Attribute incoming_node nodes)) (Attribute merging_node nodes)))))) (Return True)))))))))) (__list__ ) bool) (FunctionDef print_tree (arguments (__list__ (arg self) (arg height int)) (__list__ 0)) (__list__ (Expr STRING_6) (If (Compare (Attribute self prefix) (__list__ NotEq) (__list__ STRING_10)) (__list__ (Expr (Call print (__list__ (BinOp STRING_2 Mult height) (Attribute self prefix) (IfExp (Attribute self is_leaf) STRING_7 STRING_10)))))) (For value (Call (Attribute (Attribute self nodes) values)) (__list__ (Expr (Call (Attribute value print_tree) (__list__ (BinOp height Add 1))))))) (__list__ ) None))) (FunctionDef test_trie arguments (__list__ (Assign (__list__ words) (Call (Attribute STRING_8 split))) (Assign (__list__ root) (Call RadixNode)) (Expr (Call (Attribute root insert_many) (__list__ words))) (Assert (Call all (__list__ (GeneratorExp (Call (Attribute root find) (__list__ word)) (__list__ (comprehension word words 0)))))) (Assert (UnaryOp Not (Call (Attribute root find) (__list__ STRING_9)))) (Assert (UnaryOp Not (Call (Attribute root find) (__list__ STRING_10)))) (Expr (Call (Attribute root delete) (__list__ STRING_11))) (Assert (UnaryOp Not (Call (Attribute root find) (__list__ STRING_11)))) (Expr (Call (Attribute root delete) (__list__ STRING_12))) (Assert (UnaryOp Not (Call (Attribute root find) (__list__ STRING_12)))) (Assert (Call (Attribute root find) (__list__ STRING_13))) (Return True)) (__list__ ) bool) (FunctionDef pytests arguments (__list__ (Assert (Call test_trie))) (__list__ ) None) (FunctionDef main arguments (__list__ (Expr STRING_42) (Assign (__list__ root) (Call RadixNode)) (Assign (__list__ words) (Call (Attribute STRING_14 split))) (Expr (Call (Attribute root insert_many) (__list__ words))) (Expr (Call print (__list__ STRING_15 words))) (Expr (Call print (__list__ STRING_16))) (Expr (Call (Attribute root print_tree)))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call main)))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef TrieNode (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self nodes) (Subscript dict (Tuple (__list__ str TrieNode))) Dict 0) (Assign (__list__ (Attribute self is_leaf)) False)) (__list__ ) None) (FunctionDef insert_many (arguments (__list__ (arg self) (arg words (Subscript list str)))) (__list__ (Expr STRING_1) (For word words (__list__ (Expr (Call (Attribute self insert) (__list__ word)))))) (__list__ ) None) (FunctionDef insert (arguments (__list__ (arg self) (arg word str))) (__list__ (Expr STRING_2) (Assign (__list__ curr) self) (For char word (__list__ (If (Compare char (__list__ NotIn) (__list__ (Attribute curr nodes))) (__list__ (Assign (__list__ (Subscript (Attribute curr nodes) char)) (Call TrieNode)))) (Assign (__list__ curr) (Subscript (Attribute curr nodes) char)))) (Assign (__list__ (Attribute curr is_leaf)) True)) (__list__ ) None) (FunctionDef find (arguments (__list__ (arg self) (arg word str))) (__list__ (Expr STRING_3) (Assign (__list__ curr) self) (For char word (__list__ (If (Compare char (__list__ NotIn) (__list__ (Attribute curr nodes))) (__list__ (Return False))) (Assign (__list__ curr) (Subscript (Attribute curr nodes) char)))) (Return (Attribute curr is_leaf))) (__list__ ) bool) (FunctionDef delete (arguments (__list__ (arg self) (arg word str))) (__list__ (Expr STRING_4) (FunctionDef _delete (arguments (__list__ (arg curr TrieNode) (arg word str) (arg index int))) (__list__ (If (Compare index (__list__ Eq) (__list__ (Call len (__list__ word)))) (__list__ (If (UnaryOp Not (Attribute curr is_leaf)) (__list__ (Return False))) (Assign (__list__ (Attribute curr is_leaf)) False) (Return (Compare (Call len (__list__ (Attribute curr nodes))) (__list__ Eq) (__list__ 0))))) (Assign (__list__ char) (Subscript word index)) (Assign (__list__ char_node) (Call (Attribute (Attribute curr nodes) get) (__list__ char))) (If (UnaryOp Not char_node) (__list__ (Return False))) (Assign (__list__ delete_curr) (Call _delete (__list__ char_node word (BinOp index Add 1)))) (If delete_curr (__list__ (Delete (__list__ (Subscript (Attribute curr nodes) char Del))) (Return (Compare (Call len (__list__ (Attribute curr nodes))) (__list__ Eq) (__list__ 0))))) (Return delete_curr)) (__list__ ) bool) (Expr (Call _delete (__list__ self word 0)))) (__list__ ) None))) (FunctionDef print_words (arguments (__list__ (arg node TrieNode) (arg word str))) (__list__ (Expr STRING_5) (If (Attribute node is_leaf) (__list__ (Expr (Call print (__list__ word) (__list__ (keyword end STRING_12)))))) (For (Tuple (__list__ key value)) (Call (Attribute (Attribute node nodes) items)) (__list__ (Expr (Call print_words (__list__ value (BinOp word Add key))))))) (__list__ ) None) (FunctionDef test_trie arguments (__list__ (Assign (__list__ words) (Call (Attribute STRING_8 split))) (Assign (__list__ root) (Call TrieNode)) (Expr (Call (Attribute root insert_many) (__list__ words))) (Assert (Call all (__list__ (GeneratorExp (Call (Attribute root find) (__list__ word)) (__list__ (comprehension word words 0)))))) (Assert (Call (Attribute root find) (__list__ STRING_12))) (Assert (UnaryOp Not (Call (Attribute root find) (__list__ STRING_9)))) (Assert (UnaryOp Not (Call (Attribute root find) (__list__ STRING_10)))) (Assert (Call (Attribute root find) (__list__ STRING_6))) (Assert (Call (Attribute root find) (__list__ STRING_11))) (Expr (Call (Attribute root delete) (__list__ STRING_11))) (Assert (UnaryOp Not (Call (Attribute root find) (__list__ STRING_11)))) (Expr (Call (Attribute root delete) (__list__ STRING_12))) (Assert (UnaryOp Not (Call (Attribute root find) (__list__ STRING_12)))) (Assert (Call (Attribute root find) (__list__ STRING_13))) (Return True)) (__list__ ) bool) (FunctionDef print_results (arguments (__list__ (arg msg str) (arg passes bool))) (__list__ (Expr (Call print (__list__ (Call str (__list__ msg)) (IfExp passes STRING_40 STRING_41))))) (__list__ ) None) (FunctionDef pytests arguments (__list__ (Assert (Call test_trie))) (__list__ ) None) (FunctionDef main arguments (__list__ (Expr STRING_42) (Expr (Call print_results (__list__ STRING_7 (Call test_trie))))) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call main)))))",
    "(ProgramStatements (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg name) (arg val))) (__list__ (Assign (__list__ (Attribute self name)) name) (Assign (__list__ (Attribute self val)) val)) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (JoinedStr (__list__ (FormattedValue (Attribute (Attribute self __class__) __name__) -1) STRING_8 (FormattedValue (Attribute self name) -1) STRING_13 (FormattedValue (Attribute self val) -1) STRING_3)))) (__list__ )) (FunctionDef __lt__ (arguments (__list__ (arg self) (arg other))) (__list__ (Return (Compare (Attribute self val) (__list__ Lt) (__list__ (Attribute other val))))) (__list__ )))) (ClassDef MinHeap (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg array))) (__list__ (Assign (__list__ (Attribute self idx_of_element)) Dict) (Assign (__list__ (Attribute self heap_dict)) Dict) (Assign (__list__ (Attribute self heap)) (Call (Attribute self build_heap) (__list__ array)))) (__list__ )) (FunctionDef __getitem__ (arguments (__list__ (arg self) (arg key))) (__list__ (Return (Call (Attribute self get_value) (__list__ key)))) (__list__ )) (FunctionDef get_parent_idx (arguments (__list__ (arg self) (arg idx))) (__list__ (Return (BinOp (BinOp idx Sub 1) FloorDiv 2))) (__list__ )) (FunctionDef get_left_child_idx (arguments (__list__ (arg self) (arg idx))) (__list__ (Return (BinOp (BinOp idx Mult 2) Add 1))) (__list__ )) (FunctionDef get_right_child_idx (arguments (__list__ (arg self) (arg idx))) (__list__ (Return (BinOp (BinOp idx Mult 2) Add 2))) (__list__ )) (FunctionDef get_value (arguments (__list__ (arg self) (arg key))) (__list__ (Return (Subscript (Attribute self heap_dict) key))) (__list__ )) (FunctionDef build_heap (arguments (__list__ (arg self) (arg array))) (__list__ (Assign (__list__ last_idx) (BinOp (Call len (__list__ array)) Sub 1)) (Assign (__list__ start_from) (Call (Attribute self get_parent_idx) (__list__ last_idx))) (For (Tuple (__list__ idx i)) (Call enumerate (__list__ array)) (__list__ (Assign (__list__ (Subscript (Attribute self idx_of_element) i)) idx) (Assign (__list__ (Subscript (Attribute self heap_dict) (Attribute i name))) (Attribute i val)))) (For i (Call range (__list__ start_from (UnaryOp USub 1) (UnaryOp USub 1))) (__list__ (Expr (Call (Attribute self sift_down) (__list__ i array))))) (Return array)) (__list__ )) (FunctionDef sift_down (arguments (__list__ (arg self) (arg idx) (arg array))) (__list__ (While True (__list__ (Assign (__list__ left) (Call (Attribute self get_left_child_idx) (__list__ idx))) (Assign (__list__ right) (Call (Attribute self get_right_child_idx) (__list__ idx))) (Assign (__list__ smallest) idx) (If (BoolOp And (__list__ (Compare left (__list__ Lt) (__list__ (Call len (__list__ array)))) (Compare (Subscript array left) (__list__ Lt) (__list__ (Subscript array idx))))) (__list__ (Assign (__list__ smallest) left))) (If (BoolOp And (__list__ (Compare right (__list__ Lt) (__list__ (Call len (__list__ array)))) (Compare (Subscript array right) (__list__ Lt) (__list__ (Subscript array smallest))))) (__list__ (Assign (__list__ smallest) right))) (If (Compare smallest (__list__ NotEq) (__list__ idx)) (__list__ (Assign (__list__ (Tuple (__list__ (Subscript array idx) (Subscript array smallest)))) (Tuple (__list__ (Subscript array smallest) (Subscript array idx)))) (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self idx_of_element) (Subscript array idx)) (Subscript (Attribute self idx_of_element) (Subscript array smallest))))) (Tuple (__list__ (Subscript (Attribute self idx_of_element) (Subscript array smallest)) (Subscript (Attribute self idx_of_element) (Subscript array idx))))) (Assign (__list__ idx) smallest)) (__list__ Break))))) (__list__ )) (FunctionDef sift_up (arguments (__list__ (arg self) (arg idx))) (__list__ (Assign (__list__ p) (Call (Attribute self get_parent_idx) (__list__ idx))) (While (BoolOp And (__list__ (Compare p (__list__ GtE) (__list__ 0)) (Compare (Subscript (Attribute self heap) p) (__list__ Gt) (__list__ (Subscript (Attribute self heap) idx))))) (__list__ (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self heap) p) (Subscript (Attribute self heap) idx)))) (Tuple (__list__ (Subscript (Attribute self heap) idx) (Subscript (Attribute self heap) p)))) (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self idx_of_element) (Subscript (Attribute self heap) p)) (Subscript (Attribute self idx_of_element) (Subscript (Attribute self heap) idx))))) (Tuple (__list__ (Subscript (Attribute self idx_of_element) (Subscript (Attribute self heap) idx)) (Subscript (Attribute self idx_of_element) (Subscript (Attribute self heap) p))))) (Assign (__list__ idx) p) (Assign (__list__ p) (Call (Attribute self get_parent_idx) (__list__ idx)))))) (__list__ )) (FunctionDef peek (arguments (__list__ (arg self))) (__list__ (Return (Subscript (Attribute self heap) 0))) (__list__ )) (FunctionDef remove (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self heap) 0) (Subscript (Attribute self heap) (UnaryOp USub 1))))) (Tuple (__list__ (Subscript (Attribute self heap) (UnaryOp USub 1)) (Subscript (Attribute self heap) 0)))) (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self idx_of_element) (Subscript (Attribute self heap) 0)) (Subscript (Attribute self idx_of_element) (Subscript (Attribute self heap) (UnaryOp USub 1)))))) (Tuple (__list__ (Subscript (Attribute self idx_of_element) (Subscript (Attribute self heap) (UnaryOp USub 1))) (Subscript (Attribute self idx_of_element) (Subscript (Attribute self heap) 0))))) (Assign (__list__ x) (Call (Attribute (Attribute self heap) pop))) (Delete (__list__ (Subscript (Attribute self idx_of_element) x Del))) (Expr (Call (Attribute self sift_down) (__list__ 0 (Attribute self heap)))) (Return x)) (__list__ )) (FunctionDef insert (arguments (__list__ (arg self) (arg node))) (__list__ (Expr (Call (Attribute (Attribute self heap) append) (__list__ node))) (Assign (__list__ (Subscript (Attribute self idx_of_element) node)) (BinOp (Call len (__list__ (Attribute self heap))) Sub 1)) (Assign (__list__ (Subscript (Attribute self heap_dict) (Attribute node name))) (Attribute node val)) (Expr (Call (Attribute self sift_up) (__list__ (BinOp (Call len (__list__ (Attribute self heap))) Sub 1))))) (__list__ )) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Return (Compare (Call len (__list__ (Attribute self heap))) (__list__ Eq) (__list__ 0)))) (__list__ )) (FunctionDef decrease_key (arguments (__list__ (arg self) (arg node) (arg new_value))) (__list__ (Assert (Compare (Attribute (Subscript (Attribute self heap) (Subscript (Attribute self idx_of_element) node)) val) (__list__ Gt) (__list__ new_value)) STRING_1) (Assign (__list__ (Attribute node val)) new_value) (Assign (__list__ (Subscript (Attribute self heap_dict) (Attribute node name))) new_value) (Expr (Call (Attribute self sift_up) (__list__ (Subscript (Attribute self idx_of_element) node))))) (__list__ )))) (Assign (__list__ r) (Call Node (__list__ STRING_2 (UnaryOp USub 1)))) (Assign (__list__ b) (Call Node (__list__ STRING_3 6))) (Assign (__list__ a) (Call Node (__list__ STRING_4 3))) (Assign (__list__ x) (Call Node (__list__ STRING_29 1))) (Assign (__list__ e) (Call Node (__list__ STRING_5 4))) (Assign (__list__ my_min_heap) (Call MinHeap (__list__ (List (__list__ r b a x e))))) (Expr (Call print (__list__ STRING_6))) (For i (Attribute my_min_heap heap) (__list__ (Expr (Call print (__list__ i))))) (Expr (Call print (__list__ STRING_7))) (Expr (Call (Attribute my_min_heap decrease_key) (__list__ b (UnaryOp USub 17)))) (For i (Attribute my_min_heap heap) (__list__ (Expr (Call print (__list__ i))))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom abc (__list__ (alias abstractmethod)) 0) (ImportFrom collections.abc (__list__ (alias Iterable)) 0) (ImportFrom typing (__list__ (alias Generic) (alias Protocol) (alias TypeVar)) 0) (ClassDef Comparable (__list__ Protocol) (__list__ (FunctionDef __lt__ (arguments (__list__ (arg self T) (arg other T))) (__list__ Pass) (__list__ abstractmethod) bool) (FunctionDef __gt__ (arguments (__list__ (arg self T) (arg other T))) (__list__ Pass) (__list__ abstractmethod) bool) (FunctionDef __eq__ (arguments (__list__ (arg self T) (arg other object))) (__list__ Pass) (__list__ abstractmethod) bool))) (Assign (__list__ T) (Call TypeVar (__list__ STRING_1) (__list__ (keyword bound Comparable)))) (ClassDef Heap (__list__ (Subscript Generic T)) (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self h) (Subscript list T) List 0) (AnnAssign (Attribute self heap_size) int 0 0)) (__list__ ) None) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Return (Call str (__list__ (Attribute self h))))) (__list__ ) str) (FunctionDef parent_index (arguments (__list__ (arg self) (arg child_idx int))) (__list__ (Expr STRING_1) (If (Compare child_idx (__list__ Gt) (__list__ 0)) (__list__ (Return (BinOp (BinOp child_idx Sub 1) FloorDiv 2)))) (Return None)) (__list__ ) (BinOp int BitOr None)) (FunctionDef left_child_idx (arguments (__list__ (arg self) (arg parent_idx int))) (__list__ (Expr STRING_2) (Assign (__list__ left_child_index) (BinOp (BinOp 2 Mult parent_idx) Add 1)) (If (Compare left_child_index (__list__ Lt) (__list__ (Attribute self heap_size))) (__list__ (Return left_child_index))) (Return None)) (__list__ ) (BinOp int BitOr None)) (FunctionDef right_child_idx (arguments (__list__ (arg self) (arg parent_idx int))) (__list__ (Expr STRING_3) (Assign (__list__ right_child_index) (BinOp (BinOp 2 Mult parent_idx) Add 2)) (If (Compare right_child_index (__list__ Lt) (__list__ (Attribute self heap_size))) (__list__ (Return right_child_index))) (Return None)) (__list__ ) (BinOp int BitOr None)) (FunctionDef max_heapify (arguments (__list__ (arg self) (arg index int))) (__list__ (Expr STRING_4) (If (Compare index (__list__ Lt) (__list__ (Attribute self heap_size))) (__list__ (AnnAssign violation int index 1) (Assign (__list__ left_child) (Call (Attribute self left_child_idx) (__list__ index))) (Assign (__list__ right_child) (Call (Attribute self right_child_idx) (__list__ index))) (If (BoolOp And (__list__ (Compare left_child (__list__ IsNot) (__list__ None)) (Compare (Subscript (Attribute self h) left_child) (__list__ Gt) (__list__ (Subscript (Attribute self h) violation))))) (__list__ (Assign (__list__ violation) left_child))) (If (BoolOp And (__list__ (Compare right_child (__list__ IsNot) (__list__ None)) (Compare (Subscript (Attribute self h) right_child) (__list__ Gt) (__list__ (Subscript (Attribute self h) violation))))) (__list__ (Assign (__list__ violation) right_child))) (If (Compare violation (__list__ NotEq) (__list__ index)) (__list__ (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self h) violation) (Subscript (Attribute self h) index)))) (Tuple (__list__ (Subscript (Attribute self h) index) (Subscript (Attribute self h) violation)))) (Expr (Call (Attribute self max_heapify) (__list__ violation)))))))) (__list__ ) None) (FunctionDef build_max_heap (arguments (__list__ (arg self) (arg collection (Subscript Iterable T)))) (__list__ (Expr STRING_5) (Assign (__list__ (Attribute self h)) (Call list (__list__ collection))) (Assign (__list__ (Attribute self heap_size)) (Call len (__list__ (Attribute self h)))) (If (Compare (Attribute self heap_size) (__list__ Gt) (__list__ 1)) (__list__ (For i (Call range (__list__ (BinOp (BinOp (Attribute self heap_size) FloorDiv 2) Sub 1) (UnaryOp USub 1) (UnaryOp USub 1))) (__list__ (Expr (Call (Attribute self max_heapify) (__list__ i)))))))) (__list__ ) None) (FunctionDef extract_max (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (If (Compare (Attribute self heap_size) (__list__ GtE) (__list__ 2)) (__list__ (Assign (__list__ me) (Subscript (Attribute self h) 0)) (Assign (__list__ (Subscript (Attribute self h) 0)) (Call (Attribute (Attribute self h) pop) (__list__ (UnaryOp USub 1)))) (AugAssign (Attribute self heap_size) Sub 1) (Expr (Call (Attribute self max_heapify) (__list__ 0))) (Return me)) (__list__ (If (Compare (Attribute self heap_size) (__list__ Eq) (__list__ 1)) (__list__ (AugAssign (Attribute self heap_size) Sub 1) (Return (Call (Attribute (Attribute self h) pop) (__list__ (UnaryOp USub 1))))) (__list__ (Raise (Call Exception (__list__ STRING_7)))))))) (__list__ ) T) (FunctionDef insert (arguments (__list__ (arg self) (arg value T))) (__list__ (Expr STRING_8) (Expr (Call (Attribute (Attribute self h) append) (__list__ value))) (Assign (__list__ idx) (BinOp (BinOp (Attribute self heap_size) Sub 1) FloorDiv 2)) (AugAssign (Attribute self heap_size) Add 1) (While (Compare idx (__list__ GtE) (__list__ 0)) (__list__ (Expr (Call (Attribute self max_heapify) (__list__ idx))) (Assign (__list__ idx) (BinOp (BinOp idx Sub 1) FloorDiv 2))))) (__list__ ) None) (FunctionDef heap_sort (arguments (__list__ (arg self))) (__list__ (Assign (__list__ size) (Attribute self heap_size)) (For j (Call range (__list__ (BinOp size Sub 1) 0 (UnaryOp USub 1))) (__list__ (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self h) 0) (Subscript (Attribute self h) j)))) (Tuple (__list__ (Subscript (Attribute self h) j) (Subscript (Attribute self h) 0)))) (AugAssign (Attribute self heap_size) Sub 1) (Expr (Call (Attribute self max_heapify) (__list__ 0))))) (Assign (__list__ (Attribute self heap_size)) size)) (__list__ ) None))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (For unsorted (List (__list__ (List (__list__ 0)) (List (__list__ 2)) (List (__list__ 3 5)) (List (__list__ 5 3)) (List (__list__ 5 5)) (List (__list__ 0 0 0 0)) (List (__list__ 1 1 1 1)) (List (__list__ 2 2 3 5)) (List (__list__ 0 2 2 3 5)) (List (__list__ 2 5 3 0 2 3 0 3)) (List (__list__ 6 1 2 7 9 3 4 5 10 8)) (List (__list__ 103 9 1 7 11 15 25 201 209 107 5)) (List (__list__ (UnaryOp USub 45) (UnaryOp USub 2) (UnaryOp USub 5))))) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ STRING_9 (FormattedValue unsorted -1)))))) (AnnAssign heap (Subscript Heap int) (Call Heap) 1) (Expr (Call (Attribute heap build_max_heap) (__list__ unsorted))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_10 (FormattedValue heap -1)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_11 (FormattedValue (Call (Attribute heap extract_max)) -1)))))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_12 (FormattedValue heap -1)))))) (Expr (Call (Attribute heap insert) (__list__ 100))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_13 (FormattedValue heap -1)))))) (Expr (Call (Attribute heap heap_sort))) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_14 (FormattedValue heap -1) STRING_13))))))))))",
    "(ProgramStatements (ImportFrom collections.abc (__list__ (alias Callable)) 0) (ClassDef Heap (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg key (BinOp Callable BitOr None))) (__list__ None)) (__list__ (AnnAssign (Attribute self arr) list List 0) (AnnAssign (Attribute self pos_map) dict Dict 0) (Assign (__list__ (Attribute self size)) 0) (Assign (__list__ (Attribute self key)) (BoolOp Or (__list__ key (Lambda (arguments (__list__ (arg x))) x))))) (__list__ ) None) (FunctionDef _parent (arguments (__list__ (arg self) (arg i int))) (__list__ (Expr STRING_1) (Return (IfExp (Compare i (__list__ Gt) (__list__ 0)) (Call int (__list__ (BinOp (BinOp i Sub 1) Div 2))) None))) (__list__ ) (BinOp int BitOr None)) (FunctionDef _left (arguments (__list__ (arg self) (arg i int))) (__list__ (Expr STRING_2) (Assign (__list__ left) (Call int (__list__ (BinOp (BinOp 2 Mult i) Add 1)))) (Return (IfExp (Compare 0 (__list__ Lt Lt) (__list__ left (Attribute self size))) left None))) (__list__ ) (BinOp int BitOr None)) (FunctionDef _right (arguments (__list__ (arg self) (arg i int))) (__list__ (Expr STRING_3) (Assign (__list__ right) (Call int (__list__ (BinOp (BinOp 2 Mult i) Add 2)))) (Return (IfExp (Compare 0 (__list__ Lt Lt) (__list__ right (Attribute self size))) right None))) (__list__ ) (BinOp int BitOr None)) (FunctionDef _swap (arguments (__list__ (arg self) (arg i int) (arg j int))) (__list__ (Expr STRING_4) (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self pos_map) (Subscript (Subscript (Attribute self arr) i) 0)) (Subscript (Attribute self pos_map) (Subscript (Subscript (Attribute self arr) j) 0))))) (Tuple (__list__ (Subscript (Attribute self pos_map) (Subscript (Subscript (Attribute self arr) j) 0)) (Subscript (Attribute self pos_map) (Subscript (Subscript (Attribute self arr) i) 0))))) (Assign (__list__ (Tuple (__list__ (Subscript (Attribute self arr) i) (Subscript (Attribute self arr) j)))) (Tuple (__list__ (Subscript (Attribute self arr) j) (Subscript (Attribute self arr) i))))) (__list__ ) None) (FunctionDef _cmp (arguments (__list__ (arg self) (arg i int) (arg j int))) (__list__ (Expr STRING_5) (Return (Compare (Subscript (Subscript (Attribute self arr) i) 1) (__list__ Lt) (__list__ (Subscript (Subscript (Attribute self arr) j) 1))))) (__list__ ) bool) (FunctionDef _get_valid_parent (arguments (__list__ (arg self) (arg i int))) (__list__ (Expr STRING_6) (Assign (__list__ left) (Call (Attribute self _left) (__list__ i))) (Assign (__list__ right) (Call (Attribute self _right) (__list__ i))) (Assign (__list__ valid_parent) i) (If (BoolOp And (__list__ (Compare left (__list__ IsNot) (__list__ None)) (UnaryOp Not (Call (Attribute self _cmp) (__list__ left valid_parent))))) (__list__ (Assign (__list__ valid_parent) left))) (If (BoolOp And (__list__ (Compare right (__list__ IsNot) (__list__ None)) (UnaryOp Not (Call (Attribute self _cmp) (__list__ right valid_parent))))) (__list__ (Assign (__list__ valid_parent) right))) (Return valid_parent)) (__list__ ) int) (FunctionDef _heapify_up (arguments (__list__ (arg self) (arg index int))) (__list__ (Expr STRING_7) (Assign (__list__ parent) (Call (Attribute self _parent) (__list__ index))) (While (BoolOp And (__list__ (Compare parent (__list__ IsNot) (__list__ None)) (UnaryOp Not (Call (Attribute self _cmp) (__list__ index parent))))) (__list__ (Expr (Call (Attribute self _swap) (__list__ index parent))) (Assign (__list__ (Tuple (__list__ index parent))) (Tuple (__list__ parent (Call (Attribute self _parent) (__list__ parent)))))))) (__list__ ) None) (FunctionDef _heapify_down (arguments (__list__ (arg self) (arg index int))) (__list__ (Expr STRING_8) (Assign (__list__ valid_parent) (Call (Attribute self _get_valid_parent) (__list__ index))) (While (Compare valid_parent (__list__ NotEq) (__list__ index)) (__list__ (Expr (Call (Attribute self _swap) (__list__ index valid_parent))) (Assign (__list__ (Tuple (__list__ index valid_parent))) (Tuple (__list__ valid_parent (Call (Attribute self _get_valid_parent) (__list__ valid_parent)))))))) (__list__ ) None) (FunctionDef update_item (arguments (__list__ (arg self) (arg item int) (arg item_value int))) (__list__ (Expr STRING_9) (If (Compare item (__list__ NotIn) (__list__ (Attribute self pos_map))) (__list__ Return)) (Assign (__list__ index) (Subscript (Attribute self pos_map) item)) (Assign (__list__ (Subscript (Attribute self arr) index)) (List (__list__ item (Call (Attribute self key) (__list__ item_value))))) (Expr (Call (Attribute self _heapify_up) (__list__ index))) (Expr (Call (Attribute self _heapify_down) (__list__ index)))) (__list__ ) None) (FunctionDef delete_item (arguments (__list__ (arg self) (arg item int))) (__list__ (Expr STRING_10) (If (Compare item (__list__ NotIn) (__list__ (Attribute self pos_map))) (__list__ Return)) (Assign (__list__ index) (Subscript (Attribute self pos_map) item)) (Delete (__list__ (Subscript (Attribute self pos_map) item Del))) (Assign (__list__ (Subscript (Attribute self arr) index)) (Subscript (Attribute self arr) (BinOp (Attribute self size) Sub 1))) (Assign (__list__ (Subscript (Attribute self pos_map) (Subscript (Subscript (Attribute self arr) (BinOp (Attribute self size) Sub 1)) 0))) index) (AugAssign (Attribute self size) Sub 1) (If (Compare (Attribute self size) (__list__ Gt) (__list__ index)) (__list__ (Expr (Call (Attribute self _heapify_up) (__list__ index))) (Expr (Call (Attribute self _heapify_down) (__list__ index)))))) (__list__ ) None) (FunctionDef insert_item (arguments (__list__ (arg self) (arg item int) (arg item_value int))) (__list__ (Expr STRING_11) (Assign (__list__ arr_len) (Call len (__list__ (Attribute self arr)))) (If (Compare arr_len (__list__ Eq) (__list__ (Attribute self size))) (__list__ (Expr (Call (Attribute (Attribute self arr) append) (__list__ (List (__list__ item (Call (Attribute self key) (__list__ item_value)))))))) (__list__ (Assign (__list__ (Subscript (Attribute self arr) (Attribute self size))) (List (__list__ item (Call (Attribute self key) (__list__ item_value))))))) (Assign (__list__ (Subscript (Attribute self pos_map) item)) (Attribute self size)) (AugAssign (Attribute self size) Add 1) (Expr (Call (Attribute self _heapify_up) (__list__ (BinOp (Attribute self size) Sub 1))))) (__list__ ) None) (FunctionDef get_top (arguments (__list__ (arg self))) (__list__ (Expr STRING_12) (Return (IfExp (Attribute self size) (Subscript (Attribute self arr) 0) None))) (__list__ ) (BinOp tuple BitOr None)) (FunctionDef extract_top (arguments (__list__ (arg self))) (__list__ (Expr STRING_13) (Assign (__list__ top_item_tuple) (Call (Attribute self get_top))) (If top_item_tuple (__list__ (Expr (Call (Attribute self delete_item) (__list__ (Subscript top_item_tuple 0)))))) (Return top_item_tuple)) (__list__ ) (BinOp tuple BitOr None)))) (FunctionDef test_heap arguments (__list__ (Expr STRING_14)) (__list__ ) None) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements )",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterable) (alias Iterator)) 0) (ImportFrom typing (__list__ (alias Any) (alias Generic) (alias TypeVar)) 0) (Assign (__list__ T) (Call TypeVar (__list__ STRING_1) (__list__ (keyword bound bool)))) (ClassDef SkewNode (__list__ (Subscript Generic T)) (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg value T))) (__list__ (AnnAssign (Attribute self _value) T value 0) (AnnAssign (Attribute self left) (BinOp (Subscript SkewNode T) BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp (Subscript SkewNode T) BitOr None) None 0)) (__list__ ) None) (FunctionDef value (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (Attribute self _value))) (__list__ property) T) (FunctionDef merge (arguments (__list__ (arg root1 (BinOp (Subscript SkewNode T) BitOr None)) (arg root2 (BinOp (Subscript SkewNode T) BitOr None)))) (__list__ (Expr STRING_2) (If (UnaryOp Not root1) (__list__ (Return root2))) (If (UnaryOp Not root2) (__list__ (Return root1))) (If (Compare (Attribute root1 value) (__list__ Gt) (__list__ (Attribute root2 value))) (__list__ (Assign (__list__ (Tuple (__list__ root1 root2))) (Tuple (__list__ root2 root1))))) (Assign (__list__ result) root1) (Assign (__list__ temp) (Attribute root1 right)) (Assign (__list__ (Attribute result right)) (Attribute root1 left)) (Assign (__list__ (Attribute result left)) (Call (Attribute SkewNode merge) (__list__ temp root2))) (Return result)) (__list__ staticmethod) (BinOp (Subscript SkewNode T) BitOr None)))) (ClassDef SkewHeap (__list__ (Subscript Generic T)) (__list__ (Expr STRING_3) (FunctionDef __init__ (arguments (__list__ (arg self) (arg data (BinOp (Subscript Iterable T) BitOr None))) (__list__ Tuple)) (__list__ (Expr STRING_4) (AnnAssign (Attribute self _root) (BinOp (Subscript SkewNode T) BitOr None) None 0) (If data (__list__ (For item data (__list__ (Expr (Call (Attribute self insert) (__list__ item)))))))) (__list__ ) None) (FunctionDef __bool__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (Return (Compare (Attribute self _root) (__list__ IsNot) (__list__ None)))) (__list__ ) bool) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (AnnAssign result (Subscript list Any) List 1) (While self (__list__ (Expr (Call (Attribute result append) (__list__ (Call (Attribute self pop))))))) (For item result (__list__ (Expr (Call (Attribute self insert) (__list__ item))))) (Return (Call iter (__list__ result)))) (__list__ ) (Subscript Iterator T)) (FunctionDef insert (arguments (__list__ (arg self) (arg value T))) (__list__ (Expr STRING_7) (Assign (__list__ (Attribute self _root)) (Call (Attribute SkewNode merge) (__list__ (Attribute self _root) (Call SkewNode (__list__ value)))))) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Expr STRING_8) (Assign (__list__ result) (Call (Attribute self top))) (Assign (__list__ (Attribute self _root)) (IfExp (Attribute self _root) (Call (Attribute SkewNode merge) (__list__ (Attribute (Attribute self _root) left) (Attribute (Attribute self _root) right))) None)) (Return result)) (__list__ ) (BinOp T BitOr None)) (FunctionDef top (arguments (__list__ (arg self))) (__list__ (Expr STRING_9) (If (UnaryOp Not (Attribute self _root)) (__list__ (Raise (Call IndexError (__list__ STRING_10))))) (Return (Attribute (Attribute self _root) value))) (__list__ ) T) (FunctionDef clear (arguments (__list__ (arg self))) (__list__ (Expr STRING_11) (Assign (__list__ (Attribute self _root)) None)) (__list__ ) None))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (Import (__list__ (alias random))) (ImportFrom collections.abc (__list__ (alias Iterable)) 0) (ImportFrom typing (__list__ (alias Any) (alias Generic) (alias TypeVar)) 0) (Assign (__list__ T) (Call TypeVar (__list__ STRING_1) (__list__ (keyword bound bool)))) (ClassDef RandomizedHeapNode (__list__ (Subscript Generic T)) (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg value T))) (__list__ (AnnAssign (Attribute self _value) T value 0) (AnnAssign (Attribute self left) (BinOp (Subscript RandomizedHeapNode T) BitOr None) None 0) (AnnAssign (Attribute self right) (BinOp (Subscript RandomizedHeapNode T) BitOr None) None 0)) (__list__ ) None) (FunctionDef value (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (Attribute self _value))) (__list__ property) T) (FunctionDef merge (arguments (__list__ (arg root1 (BinOp (Subscript RandomizedHeapNode T) BitOr None)) (arg root2 (BinOp (Subscript RandomizedHeapNode T) BitOr None)))) (__list__ (Expr STRING_2) (If (UnaryOp Not root1) (__list__ (Return root2))) (If (UnaryOp Not root2) (__list__ (Return root1))) (If (Compare (Attribute root1 value) (__list__ Gt) (__list__ (Attribute root2 value))) (__list__ (Assign (__list__ (Tuple (__list__ root1 root2))) (Tuple (__list__ root2 root1))))) (If (Call (Attribute random choice) (__list__ (List (__list__ True False)))) (__list__ (Assign (__list__ (Tuple (__list__ (Attribute root1 left) (Attribute root1 right)))) (Tuple (__list__ (Attribute root1 right) (Attribute root1 left)))))) (Assign (__list__ (Attribute root1 left)) (Call (Attribute RandomizedHeapNode merge) (__list__ (Attribute root1 left) root2))) (Return root1)) (__list__ staticmethod) (BinOp (Subscript RandomizedHeapNode T) BitOr None)))) (ClassDef RandomizedHeap (__list__ (Subscript Generic T)) (__list__ (Expr STRING_3) (FunctionDef __init__ (arguments (__list__ (arg self) (arg data (BinOp (Subscript Iterable T) BitOr None))) (__list__ Tuple)) (__list__ (Expr STRING_4) (AnnAssign (Attribute self _root) (BinOp (Subscript RandomizedHeapNode T) BitOr None) None 0) (If data (__list__ (For item data (__list__ (Expr (Call (Attribute self insert) (__list__ item)))))))) (__list__ ) None) (FunctionDef insert (arguments (__list__ (arg self) (arg value T))) (__list__ (Expr STRING_5) (Assign (__list__ (Attribute self _root)) (Call (Attribute RandomizedHeapNode merge) (__list__ (Attribute self _root) (Call RandomizedHeapNode (__list__ value)))))) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (Assign (__list__ result) (Call (Attribute self top))) (If (Compare (Attribute self _root) (__list__ Is) (__list__ None)) (__list__ (Return None))) (Assign (__list__ (Attribute self _root)) (Call (Attribute RandomizedHeapNode merge) (__list__ (Attribute (Attribute self _root) left) (Attribute (Attribute self _root) right)))) (Return result)) (__list__ ) (BinOp T BitOr None)) (FunctionDef top (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (If (UnaryOp Not (Attribute self _root)) (__list__ (Raise (Call IndexError (__list__ STRING_10))))) (Return (Attribute (Attribute self _root) value))) (__list__ ) T) (FunctionDef clear (arguments (__list__ (arg self))) (__list__ (Expr STRING_8) (Assign (__list__ (Attribute self _root)) None)) (__list__ ) None) (FunctionDef to_sorted_list (arguments (__list__ (arg self))) (__list__ (Expr STRING_9) (Assign (__list__ result) List) (While self (__list__ (Expr (Call (Attribute result append) (__list__ (Call (Attribute self pop))))))) (Return result)) (__list__ ) (Subscript list Any)) (FunctionDef __bool__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_10) (Return (Compare (Attribute self _root) (__list__ IsNot) (__list__ None)))) (__list__ ) bool))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef Node (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self) (arg val))) (__list__ (Assign (__list__ (Attribute self val)) val) (Assign (__list__ (Attribute self left_tree_size)) 0) (Assign (__list__ (Attribute self left)) None) (Assign (__list__ (Attribute self right)) None) (Assign (__list__ (Attribute self parent)) None)) (__list__ )) (FunctionDef merge_trees (arguments (__list__ (arg self) (arg other))) (__list__ (Expr STRING_2) (Assert (Compare (Attribute self left_tree_size) (__list__ Eq) (__list__ (Attribute other left_tree_size))) STRING_3) (If (Compare (Attribute self val) (__list__ Lt) (__list__ (Attribute other val))) (__list__ (Assign (__list__ (Attribute other left)) (Attribute self right)) (Assign (__list__ (Attribute other parent)) None) (If (Attribute self right) (__list__ (Assign (__list__ (Attribute (Attribute self right) parent)) other))) (Assign (__list__ (Attribute self right)) other) (Assign (__list__ (Attribute self left_tree_size)) (BinOp (BinOp (Attribute self left_tree_size) Mult 2) Add 1)) (Return self)) (__list__ (Assign (__list__ (Attribute self left)) (Attribute other right)) (Assign (__list__ (Attribute self parent)) None) (If (Attribute other right) (__list__ (Assign (__list__ (Attribute (Attribute other right) parent)) self))) (Assign (__list__ (Attribute other right)) self) (Assign (__list__ (Attribute other left_tree_size)) (BinOp (BinOp (Attribute other left_tree_size) Mult 2) Add 1)) (Return other)))) (__list__ )))) (ClassDef BinomialHeap (__list__ (Expr STRING_4) (FunctionDef __init__ (arguments (__list__ (arg self) (arg bottom_root) (arg min_node) (arg heap_size)) (__list__ None None 0)) (__list__ (Assign (__list__ (Attribute self size)) heap_size) (Assign (__list__ (Attribute self bottom_root)) bottom_root) (Assign (__list__ (Attribute self min_node)) min_node)) (__list__ )) (FunctionDef merge_heaps (arguments (__list__ (arg self) (arg other))) (__list__ (Expr STRING_5) (If (Compare (Attribute other size) (__list__ Eq) (__list__ 0)) (__list__ (Return None))) (If (Compare (Attribute self size) (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute self size)) (Attribute other size)) (Assign (__list__ (Attribute self bottom_root)) (Attribute other bottom_root)) (Assign (__list__ (Attribute self min_node)) (Attribute other min_node)) (Return None))) (Assign (__list__ (Attribute self size)) (BinOp (Attribute self size) Add (Attribute other size))) (If (Compare (Attribute (Attribute self min_node) val) (__list__ Gt) (__list__ (Attribute (Attribute other min_node) val))) (__list__ (Assign (__list__ (Attribute self min_node)) (Attribute other min_node)))) (Assign (__list__ combined_roots_list) List) (Assign (__list__ (Tuple (__list__ i j))) (Tuple (__list__ (Attribute self bottom_root) (Attribute other bottom_root)))) (While (BoolOp Or (__list__ i j)) (__list__ (If (BoolOp And (__list__ i (BoolOp Or (__list__ (UnaryOp Not j) (Compare (Attribute i left_tree_size) (__list__ Lt) (__list__ (Attribute j left_tree_size))))))) (__list__ (Expr (Call (Attribute combined_roots_list append) (__list__ (Tuple (__list__ i True))))) (Assign (__list__ i) (Attribute i parent))) (__list__ (Expr (Call (Attribute combined_roots_list append) (__list__ (Tuple (__list__ j False))))) (Assign (__list__ j) (Attribute j parent)))))) (For i (Call range (__list__ (BinOp (Call len (__list__ combined_roots_list)) Sub 1))) (__list__ (If (Compare (Subscript (Subscript combined_roots_list i) 1) (__list__ NotEq) (__list__ (Subscript (Subscript combined_roots_list (BinOp i Add 1)) 1))) (__list__ (Assign (__list__ (Attribute (Subscript (Subscript combined_roots_list i) 0) parent)) (Subscript (Subscript combined_roots_list (BinOp i Add 1)) 0)) (Assign (__list__ (Attribute (Subscript (Subscript combined_roots_list (BinOp i Add 1)) 0) left)) (Subscript (Subscript combined_roots_list i) 0)))))) (Assign (__list__ i) (Subscript (Subscript combined_roots_list 0) 0)) (While (Attribute i parent) (__list__ (If (BoolOp Or (__list__ (BoolOp And (__list__ (Compare (Attribute i left_tree_size) (__list__ Eq) (__list__ (Attribute (Attribute i parent) left_tree_size))) (UnaryOp Not (Attribute (Attribute i parent) parent)))) (BoolOp And (__list__ (Compare (Attribute i left_tree_size) (__list__ Eq) (__list__ (Attribute (Attribute i parent) left_tree_size))) (Compare (Attribute i left_tree_size) (__list__ NotEq) (__list__ (Attribute (Attribute (Attribute i parent) parent) left_tree_size))))))) (__list__ (Assign (__list__ previous_node) (Attribute i left)) (Assign (__list__ next_node) (Attribute (Attribute i parent) parent)) (Assign (__list__ i) (Call (Attribute i merge_trees) (__list__ (Attribute i parent)))) (Assign (__list__ (Attribute i left)) previous_node) (Assign (__list__ (Attribute i parent)) next_node) (If previous_node (__list__ (Assign (__list__ (Attribute previous_node parent)) i))) (If next_node (__list__ (Assign (__list__ (Attribute next_node left)) i)))) (__list__ (Assign (__list__ i) (Attribute i parent)))))) (While (Attribute i left) (__list__ (Assign (__list__ i) (Attribute i left)))) (Assign (__list__ (Attribute self bottom_root)) i) (Assign (__list__ (Attribute other size)) (Attribute self size)) (Assign (__list__ (Attribute other bottom_root)) (Attribute self bottom_root)) (Assign (__list__ (Attribute other min_node)) (Attribute self min_node)) (Return self)) (__list__ )) (FunctionDef insert (arguments (__list__ (arg self) (arg val))) (__list__ (Expr STRING_6) (If (Compare (Attribute self size) (__list__ Eq) (__list__ 0)) (__list__ (Assign (__list__ (Attribute self bottom_root)) (Call Node (__list__ val))) (Assign (__list__ (Attribute self size)) 1) (Assign (__list__ (Attribute self min_node)) (Attribute self bottom_root))) (__list__ (Assign (__list__ new_node) (Call Node (__list__ val))) (AugAssign (Attribute self size) Add 1) (If (Compare val (__list__ Lt) (__list__ (Attribute (Attribute self min_node) val))) (__list__ (Assign (__list__ (Attribute self min_node)) new_node))) (Assign (__list__ (Attribute (Attribute self bottom_root) left)) new_node) (Assign (__list__ (Attribute new_node parent)) (Attribute self bottom_root)) (Assign (__list__ (Attribute self bottom_root)) new_node) (While (BoolOp And (__list__ (Attribute (Attribute self bottom_root) parent) (Compare (Attribute (Attribute self bottom_root) left_tree_size) (__list__ Eq) (__list__ (Attribute (Attribute (Attribute self bottom_root) parent) left_tree_size))))) (__list__ (Assign (__list__ next_node) (Attribute (Attribute (Attribute self bottom_root) parent) parent)) (Assign (__list__ (Attribute self bottom_root)) (Call (Attribute (Attribute self bottom_root) merge_trees) (__list__ (Attribute (Attribute self bottom_root) parent)))) (Assign (__list__ (Attribute (Attribute self bottom_root) parent)) next_node) (Assign (__list__ (Attribute (Attribute self bottom_root) left)) None) (If next_node (__list__ (Assign (__list__ (Attribute next_node left)) (Attribute self bottom_root))))))))) (__list__ )) (FunctionDef peek (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (Return (Attribute (Attribute self min_node) val))) (__list__ )) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Return (Compare (Attribute self size) (__list__ Eq) (__list__ 0)))) (__list__ )) (FunctionDef delete_min (arguments (__list__ (arg self))) (__list__ (Expr STRING_8) (Assign (__list__ min_value) (Attribute (Attribute self min_node) val)) (If (Compare (Attribute self size) (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ (Attribute self size)) 0) (Assign (__list__ (Attribute self bottom_root)) None) (Assign (__list__ (Attribute self min_node)) None) (Return min_value))) (If (Compare (Attribute (Attribute self min_node) right) (__list__ Is) (__list__ None)) (__list__ (AugAssign (Attribute self size) Sub 1) (Assign (__list__ (Attribute self bottom_root)) (Attribute (Attribute self bottom_root) parent)) (Assign (__list__ (Attribute (Attribute self bottom_root) left)) None) (Assign (__list__ (Attribute self min_node)) (Attribute self bottom_root)) (Assign (__list__ i) (Attribute (Attribute self bottom_root) parent)) (While i (__list__ (If (Compare (Attribute i val) (__list__ Lt) (__list__ (Attribute (Attribute self min_node) val))) (__list__ (Assign (__list__ (Attribute self min_node)) i))) (Assign (__list__ i) (Attribute i parent)))) (Return min_value))) (Assign (__list__ bottom_of_new) (Attribute (Attribute self min_node) right)) (Assign (__list__ (Attribute bottom_of_new parent)) None) (Assign (__list__ min_of_new) bottom_of_new) (Assign (__list__ size_of_new) 1) (While (Attribute bottom_of_new left) (__list__ (Assign (__list__ size_of_new) (BinOp (BinOp size_of_new Mult 2) Add 1)) (Assign (__list__ bottom_of_new) (Attribute bottom_of_new left)) (If (Compare (Attribute bottom_of_new val) (__list__ Lt) (__list__ (Attribute min_of_new val))) (__list__ (Assign (__list__ min_of_new) bottom_of_new))))) (If (BoolOp And (__list__ (UnaryOp Not (Attribute (Attribute self min_node) left)) (UnaryOp Not (Attribute (Attribute self min_node) parent)))) (__list__ (Assign (__list__ (Attribute self size)) size_of_new) (Assign (__list__ (Attribute self bottom_root)) bottom_of_new) (Assign (__list__ (Attribute self min_node)) min_of_new) (Return min_value))) (Assign (__list__ new_heap) (Call BinomialHeap (__list__ (keyword bottom_root bottom_of_new) (keyword min_node min_of_new) (keyword heap_size size_of_new)))) (Assign (__list__ (Attribute self size)) (BinOp (BinOp (Attribute self size) Sub 1) Sub size_of_new)) (Assign (__list__ previous_node) (Attribute (Attribute self min_node) left)) (Assign (__list__ next_node) (Attribute (Attribute self min_node) parent)) (Assign (__list__ (Attribute self min_node)) (BoolOp Or (__list__ previous_node next_node))) (Assign (__list__ (Attribute self bottom_root)) next_node) (If previous_node (__list__ (Assign (__list__ (Attribute previous_node parent)) next_node) (Assign (__list__ (Attribute self bottom_root)) previous_node) (Assign (__list__ (Attribute self min_node)) previous_node) (While (Attribute (Attribute self bottom_root) left) (__list__ (Assign (__list__ (Attribute self bottom_root)) (Attribute (Attribute self bottom_root) left)) (If (Compare (Attribute (Attribute self bottom_root) val) (__list__ Lt) (__list__ (Attribute (Attribute self min_node) val))) (__list__ (Assign (__list__ (Attribute self min_node)) (Attribute self bottom_root)))))))) (If next_node (__list__ (Assign (__list__ (Attribute next_node left)) previous_node) (Assign (__list__ i) next_node) (While i (__list__ (If (Compare (Attribute i val) (__list__ Lt) (__list__ (Attribute (Attribute self min_node) val))) (__list__ (Assign (__list__ (Attribute self min_node)) i))) (Assign (__list__ i) (Attribute i parent)))))) (Expr (Call (Attribute self merge_heaps) (__list__ new_heap))) (Return min_value)) (__list__ )) (FunctionDef pre_order (arguments (__list__ (arg self))) (__list__ (Expr STRING_9) (Assign (__list__ top_root) (Attribute self bottom_root)) (While (Attribute top_root parent) (__list__ (Assign (__list__ top_root) (Attribute top_root parent)))) (Assign (__list__ heap_pre_order) List) (Expr (Call (Attribute self __traversal) (__list__ top_root heap_pre_order))) (Return heap_pre_order)) (__list__ )) (FunctionDef __traversal (arguments (__list__ (arg self) (arg curr_node) (arg preorder) (arg level)) (__list__ 0)) (__list__ (Expr STRING_10) (If curr_node (__list__ (Expr (Call (Attribute preorder append) (__list__ (Tuple (__list__ (Attribute curr_node val) level))))) (Expr (Call (Attribute self __traversal) (__list__ (Attribute curr_node left) preorder (BinOp level Add 1)))) (Expr (Call (Attribute self __traversal) (__list__ (Attribute curr_node right) preorder (BinOp level Add 1))))) (__list__ (Expr (Call (Attribute preorder append) (__list__ (Tuple (__list__ STRING_11 level)))))))) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_12) (If (Call (Attribute self is_empty)) (__list__ (Return STRING_10))) (Assign (__list__ preorder_heap) (Call (Attribute self pre_order))) (Return (Call (Attribute STRING_13 join) (__list__ (GeneratorExp (BinOp (BinOp STRING_2 Mult level) Add (Call str (__list__ value))) (__list__ (comprehension (Tuple (__list__ value level)) preorder_heap 0))))))) (__list__ )))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ClassDef BinaryHeap (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self __heap)) (List (__list__ 0))) (Assign (__list__ (Attribute self __size)) 0)) (__list__ )) (FunctionDef __swap_up (arguments (__list__ (arg self) (arg i int))) (__list__ (Expr STRING_1) (Assign (__list__ temporary) (Subscript (Attribute self __heap) i)) (While (Compare (BinOp i FloorDiv 2) (__list__ Gt) (__list__ 0)) (__list__ (If (Compare (Subscript (Attribute self __heap) i) (__list__ Gt) (__list__ (Subscript (Attribute self __heap) (BinOp i FloorDiv 2)))) (__list__ (Assign (__list__ (Subscript (Attribute self __heap) i)) (Subscript (Attribute self __heap) (BinOp i FloorDiv 2))) (Assign (__list__ (Subscript (Attribute self __heap) (BinOp i FloorDiv 2))) temporary))) (AugAssign i FloorDiv 2)))) (__list__ ) None) (FunctionDef insert (arguments (__list__ (arg self) (arg value int))) (__list__ (Expr STRING_2) (Expr (Call (Attribute (Attribute self __heap) append) (__list__ value))) (AugAssign (Attribute self __size) Add 1) (Expr (Call (Attribute self __swap_up) (__list__ (Attribute self __size))))) (__list__ ) None) (FunctionDef __swap_down (arguments (__list__ (arg self) (arg i int))) (__list__ (Expr STRING_3) (While (Compare (Attribute self __size) (__list__ GtE) (__list__ (BinOp 2 Mult i))) (__list__ (If (Compare (BinOp (BinOp 2 Mult i) Add 1) (__list__ Gt) (__list__ (Attribute self __size))) (__list__ (Assign (__list__ bigger_child) (BinOp 2 Mult i))) (__list__ (If (Compare (Subscript (Attribute self __heap) (BinOp 2 Mult i)) (__list__ Gt) (__list__ (Subscript (Attribute self __heap) (BinOp (BinOp 2 Mult i) Add 1)))) (__list__ (Assign (__list__ bigger_child) (BinOp 2 Mult i))) (__list__ (Assign (__list__ bigger_child) (BinOp (BinOp 2 Mult i) Add 1)))))) (Assign (__list__ temporary) (Subscript (Attribute self __heap) i)) (If (Compare (Subscript (Attribute self __heap) i) (__list__ Lt) (__list__ (Subscript (Attribute self __heap) bigger_child))) (__list__ (Assign (__list__ (Subscript (Attribute self __heap) i)) (Subscript (Attribute self __heap) bigger_child)) (Assign (__list__ (Subscript (Attribute self __heap) bigger_child)) temporary))) (Assign (__list__ i) bigger_child)))) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Assign (__list__ max_value) (Subscript (Attribute self __heap) 1)) (Assign (__list__ (Subscript (Attribute self __heap) 1)) (Subscript (Attribute self __heap) (Attribute self __size))) (AugAssign (Attribute self __size) Sub 1) (Expr (Call (Attribute (Attribute self __heap) pop))) (Expr (Call (Attribute self __swap_down) (__list__ 1))) (Return max_value)) (__list__ ) int) (FunctionDef get_list (arguments (__list__ (arg self))) (__list__ (Return (Subscript (Attribute self __heap) (Slice 1)))) (__list__ property)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (Return (Attribute self __size))) (__list__ )))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Assign (__list__ binary_heap) (Call BinaryHeap)) (Expr (Call (Attribute binary_heap insert) (__list__ 6))) (Expr (Call (Attribute binary_heap insert) (__list__ 10))) (Expr (Call (Attribute binary_heap insert) (__list__ 15))) (Expr (Call (Attribute binary_heap insert) (__list__ 12))) (Expr (Call print (__list__ (Call (Attribute binary_heap pop))))) (Expr (Call print (__list__ (Call (Attribute binary_heap pop))))) (Expr (Call print (__list__ (Attribute binary_heap get_list)))) (Expr (Call print (__list__ (Call len (__list__ binary_heap))))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef find_median_sorted_arrays (arguments (__list__ (arg nums1 (Subscript list int)) (arg nums2 (Subscript list int)))) (__list__ (Expr STRING_1) (If (BoolOp And (__list__ (UnaryOp Not nums1) (UnaryOp Not nums2))) (__list__ (Raise (Call ValueError (__list__ STRING_2))))) (Assign (__list__ merged) (Call sorted (__list__ (BinOp nums1 Add nums2)))) (Assign (__list__ total) (Call len (__list__ merged))) (If (Compare (BinOp total Mod 2) (__list__ Eq) (__list__ 1)) (__list__ (Return (Call float (__list__ (Subscript merged (BinOp total FloorDiv 2))))))) (Assign (__list__ middle1) (Subscript merged (BinOp (BinOp total FloorDiv 2) Sub 1))) (Assign (__list__ middle2) (Subscript merged (BinOp total FloorDiv 2))) (Return (BinOp (BinOp (Call float (__list__ middle1)) Add (Call float (__list__ middle2))) Div 2.0))) (__list__ ) float) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef partition (arguments (__list__ (arg arr (Subscript list int)) (arg low int) (arg high int))) (__list__ (Expr STRING_1) (Assign (__list__ pivot) (Subscript arr high)) (Assign (__list__ i) (BinOp low Sub 1)) (For j (Call range (__list__ low high)) (__list__ (If (Compare (Subscript arr j) (__list__ GtE) (__list__ pivot)) (__list__ (AugAssign i Add 1) (Assign (__list__ (Tuple (__list__ (Subscript arr i) (Subscript arr j)))) (Tuple (__list__ (Subscript arr j) (Subscript arr i)))))))) (Assign (__list__ (Tuple (__list__ (Subscript arr (BinOp i Add 1)) (Subscript arr high)))) (Tuple (__list__ (Subscript arr high) (Subscript arr (BinOp i Add 1))))) (Return (BinOp i Add 1))) (__list__ ) int) (FunctionDef kth_largest_element (arguments (__list__ (arg arr (Subscript list int)) (arg position int))) (__list__ (Expr STRING_2) (If (UnaryOp Not arr) (__list__ (Return (UnaryOp USub 1)))) (If (UnaryOp Not (Call isinstance (__list__ position int))) (__list__ (Raise (Call ValueError (__list__ STRING_3))))) (If (UnaryOp Not (Compare 1 (__list__ LtE LtE) (__list__ position (Call len (__list__ arr))))) (__list__ (Raise (Call ValueError (__list__ STRING_4))))) (Assign (__list__ (Tuple (__list__ low high))) (Tuple (__list__ 0 (BinOp (Call len (__list__ arr)) Sub 1)))) (While (Compare low (__list__ LtE) (__list__ high)) (__list__ (If (BoolOp Or (__list__ (Compare low (__list__ Gt) (__list__ (BinOp (Call len (__list__ arr)) Sub 1))) (Compare high (__list__ Lt) (__list__ 0)))) (__list__ (Return (UnaryOp USub 1)))) (Assign (__list__ pivot_index) (Call partition (__list__ arr low high))) (If (Compare pivot_index (__list__ Eq) (__list__ (BinOp position Sub 1))) (__list__ (Return (Subscript arr pivot_index))) (__list__ (If (Compare pivot_index (__list__ Gt) (__list__ (BinOp position Sub 1))) (__list__ (Assign (__list__ high) (BinOp pivot_index Sub 1))) (__list__ (Assign (__list__ low) (BinOp pivot_index Add 1)))))))) (Return (UnaryOp USub 1))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom math (__list__ (alias log2)) 0) (FunctionDef build_sparse_table (arguments (__list__ (arg number_list (Subscript list int)))) (__list__ (Expr STRING_1) (If (UnaryOp Not number_list) (__list__ (Raise (Call ValueError (__list__ STRING_2))))) (Assign (__list__ length) (Call len (__list__ number_list))) (Assign (__list__ row) (BinOp (Call int (__list__ (Call log2 (__list__ length)))) Add 1)) (Assign (__list__ sparse_table) (ListComp (ListComp 0 (__list__ (comprehension i (Call range (__list__ length)) 0))) (__list__ (comprehension j (Call range (__list__ row)) 0)))) (For (Tuple (__list__ i value)) (Call enumerate (__list__ number_list)) (__list__ (Assign (__list__ (Subscript (Subscript sparse_table 0) i)) value))) (Assign (__list__ j) 1) (While (Compare (BinOp 1 LShift j) (__list__ LtE) (__list__ length)) (__list__ (Assign (__list__ i) 0) (While (Compare (BinOp (BinOp i Add (BinOp 1 LShift j)) Sub 1) (__list__ Lt) (__list__ length)) (__list__ (Assign (__list__ (Subscript (Subscript sparse_table j) i)) (Call min (__list__ (Subscript (Subscript sparse_table (BinOp j Sub 1)) (BinOp i Add (BinOp 1 LShift (BinOp j Sub 1)))) (Subscript (Subscript sparse_table (BinOp j Sub 1)) i)))) (AugAssign i Add 1))) (AugAssign j Add 1))) (Return sparse_table)) (__list__ ) (Subscript list (Subscript list int))) (FunctionDef query (arguments (__list__ (arg sparse_table (Subscript list (Subscript list int))) (arg left_bound int) (arg right_bound int))) (__list__ (Expr STRING_3) (If (BoolOp Or (__list__ (Compare left_bound (__list__ Lt) (__list__ 0)) (Compare right_bound (__list__ GtE) (__list__ (Call len (__list__ (Subscript sparse_table 0))))))) (__list__ (Raise (Call IndexError (__list__ STRING_9))))) (Assign (__list__ j) (Call int (__list__ (Call log2 (__list__ (BinOp (BinOp right_bound Sub left_bound) Add 1)))))) (Return (Call min (__list__ (Subscript (Subscript sparse_table j) (BinOp (BinOp right_bound Sub (BinOp 1 LShift j)) Add 1)) (Subscript (Subscript sparse_table j) left_bound))))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_4 (FormattedValue (Call query (__list__ (Call build_sparse_table (__list__ (List (__list__ 3 1 9)))) 2 2)) 114)))))))))",
    "(ProgramStatements (ImportFrom itertools (__list__ (alias combinations)) 0) (FunctionDef find_triplets_with_0_sum (arguments (__list__ (arg nums (Subscript list int)))) (__list__ (Expr STRING_0) (Return (ListComp (Call list (__list__ x)) (__list__ (comprehension x (Call sorted (__list__ (SetComp abc (__list__ (comprehension abc (Call combinations (__list__ (Call sorted (__list__ nums)) 3)) (__list__ (UnaryOp Not (Call sum (__list__ abc)))) 0))))) 0))))) (__list__ ) (Subscript list (Subscript list int))) (FunctionDef find_triplets_with_0_sum_hashing (arguments (__list__ (arg arr (Subscript list int)))) (__list__ (Expr STRING_1) (Assign (__list__ target_sum) 0) (Assign (__list__ output_arr) List) (For (Tuple (__list__ index item)) (Call enumerate (__list__ (Subscript arr (Slice (UnaryOp USub 2))))) (__list__ (Assign (__list__ set_initialize) (Call set)) (Assign (__list__ current_sum) (BinOp target_sum Sub item)) (For other_item (Subscript arr (Slice (BinOp index Add 1))) (__list__ (Assign (__list__ required_value) (BinOp current_sum Sub other_item)) (If (Compare required_value (__list__ In) (__list__ set_initialize)) (__list__ (Assign (__list__ combination_array) (Call sorted (__list__ (List (__list__ item other_item required_value))))) (If (Compare combination_array (__list__ NotIn) (__list__ output_arr)) (__list__ (Expr (Call (Attribute output_arr append) (__list__ combination_array))))))) (Expr (Call (Attribute set_initialize add) (__list__ other_item))))))) (Return output_arr)) (__list__ ) (Subscript list (Subscript list int))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements )",
    "(ProgramStatements (FunctionDef permute_recursive (arguments (__list__ (arg nums (Subscript list int)))) (__list__ (Expr STRING_0) (AnnAssign result (Subscript list (Subscript list int)) List 1) (If (Compare (Call len (__list__ nums)) (__list__ Eq) (__list__ 0)) (__list__ (Return (List (__list__ List))))) (For _ (Call range (__list__ (Call len (__list__ nums)))) (__list__ (Assign (__list__ n) (Call (Attribute nums pop) (__list__ 0))) (Assign (__list__ permutations) (Call permute_recursive (__list__ (Call (Attribute nums copy))))) (For perm permutations (__list__ (Expr (Call (Attribute perm append) (__list__ n))))) (Expr (Call (Attribute result extend) (__list__ permutations))) (Expr (Call (Attribute nums append) (__list__ n))))) (Return result)) (__list__ ) (Subscript list (Subscript list int))) (FunctionDef permute_backtrack (arguments (__list__ (arg nums (Subscript list int)))) (__list__ (Expr STRING_1) (FunctionDef backtrack (arguments (__list__ (arg start int))) (__list__ (If (Compare start (__list__ Eq) (__list__ (BinOp (Call len (__list__ nums)) Sub 1))) (__list__ (Expr (Call (Attribute output append) (__list__ (Subscript nums Slice))))) (__list__ (For i (Call range (__list__ start (Call len (__list__ nums)))) (__list__ (Assign (__list__ (Tuple (__list__ (Subscript nums start) (Subscript nums i)))) (Tuple (__list__ (Subscript nums i) (Subscript nums start)))) (Expr (Call backtrack (__list__ (BinOp start Add 1)))) (Assign (__list__ (Tuple (__list__ (Subscript nums start) (Subscript nums i)))) (Tuple (__list__ (Subscript nums i) (Subscript nums start))))))))) (__list__ ) None) (AnnAssign output (Subscript list (Subscript list int)) List 1) (Expr (Call backtrack (__list__ 0))) (Return output)) (__list__ ) (Subscript list (Subscript list int))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Assign (__list__ result) (Call permute_backtrack (__list__ (List (__list__ 1 2 3))))) (Expr (Call print (__list__ result))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef equilibrium_index (arguments (__list__ (arg arr (Subscript list int)))) (__list__ (Expr STRING_1) (Assign (__list__ total_sum) (Call sum (__list__ arr))) (Assign (__list__ left_sum) 0) (For (Tuple (__list__ i value)) (Call enumerate (__list__ arr)) (__list__ (AugAssign total_sum Sub value) (If (Compare left_sum (__list__ Eq) (__list__ total_sum)) (__list__ (Return i))) (AugAssign left_sum Add value))) (Return (UnaryOp USub 1))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Index2DArrayIterator (__list__ (AnnAssign matrix (Subscript list (Subscript list int)) 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (For row (Attribute self matrix) (__list__ (Expr (YieldFrom row))))) (__list__ ) (Subscript Iterator int))) (__list__ dataclass)) (FunctionDef index_2d_array_in_1d (arguments (__list__ (arg array (Subscript list (Subscript list int))) (arg index int))) (__list__ (Expr STRING_2) (Assign (__list__ rows) (Call len (__list__ array))) (Assign (__list__ cols) (Call len (__list__ (Subscript array 0)))) (If (BoolOp Or (__list__ (Compare rows (__list__ Eq) (__list__ 0)) (Compare cols (__list__ Eq) (__list__ 0)))) (__list__ (Raise (Call ValueError (__list__ STRING_3))))) (If (BoolOp Or (__list__ (Compare index (__list__ Lt) (__list__ 0)) (Compare index (__list__ GtE) (__list__ (BinOp rows Mult cols))))) (__list__ (Raise (Call ValueError (__list__ STRING_4))))) (Return (Subscript (Subscript array (BinOp index FloorDiv cols)) (BinOp index Mod cols)))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef product_sum (arguments (__list__ (arg arr (Subscript list (BinOp int BitOr list))) (arg depth int))) (__list__ (Expr STRING_1) (Assign (__list__ total_sum) 0) (For ele arr (__list__ (AugAssign total_sum Add (IfExp (Call isinstance (__list__ ele list)) (Call product_sum (__list__ ele (BinOp depth Add 1))) ele)))) (Return (BinOp total_sum Mult depth))) (__list__ ) int) (FunctionDef product_sum_array (arguments (__list__ (arg array (Subscript list (BinOp int BitOr list))))) (__list__ (Expr STRING_2) (Return (Call product_sum (__list__ array 1)))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (FunctionDef is_monotonic (arguments (__list__ (arg nums (Subscript list int)))) (__list__ (Expr STRING_0) (Return (BoolOp Or (__list__ (Call all (__list__ (GeneratorExp (Compare (Subscript nums i) (__list__ LtE) (__list__ (Subscript nums (BinOp i Add 1)))) (__list__ (comprehension i (Call range (__list__ (BinOp (Call len (__list__ nums)) Sub 1))) 0))))) (Call all (__list__ (GeneratorExp (Compare (Subscript nums i) (__list__ GtE) (__list__ (Subscript nums (BinOp i Add 1)))) (__list__ (comprehension i (Call range (__list__ (BinOp (Call len (__list__ nums)) Sub 1))) 0))))))))) (__list__ ) bool) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call print (__list__ (Call is_monotonic (__list__ (List (__list__ 1 2 2 3))))))) (Expr (Call print (__list__ (Call is_monotonic (__list__ (List (__list__ 6 5 4 4))))))) (Expr (Call print (__list__ (Call is_monotonic (__list__ (List (__list__ 1 3 2))))))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom itertools (__list__ (alias combinations)) 0) (FunctionDef pairs_with_sum (arguments (__list__ (arg arr list) (arg req_sum int))) (__list__ (Expr STRING_1) (Return (Call len (__list__ (ListComp 1 (__list__ (comprehension (Tuple (__list__ a b)) (Call combinations (__list__ arr 2)) (__list__ (Compare (BinOp a Add b) (__list__ Eq) (__list__ req_sum))) 0))))))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef PrefixSum (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg array (Subscript list int)))) (__list__ (Assign (__list__ len_array) (Call len (__list__ array))) (Assign (__list__ (Attribute self prefix_sum)) (BinOp (List (__list__ 0)) Mult len_array)) (If (Compare len_array (__list__ Gt) (__list__ 0)) (__list__ (Assign (__list__ (Subscript (Attribute self prefix_sum) 0)) (Subscript array 0)))) (For i (Call range (__list__ 1 len_array)) (__list__ (Assign (__list__ (Subscript (Attribute self prefix_sum) i)) (BinOp (Subscript (Attribute self prefix_sum) (BinOp i Sub 1)) Add (Subscript array i)))))) (__list__ ) None) (FunctionDef get_sum (arguments (__list__ (arg self) (arg start int) (arg end int))) (__list__ (Expr STRING_1) (If (Compare start (__list__ Eq) (__list__ 0)) (__list__ (Return (Subscript (Attribute self prefix_sum) end)))) (Return (BinOp (Subscript (Attribute self prefix_sum) end) Sub (Subscript (Attribute self prefix_sum) (BinOp start Sub 1))))) (__list__ ) int) (FunctionDef contains_sum (arguments (__list__ (arg self) (arg target_sum int))) (__list__ (Expr STRING_2) (Assign (__list__ sums) (Set (__list__ 0))) (For sum_item (Attribute self prefix_sum) (__list__ (If (Compare (BinOp sum_item Sub target_sum) (__list__ In) (__list__ sums)) (__list__ (Return True))) (Expr (Call (Attribute sums add) (__list__ sum_item))))) (Return False)) (__list__ ) bool))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias random))) (Import (__list__ (alias time))) (FunctionDef cross (arguments (__list__ (arg items_a) (arg items_b))) (__list__ (Expr STRING_1) (Return (ListComp (BinOp a Add b) (__list__ (comprehension a items_a 0) (comprehension b items_b 0))))) (__list__ )) (Assign (__list__ digits) STRING_2) (Assign (__list__ rows) STRING_3) (Assign (__list__ cols) digits) (Assign (__list__ squares) (Call cross (__list__ rows cols))) (Assign (__list__ unitlist) (BinOp (BinOp (ListComp (Call cross (__list__ rows c)) (__list__ (comprehension c cols 0))) Add (ListComp (Call cross (__list__ r cols)) (__list__ (comprehension r rows 0)))) Add (ListComp (Call cross (__list__ rs cs)) (__list__ (comprehension rs (Tuple (__list__ STRING_4 STRING_5 STRING_6)) 0) (comprehension cs (Tuple (__list__ STRING_7 STRING_8 STRING_9)) 0))))) (Assign (__list__ units) (DictComp s (ListComp u (__list__ (comprehension u unitlist (__list__ (Compare s (__list__ In) (__list__ u))) 0))) (__list__ (comprehension s squares 0)))) (Assign (__list__ peers) (DictComp s (BinOp (Call set (__list__ (Call sum (__list__ (Subscript units s) List)))) Sub (Set (__list__ s))) (__list__ (comprehension s squares 0)))) (FunctionDef test arguments (__list__ (Expr STRING_10) (Assert (Compare (Call len (__list__ squares)) (__list__ Eq) (__list__ 81))) (Assert (Compare (Call len (__list__ unitlist)) (__list__ Eq) (__list__ 27))) (Assert (Call all (__list__ (GeneratorExp (Compare (Call len (__list__ (Subscript units s))) (__list__ Eq) (__list__ 3)) (__list__ (comprehension s squares 0)))))) (Assert (Call all (__list__ (GeneratorExp (Compare (Call len (__list__ (Subscript peers s))) (__list__ Eq) (__list__ 20)) (__list__ (comprehension s squares 0)))))) (Assert (Compare (Subscript units STRING_11) (__list__ Eq) (__list__ (List (__list__ (List (__list__ STRING_12 STRING_13 STRING_11 STRING_14 STRING_15 STRING_16 STRING_17 STRING_18 STRING_19)) (List (__list__ STRING_20 STRING_11 STRING_21 STRING_22 STRING_23 STRING_24 STRING_25 STRING_26 STRING_27)) (List (__list__ STRING_28 STRING_12 STRING_29 STRING_30 STRING_13 STRING_31 STRING_20 STRING_11 STRING_21))))))) (Assert (Compare (Subscript peers STRING_11) (__list__ Eq) (__list__ (Set (__list__ STRING_12 STRING_13 STRING_14 STRING_15 STRING_16 STRING_17 STRING_18 STRING_19 STRING_20 STRING_21 STRING_22 STRING_23 STRING_24 STRING_25 STRING_26 STRING_27 STRING_28 STRING_29 STRING_30 STRING_31))))) (Expr (Call print (__list__ STRING_32)))) (__list__ )) (FunctionDef parse_grid (arguments (__list__ (arg grid))) (__list__ (Expr STRING_33) (Assign (__list__ values) (DictComp s digits (__list__ (comprehension s squares 0)))) (For (Tuple (__list__ s d)) (Call (Attribute (Call grid_values (__list__ grid)) items)) (__list__ (If (BoolOp And (__list__ (Compare d (__list__ In) (__list__ digits)) (UnaryOp Not (Call assign (__list__ values s d))))) (__list__ (Return False))))) (Return values)) (__list__ )) (FunctionDef grid_values (arguments (__list__ (arg grid))) (__list__ (Expr STRING_34) (Assign (__list__ chars) (ListComp c (__list__ (comprehension c grid (__list__ (BoolOp Or (__list__ (Compare c (__list__ In) (__list__ digits)) (Compare c (__list__ In) (__list__ STRING_35))))) 0)))) (Assert (Compare (Call len (__list__ chars)) (__list__ Eq) (__list__ 81))) (Return (Call dict (__list__ (Call zip (__list__ squares chars)))))) (__list__ )) (FunctionDef assign (arguments (__list__ (arg values) (arg s) (arg d))) (__list__ (Expr STRING_36) (Assign (__list__ other_values) (Call (Attribute (Subscript values s) replace) (__list__ d STRING_10))) (If (Call all (__list__ (GeneratorExp (Call eliminate (__list__ values s d2)) (__list__ (comprehension d2 other_values 0))))) (__list__ (Return values)) (__list__ (Return False)))) (__list__ )) (FunctionDef eliminate (arguments (__list__ (arg values) (arg s) (arg d))) (__list__ (Expr STRING_37) (If (Compare d (__list__ NotIn) (__list__ (Subscript values s))) (__list__ (Return values))) (Assign (__list__ (Subscript values s)) (Call (Attribute (Subscript values s) replace) (__list__ d STRING_10))) (If (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 0)) (__list__ (Return False)) (__list__ (If (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ d2) (Subscript values s)) (If (UnaryOp Not (Call all (__list__ (GeneratorExp (Call eliminate (__list__ values s2 d2)) (__list__ (comprehension s2 (Subscript peers s) 0)))))) (__list__ (Return False))))))) (For u (Subscript units s) (__list__ (Assign (__list__ dplaces) (ListComp s (__list__ (comprehension s u (__list__ (Compare d (__list__ In) (__list__ (Subscript values s)))) 0)))) (If (Compare (Call len (__list__ dplaces)) (__list__ Eq) (__list__ 0)) (__list__ (Return False)) (__list__ (If (BoolOp And (__list__ (Compare (Call len (__list__ dplaces)) (__list__ Eq) (__list__ 1)) (UnaryOp Not (Call assign (__list__ values (Subscript dplaces 0) d))))) (__list__ (Return False))))))) (Return values)) (__list__ )) (FunctionDef display (arguments (__list__ (arg values))) (__list__ (Expr STRING_38) (Assign (__list__ width) (BinOp 1 Add (Call max (__list__ (GeneratorExp (Call len (__list__ (Subscript values s))) (__list__ (comprehension s squares 0))))))) (Assign (__list__ line) (Call (Attribute STRING_1 join) (__list__ (BinOp (List (__list__ (BinOp STRING_2 Mult (BinOp width Mult 3)))) Mult 3)))) (For r rows (__list__ (Expr (Call print (__list__ (Call (Attribute STRING_10 join) (__list__ (GeneratorExp (BinOp (Call (Attribute (Subscript values (BinOp r Add c)) center) (__list__ width)) Add (IfExp (Compare c (__list__ In) (__list__ STRING_39)) STRING_11 STRING_10)) (__list__ (comprehension c cols 0)))))))) (If (Compare r (__list__ In) (__list__ STRING_40)) (__list__ (Expr (Call print (__list__ line))))))) (Expr (Call print))) (__list__ )) (FunctionDef solve (arguments (__list__ (arg grid))) (__list__ (Return (Call search (__list__ (Call parse_grid (__list__ grid)))))) (__list__ )) (FunctionDef some (arguments (__list__ (arg seq))) (__list__ (Expr STRING_41) (For e seq (__list__ (If e (__list__ (Return e))))) (Return False)) (__list__ )) (FunctionDef search (arguments (__list__ (arg values))) (__list__ (Expr STRING_42) (If (Compare values (__list__ Is) (__list__ False)) (__list__ (Return False))) (If (Call all (__list__ (GeneratorExp (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 1)) (__list__ (comprehension s squares 0))))) (__list__ (Return values))) (Assign (__list__ (Tuple (__list__ n s))) (Call min (__list__ (GeneratorExp (Tuple (__list__ (Call len (__list__ (Subscript values s))) s)) (__list__ (comprehension s squares (__list__ (Compare (Call len (__list__ (Subscript values s))) (__list__ Gt) (__list__ 1))) 0)))))) (Return (Call some (__list__ (GeneratorExp (Call search (__list__ (Call assign (__list__ (Call (Attribute values copy)) s d)))) (__list__ (comprehension d (Subscript values s) 0))))))) (__list__ )) (FunctionDef solve_all (arguments (__list__ (arg grids) (arg name) (arg showif)) (__list__ STRING_10 0.0)) (__list__ (Expr STRING_43) (FunctionDef time_solve (arguments (__list__ (arg grid))) (__list__ (Assign (__list__ start) (Call (Attribute time monotonic))) (Assign (__list__ values) (Call solve (__list__ grid))) (Assign (__list__ t) (BinOp (Call (Attribute time monotonic)) Sub start)) (If (BoolOp And (__list__ (Compare showif (__list__ IsNot) (__list__ None)) (Compare t (__list__ Gt) (__list__ showif)))) (__list__ (Expr (Call display (__list__ (Call grid_values (__list__ grid))))) (If values (__list__ (Expr (Call display (__list__ values))))) (Expr (Call print (__list__ (BinOp STRING_44 Mod t)))))) (Return (Tuple (__list__ t (Call solved (__list__ values)))))) (__list__ )) (Assign (__list__ (Tuple (__list__ times results))) (Call zip (__list__ (Starred (ListComp (Call time_solve (__list__ grid)) (__list__ (comprehension grid grids 0))))))) (If (Compare (NamedExpr n (Call len (__list__ grids))) (__list__ Gt) (__list__ 1)) (__list__ (Expr (Call print (__list__ (BinOp STRING_45 Mod (Tuple (__list__ (Call sum (__list__ results)) n name (BinOp (Call sum (__list__ times)) Div n) (BinOp n Div (Call sum (__list__ times))) (Call max (__list__ times))))))))))) (__list__ )) (FunctionDef solved (arguments (__list__ (arg values))) (__list__ (Expr STRING_46) (FunctionDef unitsolved (arguments (__list__ (arg unit))) (__list__ (Return (Compare (SetComp (Subscript values s) (__list__ (comprehension s unit 0))) (__list__ Eq) (__list__ (Call set (__list__ digits)))))) (__list__ )) (Return (BoolOp And (__list__ (Compare values (__list__ IsNot) (__list__ False)) (Call all (__list__ (GeneratorExp (Call unitsolved (__list__ unit)) (__list__ (comprehension unit unitlist 0))))))))) (__list__ )) (FunctionDef from_file (arguments (__list__ (arg filename) (arg sep)) (__list__ STRING_13)) (__list__ (Expr STRING_47) (Return (Call (Attribute (Call (Attribute (Call (Attribute (Call open (__list__ filename)) read)) strip)) split) (__list__ sep)))) (__list__ )) (FunctionDef random_puzzle (arguments (__list__ (arg assignments)) (__list__ 17)) (__list__ (Expr STRING_48) (Assign (__list__ values) (DictComp s digits (__list__ (comprehension s squares 0)))) (For s (Call shuffled (__list__ squares)) (__list__ (If (UnaryOp Not (Call assign (__list__ values s (Call (Attribute random choice) (__list__ (Subscript values s)))))) (__list__ Break)) (Assign (__list__ ds) (ListComp (Subscript values s) (__list__ (comprehension s squares (__list__ (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 1))) 0)))) (If (BoolOp And (__list__ (Compare (Call len (__list__ ds)) (__list__ GtE) (__list__ assignments)) (Compare (Call len (__list__ (Call set (__list__ ds)))) (__list__ GtE) (__list__ 8)))) (__list__ (Return (Call (Attribute STRING_10 join) (__list__ (GeneratorExp (IfExp (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 1)) (Subscript values s) STRING_12) (__list__ (comprehension s squares 0)))))))))) (Return (Call random_puzzle (__list__ assignments)))) (__list__ )) (FunctionDef shuffled (arguments (__list__ (arg seq))) (__list__ (Expr STRING_49) (Assign (__list__ seq) (Call list (__list__ seq))) (Expr (Call (Attribute random shuffle) (__list__ seq))) (Return seq)) (__list__ )) (Assign (__list__ grid1) STRING_50) (Assign (__list__ grid2) STRING_51) (Assign (__list__ hard1) STRING_52) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call test)) (Expr (Call solve_all (__list__ (ListComp (Call random_puzzle) (__list__ (comprehension _ (Call range (__list__ 99)) 0))) STRING_53 100.0))) (For puzzle (Tuple (__list__ grid1 grid2)) (__list__ (Expr (Call display (__list__ (Call parse_grid (__list__ puzzle))))) (Assign (__list__ start) (Call (Attribute time monotonic))) (Expr (Call solve (__list__ puzzle))) (Assign (__list__ t) (BinOp (Call (Attribute time monotonic)) Sub start)) (Expr (Call print (__list__ (BinOp STRING_54 Mod t)))))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg data Any))) (__list__ (AnnAssign (Attribute self data) Any data 0) (AnnAssign (Attribute self next) (BinOp Node BitOr None) None 0)) (__list__ ) None) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (JoinedStr (__list__ (FormattedValue (Attribute self data) -1))))) (__list__ ) str))) (ClassDef LinkedQueue (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self front) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self rear) (BinOp Node BitOr None) None 0)) (__list__ ) None) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ node) (Attribute self front)) (While node (__list__ (Expr (Yield (Attribute node data))) (Assign (__list__ node) (Attribute node next))))) (__list__ ) (Subscript Iterator Any)) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call len (__list__ (Call tuple (__list__ (Call iter (__list__ self)))))))) (__list__ ) int) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (Call (Attribute STRING_8 join) (__list__ (GeneratorExp (Call str (__list__ item)) (__list__ (comprehension item self 0))))))) (__list__ ) str) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Return (Compare (Call len (__list__ self)) (__list__ Eq) (__list__ 0)))) (__list__ ) bool) (FunctionDef put (arguments (__list__ (arg self) (arg item Any))) (__list__ (Expr STRING_5) (Assign (__list__ node) (Call Node (__list__ item))) (If (Call (Attribute self is_empty)) (__list__ (Assign (__list__ (Attribute self front) (Attribute self rear)) node)) (__list__ (Assert (Call isinstance (__list__ (Attribute self rear) Node))) (Assign (__list__ (Attribute (Attribute self rear) next)) node) (Assign (__list__ (Attribute self rear)) node)))) (__list__ ) None) (FunctionDef get (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (If (Call (Attribute self is_empty)) (__list__ (Raise (Call IndexError (__list__ STRING_7))))) (Assert (Call isinstance (__list__ (Attribute self front) Node))) (Assign (__list__ node) (Attribute self front)) (Assign (__list__ (Attribute self front)) (Attribute (Attribute self front) next)) (If (Compare (Attribute self front) (__list__ Is) (__list__ None)) (__list__ (Assign (__list__ (Attribute self rear)) None))) (Return (Attribute node data))) (__list__ ) Any) (FunctionDef clear (arguments (__list__ (arg self))) (__list__ (Expr STRING_8) (Assign (__list__ (Attribute self front) (Attribute self rear)) None)) (__list__ ) None))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom collections.abc (__list__ (alias Iterable)) 0) (ImportFrom typing (__list__ (alias Generic) (alias TypeVar)) 0) (Assign (__list__ _T) (Call TypeVar (__list__ STRING_1))) (ClassDef QueueByTwoStacks (__list__ (Subscript Generic _T)) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg iterable (BinOp (Subscript Iterable _T) BitOr None))) (__list__ None)) (__list__ (Expr STRING_2) (AnnAssign (Attribute self _stack1) (Subscript list _T) (Call list (__list__ (BoolOp Or (__list__ iterable List)))) 0) (AnnAssign (Attribute self _stack2) (Subscript list _T) List 0)) (__list__ ) None) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (BinOp (Call len (__list__ (Attribute self _stack1))) Add (Call len (__list__ (Attribute self _stack2)))))) (__list__ ) int) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Return (JoinedStr (__list__ STRING_5 (FormattedValue (Call tuple (__list__ (BinOp (Subscript (Attribute self _stack2) (Slice (UnaryOp USub 1))) Add (Attribute self _stack1)))) -1) STRING_3)))) (__list__ ) str) (FunctionDef put (arguments (__list__ (arg self) (arg item _T))) (__list__ (Expr STRING_6) (Expr (Call (Attribute (Attribute self _stack1) append) (__list__ item)))) (__list__ ) None) (FunctionDef get (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (Assign (__list__ stack1_pop) (Attribute (Attribute self _stack1) pop)) (Assign (__list__ stack2_append) (Attribute (Attribute self _stack2) append)) (If (UnaryOp Not (Attribute self _stack2)) (__list__ (While (Attribute self _stack1) (__list__ (Expr (Call stack2_append (__list__ (Call stack1_pop)))))))) (If (UnaryOp Not (Attribute self _stack2)) (__list__ (Raise (Call IndexError (__list__ STRING_8))))) (Return (Call (Attribute (Attribute self _stack2) pop)))) (__list__ ) _T))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom collections.abc (__list__ (alias Iterable)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef Deque (__list__ (Expr STRING_1) (Assign (__list__ __slots__) (Tuple (__list__ STRING_2 STRING_3 STRING_4))) (ClassDef _Node (__list__ (Expr STRING_5) (AnnAssign val Any None 1) (AnnAssign next_node (BinOp (Attribute Deque _Node) BitOr None) None 1) (AnnAssign prev_node (BinOp (Attribute Deque _Node) BitOr None) None 1)) (__list__ dataclass)) (ClassDef _Iterator (__list__ (Expr STRING_6) (Assign (__list__ __slots__) (Tuple (__list__ STRING_7))) (FunctionDef __init__ (arguments (__list__ (arg self) (arg cur (BinOp (Attribute Deque _Node) BitOr None)))) (__list__ (Assign (__list__ (Attribute self _cur)) cur)) (__list__ ) None) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_8) (Return self)) (__list__ ) (Attribute Deque _Iterator)) (FunctionDef __next__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_9) (If (Compare (Attribute self _cur) (__list__ Is) (__list__ None)) (__list__ (Raise StopIteration))) (Assign (__list__ val) (Attribute (Attribute self _cur) val)) (Assign (__list__ (Attribute self _cur)) (Attribute (Attribute self _cur) next_node)) (Return val)) (__list__ ) Any))) (FunctionDef __init__ (arguments (__list__ (arg self) (arg iterable (BinOp (Subscript Iterable Any) BitOr None))) (__list__ None)) (__list__ (AnnAssign (Attribute self _front) Any None 0) (AnnAssign (Attribute self _back) Any None 0) (AnnAssign (Attribute self _len) int 0 0) (If (Compare iterable (__list__ IsNot) (__list__ None)) (__list__ (For val iterable (__list__ (Expr (Call (Attribute self append) (__list__ val)))))))) (__list__ ) None) (FunctionDef append (arguments (__list__ (arg self) (arg val Any))) (__list__ (Expr STRING_10) (Assign (__list__ node) (Call (Attribute self _Node) (__list__ val None None))) (If (Call (Attribute self is_empty)) (__list__ (Assign (__list__ (Attribute self _front) (Attribute self _back)) node) (Assign (__list__ (Attribute self _len)) 1)) (__list__ (Assign (__list__ (Attribute (Attribute self _back) next_node)) node) (Assign (__list__ (Attribute node prev_node)) (Attribute self _back)) (Assign (__list__ (Attribute self _back)) node) (AugAssign (Attribute self _len) Add 1) (Assert (UnaryOp Not (Call (Attribute self is_empty))) STRING_11)))) (__list__ ) None) (FunctionDef appendleft (arguments (__list__ (arg self) (arg val Any))) (__list__ (Expr STRING_12) (Assign (__list__ node) (Call (Attribute self _Node) (__list__ val None None))) (If (Call (Attribute self is_empty)) (__list__ (Assign (__list__ (Attribute self _front) (Attribute self _back)) node) (Assign (__list__ (Attribute self _len)) 1)) (__list__ (Assign (__list__ (Attribute node next_node)) (Attribute self _front)) (Assign (__list__ (Attribute (Attribute self _front) prev_node)) node) (Assign (__list__ (Attribute self _front)) node) (AugAssign (Attribute self _len) Add 1) (Assert (UnaryOp Not (Call (Attribute self is_empty))) STRING_11)))) (__list__ ) None) (FunctionDef extend (arguments (__list__ (arg self) (arg iterable (Subscript Iterable Any)))) (__list__ (Expr STRING_13) (For val iterable (__list__ (Expr (Call (Attribute self append) (__list__ val)))))) (__list__ ) None) (FunctionDef extendleft (arguments (__list__ (arg self) (arg iterable (Subscript Iterable Any)))) (__list__ (Expr STRING_14) (For val iterable (__list__ (Expr (Call (Attribute self appendleft) (__list__ val)))))) (__list__ ) None) (FunctionDef pop (arguments (__list__ (arg self))) (__list__ (Expr STRING_15) (Assert (UnaryOp Not (Call (Attribute self is_empty))) STRING_16) (Assign (__list__ topop) (Attribute self _back)) (If (Compare (Attribute self _front) (__list__ Eq) (__list__ (Attribute self _back))) (__list__ (Assign (__list__ (Attribute self _front)) None) (Assign (__list__ (Attribute self _back)) None)) (__list__ (Assign (__list__ (Attribute self _back)) (Attribute (Attribute self _back) prev_node)) (Assign (__list__ (Attribute (Attribute self _back) next_node)) None))) (AugAssign (Attribute self _len) Sub 1) (Return (Attribute topop val))) (__list__ ) Any) (FunctionDef popleft (arguments (__list__ (arg self))) (__list__ (Expr STRING_17) (Assert (UnaryOp Not (Call (Attribute self is_empty))) STRING_16) (Assign (__list__ topop) (Attribute self _front)) (If (Compare (Attribute self _front) (__list__ Eq) (__list__ (Attribute self _back))) (__list__ (Assign (__list__ (Attribute self _front)) None) (Assign (__list__ (Attribute self _back)) None)) (__list__ (Assign (__list__ (Attribute self _front)) (Attribute (Attribute self _front) next_node)) (Assign (__list__ (Attribute (Attribute self _front) prev_node)) None))) (AugAssign (Attribute self _len) Sub 1) (Return (Attribute topop val))) (__list__ ) Any) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_18) (Return (Compare (Attribute self _front) (__list__ Is) (__list__ None)))) (__list__ ) bool) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_19) (Return (Attribute self _len))) (__list__ ) int) (FunctionDef __eq__ (arguments (__list__ (arg self) (arg other object))) (__list__ (Expr STRING_20) (If (UnaryOp Not (Call isinstance (__list__ other Deque))) (__list__ (Return NotImplemented))) (Assign (__list__ me) (Attribute self _front)) (Assign (__list__ oth) (Attribute other _front)) (If (Compare (Call len (__list__ self)) (__list__ NotEq) (__list__ (Call len (__list__ other)))) (__list__ (Return False))) (While (BoolOp And (__list__ (Compare me (__list__ IsNot) (__list__ None)) (Compare oth (__list__ IsNot) (__list__ None)))) (__list__ (If (Compare (Attribute me val) (__list__ NotEq) (__list__ (Attribute oth val))) (__list__ (Return False))) (Assign (__list__ me) (Attribute me next_node)) (Assign (__list__ oth) (Attribute oth next_node)))) (Return True)) (__list__ ) bool) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_21) (Return (Call (Attribute Deque _Iterator) (__list__ (Attribute self _front))))) (__list__ ) (Attribute Deque _Iterator)) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_22) (Assign (__list__ values_list) List) (Assign (__list__ aux) (Attribute self _front)) (While (Compare aux (__list__ IsNot) (__list__ None)) (__list__ (Expr (Call (Attribute values_list append) (__list__ (Attribute aux val)))) (Assign (__list__ aux) (Attribute aux next_node)))) (Return (JoinedStr (__list__ STRING_1 (FormattedValue (Call (Attribute STRING_13 join) (__list__ (GeneratorExp (Call repr (__list__ val)) (__list__ (comprehension val values_list 0))))) -1) STRING_3)))) (__list__ ) str))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Assign (__list__ dq) (Call Deque (__list__ (List (__list__ 3))))) (Expr (Call (Attribute dq pop))))))",
    "(ProgramStatements )",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef CircularQueueLinkedList (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg initial_capacity int)) (__list__ 6)) (__list__ (AnnAssign (Attribute self front) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self rear) (BinOp Node BitOr None) None 0) (Expr (Call (Attribute self create_linked_list) (__list__ initial_capacity)))) (__list__ ) None) (FunctionDef create_linked_list (arguments (__list__ (arg self) (arg initial_capacity int))) (__list__ (Assign (__list__ current_node) (Call Node)) (Assign (__list__ (Attribute self front)) current_node) (Assign (__list__ (Attribute self rear)) current_node) (Assign (__list__ previous_node) current_node) (For _ (Call range (__list__ 1 initial_capacity)) (__list__ (Assign (__list__ current_node) (Call Node)) (Assign (__list__ (Attribute previous_node next)) current_node) (Assign (__list__ (Attribute current_node prev)) previous_node) (Assign (__list__ previous_node) current_node))) (Assign (__list__ (Attribute previous_node next)) (Attribute self front)) (Assign (__list__ (Attribute (Attribute self front) prev)) previous_node)) (__list__ ) None) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (BoolOp And (__list__ (Compare (Attribute self front) (__list__ Eq) (__list__ (Attribute self rear))) (Compare (Attribute self front) (__list__ IsNot) (__list__ None)) (Compare (Attribute (Attribute self front) data) (__list__ Is) (__list__ None)))))) (__list__ ) bool) (FunctionDef first (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Expr (Call (Attribute self check_can_perform_operation))) (Return (IfExp (Attribute self front) (Attribute (Attribute self front) data) None))) (__list__ ) (BinOp Any BitOr None)) (FunctionDef enqueue (arguments (__list__ (arg self) (arg data Any))) (__list__ (Expr STRING_3) (If (Compare (Attribute self rear) (__list__ Is) (__list__ None)) (__list__ Return)) (Expr (Call (Attribute self check_is_full))) (If (UnaryOp Not (Call (Attribute self is_empty))) (__list__ (Assign (__list__ (Attribute self rear)) (Attribute (Attribute self rear) next)))) (If (Attribute self rear) (__list__ (Assign (__list__ (Attribute (Attribute self rear) data)) data)))) (__list__ ) None) (FunctionDef dequeue (arguments (__list__ (arg self))) (__list__ (Expr STRING_4) (Expr (Call (Attribute self check_can_perform_operation))) (If (BoolOp Or (__list__ (Compare (Attribute self rear) (__list__ Is) (__list__ None)) (Compare (Attribute self front) (__list__ Is) (__list__ None)))) (__list__ (Return None))) (If (Compare (Attribute self front) (__list__ Eq) (__list__ (Attribute self rear))) (__list__ (Assign (__list__ data) (Attribute (Attribute self front) data)) (Assign (__list__ (Attribute (Attribute self front) data)) None) (Return data))) (Assign (__list__ old_front) (Attribute self front)) (Assign (__list__ (Attribute self front)) (Attribute old_front next)) (Assign (__list__ data) (Attribute old_front data)) (Assign (__list__ (Attribute old_front data)) None) (Return data)) (__list__ ) Any) (FunctionDef check_can_perform_operation (arguments (__list__ (arg self))) (__list__ (If (Call (Attribute self is_empty)) (__list__ (Raise (Call Exception (__list__ STRING_5)))))) (__list__ ) None) (FunctionDef check_is_full (arguments (__list__ (arg self))) (__list__ (If (BoolOp And (__list__ (Attribute self rear) (Compare (Attribute (Attribute self rear) next) (__list__ Eq) (__list__ (Attribute self front))))) (__list__ (Raise (Call Exception (__list__ STRING_6)))))) (__list__ ) None))) (ClassDef Node (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (AnnAssign (Attribute self data) (BinOp Any BitOr None) None 0) (AnnAssign (Attribute self next) (BinOp Node BitOr None) None 0) (AnnAssign (Attribute self prev) (BinOp Node BitOr None) None 0)) (__list__ ) None))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (ClassDef CircularQueue (__list__ (Expr STRING_0) (FunctionDef __init__ (arguments (__list__ (arg self) (arg n int))) (__list__ (Assign (__list__ (Attribute self n)) n) (Assign (__list__ (Attribute self array)) (BinOp (List (__list__ None)) Mult (Attribute self n))) (Assign (__list__ (Attribute self front)) 0) (Assign (__list__ (Attribute self rear)) 0) (Assign (__list__ (Attribute self size)) 0)) (__list__ )) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (Return (Attribute self size))) (__list__ ) int) (FunctionDef is_empty (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Compare (Attribute self size) (__list__ Eq) (__list__ 0)))) (__list__ ) bool) (FunctionDef first (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (IfExp (Call (Attribute self is_empty)) False (Subscript (Attribute self array) (Attribute self front))))) (__list__ )) (FunctionDef enqueue (arguments (__list__ (arg self) (arg data))) (__list__ (Expr STRING_4) (If (Compare (Attribute self size) (__list__ GtE) (__list__ (Attribute self n))) (__list__ (Raise (Call Exception (__list__ STRING_5))))) (Assign (__list__ (Subscript (Attribute self array) (Attribute self rear))) data) (Assign (__list__ (Attribute self rear)) (BinOp (BinOp (Attribute self rear) Add 1) Mod (Attribute self n))) (AugAssign (Attribute self size) Add 1) (Return self)) (__list__ )) (FunctionDef dequeue (arguments (__list__ (arg self))) (__list__ (Expr STRING_6) (If (Compare (Attribute self size) (__list__ Eq) (__list__ 0)) (__list__ (Raise (Call Exception (__list__ STRING_7))))) (Assign (__list__ temp) (Subscript (Attribute self array) (Attribute self front))) (Assign (__list__ (Subscript (Attribute self array) (Attribute self front))) None) (Assign (__list__ (Attribute self front)) (BinOp (BinOp (Attribute self front) Add 1) Mod (Attribute self n))) (AugAssign (Attribute self size) Sub 1) (Return temp)) (__list__ )))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom typing (__list__ (alias Any)) 0) (ClassDef Queue (__list__ (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self stack)) List) (Assign (__list__ (Attribute self length)) 0)) (__list__ )) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ printed) (BinOp (BinOp STRING_1 Add (Subscript (Call str (__list__ (Attribute self stack))) (Slice 1 (UnaryOp USub 1)))) Add STRING_1)) (Return printed)) (__list__ )) (Expr STRING_2) (FunctionDef put (arguments (__list__ (arg self) (arg item Any))) (__list__ (Expr (Call (Attribute (Attribute self stack) append) (__list__ item))) (Assign (__list__ (Attribute self length)) (BinOp (Attribute self length) Add 1))) (__list__ ) None) (Expr STRING_3) (FunctionDef get (arguments (__list__ (arg self))) (__list__ (Expr (Call (Attribute self rotate) (__list__ 1))) (Assign (__list__ dequeued) (Subscript (Attribute self stack) (BinOp (Attribute self length) Sub 1))) (Assign (__list__ (Attribute self stack)) (Subscript (Attribute self stack) (Slice (UnaryOp USub 1)))) (Expr (Call (Attribute self rotate) (__list__ (BinOp (Attribute self length) Sub 1)))) (Assign (__list__ (Attribute self length)) (BinOp (Attribute self length) Sub 1)) (Return dequeued)) (__list__ ) Any) (Expr STRING_4) (FunctionDef rotate (arguments (__list__ (arg self) (arg rotation int))) (__list__ (For _ (Call range (__list__ rotation)) (__list__ (Assign (__list__ temp) (Subscript (Attribute self stack) 0)) (Assign (__list__ (Attribute self stack)) (Subscript (Attribute self stack) (Slice 1))) (Expr (Call (Attribute self put) (__list__ temp))) (Assign (__list__ (Attribute self length)) (BinOp (Attribute self length) Sub 1))))) (__list__ ) None) (Expr STRING_5) (FunctionDef front (arguments (__list__ (arg self))) (__list__ (Assign (__list__ front) (Call (Attribute self get))) (Expr (Call (Attribute self put) (__list__ front))) (Expr (Call (Attribute self rotate) (__list__ (BinOp (Attribute self length) Sub 1)))) (Return front)) (__list__ ) Any) (Expr STRING_6) (FunctionDef size (arguments (__list__ (arg self))) (__list__ (Return (Attribute self length))) (__list__ ) int))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom collections.abc (__list__ (alias Iterable)) 0) (ImportFrom typing (__list__ (alias Generic) (alias TypeVar)) 0) (Assign (__list__ _T) (Call TypeVar (__list__ STRING_1))) (ClassDef QueueByList (__list__ (Subscript Generic _T)) (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg iterable (BinOp (Subscript Iterable _T) BitOr None))) (__list__ None)) (__list__ (Expr STRING_1) (AnnAssign (Attribute self entries) (Subscript list _T) (Call list (__list__ (BoolOp Or (__list__ iterable List)))) 0)) (__list__ ) None) (FunctionDef __len__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_2) (Return (Call len (__list__ (Attribute self entries))))) (__list__ ) int) (FunctionDef __repr__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_3) (Return (JoinedStr (__list__ STRING_5 (FormattedValue (Call tuple (__list__ (Attribute self entries))) -1) STRING_3)))) (__list__ ) str) (FunctionDef put (arguments (__list__ (arg self) (arg item _T))) (__list__ (Expr STRING_4) (Expr (Call (Attribute (Attribute self entries) append) (__list__ item)))) (__list__ ) None) (FunctionDef get (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (If (UnaryOp Not (Attribute self entries)) (__list__ (Raise (Call IndexError (__list__ STRING_8))))) (Return (Call (Attribute (Attribute self entries) pop) (__list__ 0)))) (__list__ ) _T) (FunctionDef rotate (arguments (__list__ (arg self) (arg rotation int))) (__list__ (Expr STRING_6) (Assign (__list__ put) (Attribute (Attribute self entries) append)) (Assign (__list__ get) (Attribute (Attribute self entries) pop)) (For _ (Call range (__list__ rotation)) (__list__ (Expr (Call put (__list__ (Call get (__list__ 0)))))))) (__list__ ) None) (FunctionDef get_front (arguments (__list__ (arg self))) (__list__ (Expr STRING_7) (Return (Subscript (Attribute self entries) 0))) (__list__ ) _T))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef OverFlowError (__list__ Exception) (__list__ Pass)) (ClassDef UnderFlowError (__list__ Exception) (__list__ Pass)) (ClassDef FixedPriorityQueue (__list__ (Expr STRING_1) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self queues)) (List (__list__ List List List)))) (__list__ )) (FunctionDef enqueue (arguments (__list__ (arg self) (arg priority int) (arg data int))) (__list__ (Expr STRING_2) (Try (__list__ (If (Compare (Call len (__list__ (Subscript (Attribute self queues) priority))) (__list__ GtE) (__list__ 100)) (__list__ (Raise (Call OverflowError (__list__ STRING_3))))) (Expr (Call (Attribute (Subscript (Attribute self queues) priority) append) (__list__ data)))) (__list__ (ExceptHandler IndexError (__list__ (Raise (Call ValueError (__list__ STRING_4)))))))) (__list__ ) None) (FunctionDef dequeue (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (For queue (Attribute self queues) (__list__ (If queue (__list__ (Return (Call (Attribute queue pop) (__list__ 0))))))) (Raise (Call UnderFlowError (__list__ STRING_6)))) (__list__ ) int) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Return (Call (Attribute STRING_13 join) (__list__ (GeneratorExp (JoinedStr (__list__ STRING_7 (FormattedValue i -1) STRING_2 (FormattedValue q -1))) (__list__ (comprehension (Tuple (__list__ i q)) (Call enumerate (__list__ (Attribute self queues))) 0))))))) (__list__ ) str))) (ClassDef ElementPriorityQueue (__list__ (Expr STRING_8) (FunctionDef __init__ (arguments (__list__ (arg self))) (__list__ (Assign (__list__ (Attribute self queue)) List)) (__list__ )) (FunctionDef enqueue (arguments (__list__ (arg self) (arg data int))) (__list__ (Expr STRING_9) (If (Compare (Call len (__list__ (Attribute self queue))) (__list__ Eq) (__list__ 100)) (__list__ (Raise (Call OverFlowError (__list__ STRING_3))))) (Expr (Call (Attribute (Attribute self queue) append) (__list__ data)))) (__list__ ) None) (FunctionDef dequeue (arguments (__list__ (arg self))) (__list__ (Expr STRING_5) (If (UnaryOp Not (Attribute self queue)) (__list__ (Raise (Call UnderFlowError (__list__ STRING_10)))) (__list__ (Assign (__list__ data) (Call min (__list__ (Attribute self queue)))) (Expr (Call (Attribute (Attribute self queue) remove) (__list__ data))) (Return data)))) (__list__ ) int) (FunctionDef __str__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_11) (Return (Call str (__list__ (Attribute self queue))))) (__list__ ) str))) (FunctionDef fixed_priority_queue arguments (__list__ (Assign (__list__ fpq) (Call FixedPriorityQueue)) (Expr (Call (Attribute fpq enqueue) (__list__ 0 10))) (Expr (Call (Attribute fpq enqueue) (__list__ 1 70))) (Expr (Call (Attribute fpq enqueue) (__list__ 0 100))) (Expr (Call (Attribute fpq enqueue) (__list__ 2 1))) (Expr (Call (Attribute fpq enqueue) (__list__ 2 5))) (Expr (Call (Attribute fpq enqueue) (__list__ 1 7))) (Expr (Call (Attribute fpq enqueue) (__list__ 2 4))) (Expr (Call (Attribute fpq enqueue) (__list__ 1 64))) (Expr (Call (Attribute fpq enqueue) (__list__ 0 128))) (Expr (Call print (__list__ fpq))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ fpq))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue))))) (Expr (Call print (__list__ (Call (Attribute fpq dequeue)))))) (__list__ )) (FunctionDef element_priority_queue arguments (__list__ (Assign (__list__ epq) (Call ElementPriorityQueue)) (Expr (Call (Attribute epq enqueue) (__list__ 10))) (Expr (Call (Attribute epq enqueue) (__list__ 70))) (Expr (Call (Attribute epq enqueue) (__list__ 100))) (Expr (Call (Attribute epq enqueue) (__list__ 1))) (Expr (Call (Attribute epq enqueue) (__list__ 5))) (Expr (Call (Attribute epq enqueue) (__list__ 7))) (Expr (Call (Attribute epq enqueue) (__list__ 4))) (Expr (Call (Attribute epq enqueue) (__list__ 64))) (Expr (Call (Attribute epq enqueue) (__list__ 128))) (Expr (Call print (__list__ epq))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ epq))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ (Call (Attribute epq dequeue))))) (Expr (Call print (__list__ (Call (Attribute epq dequeue)))))) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_7)) (__list__ (Expr (Call fixed_priority_queue)) (Expr (Call element_priority_queue)))))"
]