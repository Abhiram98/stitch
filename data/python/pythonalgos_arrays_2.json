[
    "(ProgramStatements (Expr STRING_0) (FunctionDef find_median_sorted_arrays (arguments (__list__ (arg nums1 (Subscript list int)) (arg nums2 (Subscript list int)))) (__list__ (Expr STRING_1) (If (BoolOp And (__list__ (UnaryOp Not nums1) (UnaryOp Not nums2))) (__list__ (Raise (Call ValueError (__list__ STRING_2))))) (Assign (__list__ merged) (Call sorted (__list__ (BinOp nums1 Add nums2)))) (Assign (__list__ total) (Call len (__list__ merged))) (If (Compare (BinOp total Mod 2) (__list__ Eq) (__list__ 1)) (__list__ (Return (Call float (__list__ (Subscript merged (BinOp total FloorDiv 2))))))) (Assign (__list__ middle1) (Subscript merged (BinOp (BinOp total FloorDiv 2) Sub 1))) (Assign (__list__ middle2) (Subscript merged (BinOp total FloorDiv 2))) (Return (BinOp (BinOp (Call float (__list__ middle1)) Add (Call float (__list__ middle2))) Div 2.0))) float) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef partition (arguments (__list__ (arg arr (Subscript list int)) (arg low int) (arg high int))) (__list__ (Expr STRING_1) (Assign (__list__ pivot) (Subscript arr high)) (Assign (__list__ i) (BinOp low Sub 1)) (For j (Call range (__list__ low high)) (__list__ (If (Compare (Subscript arr j) (__list__ GtE) (__list__ pivot)) (__list__ (AugAssign i Add 1) (Assign (__list__ (Tuple (__list__ (Subscript arr i) (Subscript arr j)))) (Tuple (__list__ (Subscript arr j) (Subscript arr i)))))))) (Assign (__list__ (Tuple (__list__ (Subscript arr (BinOp i Add 1)) (Subscript arr high)))) (Tuple (__list__ (Subscript arr high) (Subscript arr (BinOp i Add 1))))) (Return (BinOp i Add 1))) int) (FunctionDef kth_largest_element (arguments (__list__ (arg arr (Subscript list int)) (arg position int))) (__list__ (Expr STRING_2) (If (UnaryOp Not arr) (__list__ (Return (UnaryOp USub 1)))) (If (UnaryOp Not (Call isinstance (__list__ position int))) (__list__ (Raise (Call ValueError (__list__ STRING_3))))) (If (UnaryOp Not (Compare 1 (__list__ LtE LtE) (__list__ position (Call len (__list__ arr))))) (__list__ (Raise (Call ValueError (__list__ STRING_4))))) (Assign (__list__ (Tuple (__list__ low high))) (Tuple (__list__ 0 (BinOp (Call len (__list__ arr)) Sub 1)))) (While (Compare low (__list__ LtE) (__list__ high)) (__list__ (If (BoolOp Or (__list__ (Compare low (__list__ Gt) (__list__ (BinOp (Call len (__list__ arr)) Sub 1))) (Compare high (__list__ Lt) (__list__ 0)))) (__list__ (Return (UnaryOp USub 1)))) (Assign (__list__ pivot_index) (Call partition (__list__ arr low high))) (If (Compare pivot_index (__list__ Eq) (__list__ (BinOp position Sub 1))) (__list__ (Return (Subscript arr pivot_index))) (__list__ (If (Compare pivot_index (__list__ Gt) (__list__ (BinOp position Sub 1))) (__list__ (Assign (__list__ high) (BinOp pivot_index Sub 1))) (__list__ (Assign (__list__ low) (BinOp pivot_index Add 1)))))))) (Return (UnaryOp USub 1))) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom math (__list__ (alias log2)) 0) (FunctionDef build_sparse_table (arguments (__list__ (arg number_list (Subscript list int)))) (__list__ (Expr STRING_1) (If (UnaryOp Not number_list) (__list__ (Raise (Call ValueError (__list__ STRING_2))))) (Assign (__list__ length) (Call len (__list__ number_list))) (Assign (__list__ row) (BinOp (Call int (__list__ (Call log2 (__list__ length)))) Add 1)) (Assign (__list__ sparse_table) (ListComp (ListComp 0 (__list__ (comprehension i (Call range (__list__ length)) 0))) (__list__ (comprehension j (Call range (__list__ row)) 0)))) (For (Tuple (__list__ i value)) (Call enumerate (__list__ number_list)) (__list__ (Assign (__list__ (Subscript (Subscript sparse_table 0) i)) value))) (Assign (__list__ j) 1) (While (Compare (BinOp 1 LShift j) (__list__ LtE) (__list__ length)) (__list__ (Assign (__list__ i) 0) (While (Compare (BinOp (BinOp i Add (BinOp 1 LShift j)) Sub 1) (__list__ Lt) (__list__ length)) (__list__ (Assign (__list__ (Subscript (Subscript sparse_table j) i)) (Call min (__list__ (Subscript (Subscript sparse_table (BinOp j Sub 1)) (BinOp i Add (BinOp 1 LShift (BinOp j Sub 1)))) (Subscript (Subscript sparse_table (BinOp j Sub 1)) i)))) (AugAssign i Add 1))) (AugAssign j Add 1))) (Return sparse_table)) (Subscript list (Subscript list int))) (FunctionDef query (arguments (__list__ (arg sparse_table (Subscript list (Subscript list int))) (arg left_bound int) (arg right_bound int))) (__list__ (Expr STRING_3) (If (BoolOp Or (__list__ (Compare left_bound (__list__ Lt) (__list__ 0)) (Compare right_bound (__list__ GtE) (__list__ (Call len (__list__ (Subscript sparse_table 0))))))) (__list__ (Raise (Call IndexError (__list__ STRING_4))))) (Assign (__list__ j) (Call int (__list__ (Call log2 (__list__ (BinOp (BinOp right_bound Sub left_bound) Add 1)))))) (Return (Call min (__list__ (Subscript (Subscript sparse_table j) (BinOp (BinOp right_bound Sub (BinOp 1 LShift j)) Add 1)) (Subscript (Subscript sparse_table j) left_bound))))) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Expr (Call print (__list__ (JoinedStr (__list__ STRING_5 (FormattedValue (Call query (__list__ (Call build_sparse_table (__list__ (List (__list__ 3 1 9)))) 2 2)) 114)))))))))",
    "(ProgramStatements (ImportFrom itertools (__list__ (alias combinations)) 0) (FunctionDef find_triplets_with_0_sum (arguments (__list__ (arg nums (Subscript list int)))) (__list__ (Expr STRING_0) (Return (ListComp (Call list (__list__ x)) (__list__ (comprehension x (Call sorted (__list__ (SetComp abc (__list__ (comprehension abc (Call combinations (__list__ (Call sorted (__list__ nums)) 3)) (__list__ (UnaryOp Not (Call sum (__list__ abc)))) 0))))) 0))))) (Subscript list (Subscript list int))) (FunctionDef find_triplets_with_0_sum_hashing (arguments (__list__ (arg arr (Subscript list int)))) (__list__ (Expr STRING_1) (Assign (__list__ target_sum) 0) (Assign (__list__ output_arr) List) (For (Tuple (__list__ index item)) (Call enumerate (__list__ (Subscript arr (Slice (UnaryOp USub 2))))) (__list__ (Assign (__list__ set_initialize) (Call set)) (Assign (__list__ current_sum) (BinOp target_sum Sub item)) (For other_item (Subscript arr (Slice (BinOp index Add 1))) (__list__ (Assign (__list__ required_value) (BinOp current_sum Sub other_item)) (If (Compare required_value (__list__ In) (__list__ set_initialize)) (__list__ (Assign (__list__ combination_array) (Call sorted (__list__ (List (__list__ item other_item required_value))))) (If (Compare combination_array (__list__ NotIn) (__list__ output_arr)) (__list__ (Expr (Call (Attribute output_arr append) (__list__ combination_array))))))) (Expr (Call (Attribute set_initialize add) (__list__ other_item))))))) (Return output_arr)) (Subscript list (Subscript list int))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements )",
    "(ProgramStatements (FunctionDef permute_recursive (arguments (__list__ (arg nums (Subscript list int)))) (__list__ (Expr STRING_0) (AnnAssign result (Subscript list (Subscript list int)) List 1) (If (Compare (Call len (__list__ nums)) (__list__ Eq) (__list__ 0)) (__list__ (Return (List (__list__ List))))) (For _ (Call range (__list__ (Call len (__list__ nums)))) (__list__ (Assign (__list__ n) (Call (Attribute nums pop) (__list__ 0))) (Assign (__list__ permutations) (Call permute_recursive (__list__ (Call (Attribute nums copy))))) (For perm permutations (__list__ (Expr (Call (Attribute perm append) (__list__ n))))) (Expr (Call (Attribute result extend) (__list__ permutations))) (Expr (Call (Attribute nums append) (__list__ n))))) (Return result)) (Subscript list (Subscript list int))) (FunctionDef permute_backtrack (arguments (__list__ (arg nums (Subscript list int)))) (__list__ (Expr STRING_1) (FunctionDef backtrack (arguments (__list__ (arg start int))) (__list__ (If (Compare start (__list__ Eq) (__list__ (BinOp (Call len (__list__ nums)) Sub 1))) (__list__ (Expr (Call (Attribute output append) (__list__ (Subscript nums Slice))))) (__list__ (For i (Call range (__list__ start (Call len (__list__ nums)))) (__list__ (Assign (__list__ (Tuple (__list__ (Subscript nums start) (Subscript nums i)))) (Tuple (__list__ (Subscript nums i) (Subscript nums start)))) (Expr (Call backtrack (__list__ (BinOp start Add 1)))) (Assign (__list__ (Tuple (__list__ (Subscript nums start) (Subscript nums i)))) (Tuple (__list__ (Subscript nums i) (Subscript nums start))))))))) None) (AnnAssign output (Subscript list (Subscript list int)) List 1) (Expr (Call backtrack (__list__ 0))) (Return output)) (Subscript list (Subscript list int))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Import (__list__ (alias doctest))) (Assign (__list__ result) (Call permute_backtrack (__list__ (List (__list__ 1 2 3))))) (Expr (Call print (__list__ result))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef equilibrium_index (arguments (__list__ (arg arr (Subscript list int)))) (__list__ (Expr STRING_1) (Assign (__list__ total_sum) (Call sum (__list__ arr))) (Assign (__list__ left_sum) 0) (For (Tuple (__list__ i value)) (Call enumerate (__list__ arr)) (__list__ (AugAssign total_sum Sub value) (If (Compare left_sum (__list__ Eq) (__list__ total_sum)) (__list__ (Return i))) (AugAssign left_sum Add value))) (Return (UnaryOp USub 1))) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom collections.abc (__list__ (alias Iterator)) 0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef Index2DArrayIterator (__list__ (AnnAssign matrix (Subscript list (Subscript list int)) 1) (FunctionDef __iter__ (arguments (__list__ (arg self))) (__list__ (Expr STRING_1) (For row (Attribute self matrix) (__list__ (Expr (YieldFrom row))))) (Subscript Iterator int))) (__list__ dataclass)) (FunctionDef index_2d_array_in_1d (arguments (__list__ (arg array (Subscript list (Subscript list int))) (arg index int))) (__list__ (Expr STRING_2) (Assign (__list__ rows) (Call len (__list__ array))) (Assign (__list__ cols) (Call len (__list__ (Subscript array 0)))) (If (BoolOp Or (__list__ (Compare rows (__list__ Eq) (__list__ 0)) (Compare cols (__list__ Eq) (__list__ 0)))) (__list__ (Raise (Call ValueError (__list__ STRING_3))))) (If (BoolOp Or (__list__ (Compare index (__list__ Lt) (__list__ 0)) (Compare index (__list__ GtE) (__list__ (BinOp rows Mult cols))))) (__list__ (Raise (Call ValueError (__list__ STRING_4))))) (Return (Subscript (Subscript array (BinOp index FloorDiv cols)) (BinOp index Mod cols)))) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef product_sum (arguments (__list__ (arg arr (Subscript list (BinOp int BitOr list))) (arg depth int))) (__list__ (Expr STRING_1) (Assign (__list__ total_sum) 0) (For ele arr (__list__ (AugAssign total_sum Add (IfExp (Call isinstance (__list__ ele list)) (Call product_sum (__list__ ele (BinOp depth Add 1))) ele)))) (Return (BinOp total_sum Mult depth))) int) (FunctionDef product_sum_array (arguments (__list__ (arg array (Subscript list (BinOp int BitOr list))))) (__list__ (Expr STRING_2) (Return (Call product_sum (__list__ array 1)))) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (FunctionDef is_monotonic (arguments (__list__ (arg nums (Subscript list int)))) (__list__ (Expr STRING_0) (Return (BoolOp Or (__list__ (Call all (__list__ (GeneratorExp (Compare (Subscript nums i) (__list__ LtE) (__list__ (Subscript nums (BinOp i Add 1)))) (__list__ (comprehension i (Call range (__list__ (BinOp (Call len (__list__ nums)) Sub 1))) 0))))) (Call all (__list__ (GeneratorExp (Compare (Subscript nums i) (__list__ GtE) (__list__ (Subscript nums (BinOp i Add 1)))) (__list__ (comprehension i (Call range (__list__ (BinOp (Call len (__list__ nums)) Sub 1))) 0))))))))) bool) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Expr (Call print (__list__ (Call is_monotonic (__list__ (List (__list__ 1 2 2 3))))))) (Expr (Call print (__list__ (Call is_monotonic (__list__ (List (__list__ 6 5 4 4))))))) (Expr (Call print (__list__ (Call is_monotonic (__list__ (List (__list__ 1 3 2))))))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom itertools (__list__ (alias combinations)) 0) (FunctionDef pairs_with_sum (arguments (__list__ (arg arr list) (arg req_sum int))) (__list__ (Expr STRING_1) (Return (Call len (__list__ (ListComp 1 (__list__ (comprehension (Tuple (__list__ a b)) (Call combinations (__list__ arr 2)) (__list__ (Compare (BinOp a Add b) (__list__ Eq) (__list__ req_sum))) 0))))))) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)))))",
    "(ProgramStatements (Expr STRING_0) (ClassDef PrefixSum (__list__ (FunctionDef __init__ (arguments (__list__ (arg self) (arg array (Subscript list int)))) (__list__ (Assign (__list__ len_array) (Call len (__list__ array))) (Assign (__list__ (Attribute self prefix_sum)) (BinOp (List (__list__ 0)) Mult len_array)) (If (Compare len_array (__list__ Gt) (__list__ 0)) (__list__ (Assign (__list__ (Subscript (Attribute self prefix_sum) 0)) (Subscript array 0)))) (For i (Call range (__list__ 1 len_array)) (__list__ (Assign (__list__ (Subscript (Attribute self prefix_sum) i)) (BinOp (Subscript (Attribute self prefix_sum) (BinOp i Sub 1)) Add (Subscript array i)))))) None) (FunctionDef get_sum (arguments (__list__ (arg self) (arg start int) (arg end int))) (__list__ (Expr STRING_1) (If (Compare start (__list__ Eq) (__list__ 0)) (__list__ (Return (Subscript (Attribute self prefix_sum) end)))) (Return (BinOp (Subscript (Attribute self prefix_sum) end) Sub (Subscript (Attribute self prefix_sum) (BinOp start Sub 1))))) int) (FunctionDef contains_sum (arguments (__list__ (arg self) (arg target_sum int))) (__list__ (Expr STRING_2) (Assign (__list__ sums) (Set (__list__ 0))) (For sum_item (Attribute self prefix_sum) (__list__ (If (Compare (BinOp sum_item Sub target_sum) (__list__ In) (__list__ sums)) (__list__ (Return True))) (Expr (Call (Attribute sums add) (__list__ sum_item))))) (Return False)) bool))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (Import (__list__ (alias random))) (Import (__list__ (alias time))) (FunctionDef cross (arguments (__list__ (arg items_a) (arg items_b))) (__list__ (Expr STRING_1) (Return (ListComp (BinOp a Add b) (__list__ (comprehension a items_a 0) (comprehension b items_b 0)))))) (Assign (__list__ digits) STRING_2) (Assign (__list__ rows) STRING_3) (Assign (__list__ cols) digits) (Assign (__list__ squares) (Call cross (__list__ rows cols))) (Assign (__list__ unitlist) (BinOp (BinOp (ListComp (Call cross (__list__ rows c)) (__list__ (comprehension c cols 0))) Add (ListComp (Call cross (__list__ r cols)) (__list__ (comprehension r rows 0)))) Add (ListComp (Call cross (__list__ rs cs)) (__list__ (comprehension rs (Tuple (__list__ STRING_4 STRING_5 STRING_6)) 0) (comprehension cs (Tuple (__list__ STRING_7 STRING_8 STRING_9)) 0))))) (Assign (__list__ units) (DictComp s (ListComp u (__list__ (comprehension u unitlist (__list__ (Compare s (__list__ In) (__list__ u))) 0))) (__list__ (comprehension s squares 0)))) (Assign (__list__ peers) (DictComp s (BinOp (Call set (__list__ (Call sum (__list__ (Subscript units s) List)))) Sub (Set (__list__ s))) (__list__ (comprehension s squares 0)))) (FunctionDef test arguments (__list__ (Expr STRING_10) (Assert (Compare (Call len (__list__ squares)) (__list__ Eq) (__list__ 81))) (Assert (Compare (Call len (__list__ unitlist)) (__list__ Eq) (__list__ 27))) (Assert (Call all (__list__ (GeneratorExp (Compare (Call len (__list__ (Subscript units s))) (__list__ Eq) (__list__ 3)) (__list__ (comprehension s squares 0)))))) (Assert (Call all (__list__ (GeneratorExp (Compare (Call len (__list__ (Subscript peers s))) (__list__ Eq) (__list__ 20)) (__list__ (comprehension s squares 0)))))) (Assert (Compare (Subscript units STRING_11) (__list__ Eq) (__list__ (List (__list__ (List (__list__ STRING_12 STRING_13 STRING_11 STRING_14 STRING_15 STRING_16 STRING_17 STRING_18 STRING_19)) (List (__list__ STRING_20 STRING_11 STRING_21 STRING_22 STRING_23 STRING_24 STRING_25 STRING_26 STRING_27)) (List (__list__ STRING_28 STRING_12 STRING_29 STRING_30 STRING_13 STRING_31 STRING_20 STRING_11 STRING_21))))))) (Assert (Compare (Subscript peers STRING_11) (__list__ Eq) (__list__ (Set (__list__ STRING_12 STRING_13 STRING_14 STRING_15 STRING_16 STRING_17 STRING_18 STRING_19 STRING_20 STRING_21 STRING_22 STRING_23 STRING_24 STRING_25 STRING_26 STRING_27 STRING_28 STRING_29 STRING_30 STRING_31))))) (Expr (Call print (__list__ STRING_32))))) (FunctionDef parse_grid (arguments (__list__ (arg grid))) (__list__ (Expr STRING_33) (Assign (__list__ values) (DictComp s digits (__list__ (comprehension s squares 0)))) (For (Tuple (__list__ s d)) (Call (Attribute (Call grid_values (__list__ grid)) items)) (__list__ (If (BoolOp And (__list__ (Compare d (__list__ In) (__list__ digits)) (UnaryOp Not (Call assign (__list__ values s d))))) (__list__ (Return False))))) (Return values))) (FunctionDef grid_values (arguments (__list__ (arg grid))) (__list__ (Expr STRING_34) (Assign (__list__ chars) (ListComp c (__list__ (comprehension c grid (__list__ (BoolOp Or (__list__ (Compare c (__list__ In) (__list__ digits)) (Compare c (__list__ In) (__list__ STRING_35))))) 0)))) (Assert (Compare (Call len (__list__ chars)) (__list__ Eq) (__list__ 81))) (Return (Call dict (__list__ (Call zip (__list__ squares chars))))))) (FunctionDef assign (arguments (__list__ (arg values) (arg s) (arg d))) (__list__ (Expr STRING_36) (Assign (__list__ other_values) (Call (Attribute (Subscript values s) replace) (__list__ d STRING_37))) (If (Call all (__list__ (GeneratorExp (Call eliminate (__list__ values s d2)) (__list__ (comprehension d2 other_values 0))))) (__list__ (Return values)) (__list__ (Return False))))) (FunctionDef eliminate (arguments (__list__ (arg values) (arg s) (arg d))) (__list__ (Expr STRING_38) (If (Compare d (__list__ NotIn) (__list__ (Subscript values s))) (__list__ (Return values))) (Assign (__list__ (Subscript values s)) (Call (Attribute (Subscript values s) replace) (__list__ d STRING_37))) (If (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 0)) (__list__ (Return False)) (__list__ (If (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 1)) (__list__ (Assign (__list__ d2) (Subscript values s)) (If (UnaryOp Not (Call all (__list__ (GeneratorExp (Call eliminate (__list__ values s2 d2)) (__list__ (comprehension s2 (Subscript peers s) 0)))))) (__list__ (Return False))))))) (For u (Subscript units s) (__list__ (Assign (__list__ dplaces) (ListComp s (__list__ (comprehension s u (__list__ (Compare d (__list__ In) (__list__ (Subscript values s)))) 0)))) (If (Compare (Call len (__list__ dplaces)) (__list__ Eq) (__list__ 0)) (__list__ (Return False)) (__list__ (If (BoolOp And (__list__ (Compare (Call len (__list__ dplaces)) (__list__ Eq) (__list__ 1)) (UnaryOp Not (Call assign (__list__ values (Subscript dplaces 0) d))))) (__list__ (Return False))))))) (Return values))) (FunctionDef display (arguments (__list__ (arg values))) (__list__ (Expr STRING_39) (Assign (__list__ width) (BinOp 1 Add (Call max (__list__ (GeneratorExp (Call len (__list__ (Subscript values s))) (__list__ (comprehension s squares 0))))))) (Assign (__list__ line) (Call (Attribute STRING_40 join) (__list__ (BinOp (List (__list__ (BinOp STRING_41 Mult (BinOp width Mult 3)))) Mult 3)))) (For r rows (__list__ (Expr (Call print (__list__ (Call (Attribute STRING_37 join) (__list__ (GeneratorExp (BinOp (Call (Attribute (Subscript values (BinOp r Add c)) center) (__list__ width)) Add (IfExp (Compare c (__list__ In) (__list__ STRING_42)) STRING_43 STRING_37)) (__list__ (comprehension c cols 0)))))))) (If (Compare r (__list__ In) (__list__ STRING_44)) (__list__ (Expr (Call print (__list__ line))))))) (Expr (Call print)))) (FunctionDef solve (arguments (__list__ (arg grid))) (__list__ (Return (Call search (__list__ (Call parse_grid (__list__ grid))))))) (FunctionDef some (arguments (__list__ (arg seq))) (__list__ (Expr STRING_45) (For e seq (__list__ (If e (__list__ (Return e))))) (Return False))) (FunctionDef search (arguments (__list__ (arg values))) (__list__ (Expr STRING_46) (If (Compare values (__list__ Is) (__list__ False)) (__list__ (Return False))) (If (Call all (__list__ (GeneratorExp (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 1)) (__list__ (comprehension s squares 0))))) (__list__ (Return values))) (Assign (__list__ (Tuple (__list__ n s))) (Call min (__list__ (GeneratorExp (Tuple (__list__ (Call len (__list__ (Subscript values s))) s)) (__list__ (comprehension s squares (__list__ (Compare (Call len (__list__ (Subscript values s))) (__list__ Gt) (__list__ 1))) 0)))))) (Return (Call some (__list__ (GeneratorExp (Call search (__list__ (Call assign (__list__ (Call (Attribute values copy)) s d)))) (__list__ (comprehension d (Subscript values s) 0)))))))) (FunctionDef solve_all (arguments (__list__ (arg grids) (arg name) (arg showif)) (__list__ STRING_37 0.0)) (__list__ (Expr STRING_47) (FunctionDef time_solve (arguments (__list__ (arg grid))) (__list__ (Assign (__list__ start) (Call (Attribute time monotonic))) (Assign (__list__ values) (Call solve (__list__ grid))) (Assign (__list__ t) (BinOp (Call (Attribute time monotonic)) Sub start)) (If (BoolOp And (__list__ (Compare showif (__list__ IsNot) (__list__ None)) (Compare t (__list__ Gt) (__list__ showif)))) (__list__ (Expr (Call display (__list__ (Call grid_values (__list__ grid))))) (If values (__list__ (Expr (Call display (__list__ values))))) (Expr (Call print (__list__ (BinOp STRING_48 Mod t)))))) (Return (Tuple (__list__ t (Call solved (__list__ values))))))) (Assign (__list__ (Tuple (__list__ times results))) (Call zip (__list__ (Starred (ListComp (Call time_solve (__list__ grid)) (__list__ (comprehension grid grids 0))))))) (If (Compare (NamedExpr n (Call len (__list__ grids))) (__list__ Gt) (__list__ 1)) (__list__ (Expr (Call print (__list__ (BinOp STRING_49 Mod (Tuple (__list__ (Call sum (__list__ results)) n name (BinOp (Call sum (__list__ times)) Div n) (BinOp n Div (Call sum (__list__ times))) (Call max (__list__ times)))))))))))) (FunctionDef solved (arguments (__list__ (arg values))) (__list__ (Expr STRING_50) (FunctionDef unitsolved (arguments (__list__ (arg unit))) (__list__ (Return (Compare (SetComp (Subscript values s) (__list__ (comprehension s unit 0))) (__list__ Eq) (__list__ (Call set (__list__ digits))))))) (Return (BoolOp And (__list__ (Compare values (__list__ IsNot) (__list__ False)) (Call all (__list__ (GeneratorExp (Call unitsolved (__list__ unit)) (__list__ (comprehension unit unitlist 0)))))))))) (FunctionDef from_file (arguments (__list__ (arg filename) (arg sep)) (__list__ STRING_51)) (__list__ (Expr STRING_52) (Return (Call (Attribute (Call (Attribute (Call (Attribute (Call open (__list__ filename)) read)) strip)) split) (__list__ sep))))) (FunctionDef random_puzzle (arguments (__list__ (arg assignments)) (__list__ 17)) (__list__ (Expr STRING_53) (Assign (__list__ values) (DictComp s digits (__list__ (comprehension s squares 0)))) (For s (Call shuffled (__list__ squares)) (__list__ (If (UnaryOp Not (Call assign (__list__ values s (Call (Attribute random choice) (__list__ (Subscript values s)))))) (__list__ Break)) (Assign (__list__ ds) (ListComp (Subscript values s) (__list__ (comprehension s squares (__list__ (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 1))) 0)))) (If (BoolOp And (__list__ (Compare (Call len (__list__ ds)) (__list__ GtE) (__list__ assignments)) (Compare (Call len (__list__ (Call set (__list__ ds)))) (__list__ GtE) (__list__ 8)))) (__list__ (Return (Call (Attribute STRING_37 join) (__list__ (GeneratorExp (IfExp (Compare (Call len (__list__ (Subscript values s))) (__list__ Eq) (__list__ 1)) (Subscript values s) STRING_54) (__list__ (comprehension s squares 0)))))))))) (Return (Call random_puzzle (__list__ assignments))))) (FunctionDef shuffled (arguments (__list__ (arg seq))) (__list__ (Expr STRING_55) (Assign (__list__ seq) (Call list (__list__ seq))) (Expr (Call (Attribute random shuffle) (__list__ seq))) (Return seq))) (Assign (__list__ grid1) STRING_56) (Assign (__list__ grid2) STRING_57) (Assign (__list__ hard1) STRING_58) (If (Compare __name__ (__list__ Eq) (__list__ STRING_3)) (__list__ (Expr (Call test)) (Expr (Call solve_all (__list__ (ListComp (Call random_puzzle) (__list__ (comprehension _ (Call range (__list__ 99)) 0))) STRING_59 100.0))) (For puzzle (Tuple (__list__ grid1 grid2)) (__list__ (Expr (Call display (__list__ (Call parse_grid (__list__ puzzle))))) (Assign (__list__ start) (Call (Attribute time monotonic))) (Expr (Call solve (__list__ puzzle))) (Assign (__list__ t) (BinOp (Call (Attribute time monotonic)) Sub start)) (Expr (Call print (__list__ (BinOp STRING_60 Mod t)))))))))"
]