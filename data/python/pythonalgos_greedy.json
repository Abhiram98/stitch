[
    "(ProgramStatements (Expr STRING_0) (FunctionDef minimum_waiting_time (arguments (__list__ (arg queries (Subscript list int)))) (__list__ (Expr STRING_1) (Assign (__list__ n) (Call len (__list__ queries))) (If (Compare n (__list__ In) (__list__ (Tuple (__list__ 0 1)))) (__list__ (Return 0))) (Return (Call sum (__list__ (GeneratorExp (BinOp query Mult (BinOp (BinOp n Sub i) Sub 1)) (__list__ (comprehension (Tuple (__list__ i query)) (Call enumerate (__list__ (Call sorted (__list__ queries)))) 0))))))) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef optimal_merge_pattern (arguments (__list__ (arg files list))) (__list__ (Expr STRING_1) (Assign (__list__ optimal_merge_cost) 0) (While (Compare (Call len (__list__ files)) (__list__ Gt) (__list__ 1)) (__list__ (Assign (__list__ temp) 0) (For _ (Call range (__list__ 2)) (__list__ (Assign (__list__ min_index) (Call (Attribute files index) (__list__ (Call min (__list__ files))))) (AugAssign temp Add (Subscript files min_index)) (Expr (Call (Attribute files pop) (__list__ min_index))))) (Expr (Call (Attribute files append) (__list__ temp))) (AugAssign optimal_merge_cost Add temp))) (Return optimal_merge_cost)) (__list__ ) float) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements )",
    "(ProgramStatements (Expr STRING_0) (FunctionDef find_minimum_change (arguments (__list__ (arg denominations (Subscript list int)) (arg value str))) (__list__ (Expr STRING_1) (Assign (__list__ total_value) (Call int (__list__ value))) (Assign (__list__ answer) List) (For denomination (Call reversed (__list__ denominations)) (__list__ (While (Compare (Call int (__list__ total_value)) (__list__ GtE) (__list__ (Call int (__list__ denomination)))) (__list__ (AugAssign total_value Sub (Call int (__list__ denomination))) (Expr (Call (Attribute answer append) (__list__ denomination))))))) (Return answer)) (__list__ ) (Subscript list int)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (Assign (__list__ denominations) List) (Assign (__list__ value) STRING_2) (If (Compare (Call (Attribute (Call (Attribute (Call input (__list__ STRING_3)) strip)) lower)) (__list__ Eq) (__list__ STRING_4)) (__list__ (Assign (__list__ n) (Call int (__list__ (Call (Attribute (Call input (__list__ STRING_5)) strip))))) (For i (Call range (__list__ n)) (__list__ (Expr (Call (Attribute denominations append) (__list__ (Call int (__list__ (Call (Attribute (Call input (__list__ (JoinedStr (__list__ STRING_6 (FormattedValue i -1) STRING_7)))) strip))))))))) (Assign (__list__ value) (Call (Attribute (Call input (__list__ STRING_8)) strip)))) (__list__ (Assign (__list__ denominations) (List (__list__ 1 2 5 10 20 50 100 500 2000))) (Assign (__list__ value) (Call (Attribute (Call input (__list__ STRING_9)) strip))))) (If (BoolOp Or (__list__ (Compare (Call int (__list__ value)) (__list__ Eq) (__list__ 0)) (Compare (Call int (__list__ value)) (__list__ Lt) (__list__ 0)))) (__list__ (Expr (Call print (__list__ STRING_10)))) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ STRING_11 (FormattedValue value -1) STRING_7))))) (Assign (__list__ answer) (Call find_minimum_change (__list__ denominations value))) (For i (Call range (__list__ (Call len (__list__ answer)))) (__list__ (Expr (Call print (__list__ (Subscript answer i)) (__list__ (keyword end STRING_12)))))))))))",
    "(ProgramStatements (Expr STRING_0) (FunctionDef max_profit (arguments (__list__ (arg prices (Subscript list int)))) (__list__ (Expr STRING_1) (If (UnaryOp Not prices) (__list__ (Return 0))) (Assign (__list__ min_price) (Subscript prices 0)) (AnnAssign max_profit int 0 1) (For price prices (__list__ (Assign (__list__ min_price) (Call min (__list__ price min_price))) (Assign (__list__ max_profit) (Call max (__list__ (BinOp price Sub min_price) max_profit))))) (Return max_profit)) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))) (Expr (Call print (__list__ (Call max_profit (__list__ (List (__list__ 7 1 5 3 6 4))))))))))",
    "(ProgramStatements (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ImportFrom operator (__list__ (alias attrgetter)) 0) (ClassDef Item (__list__ (AnnAssign weight int 1) (AnnAssign value int 1) (FunctionDef ratio (arguments (__list__ (arg self))) (__list__ (Expr STRING_0) (Return (BinOp (Attribute self value) Div (Attribute self weight)))) (__list__ property) float)) (__list__ dataclass)) (FunctionDef fractional_cover (arguments (__list__ (arg items (Subscript list Item)) (arg capacity int))) (__list__ (Expr STRING_1) (If (Compare capacity (__list__ Lt) (__list__ 0)) (__list__ (Raise (Call ValueError (__list__ STRING_2))))) (Assign (__list__ total_value) 0.0) (Assign (__list__ remaining_capacity) capacity) (For item (Call sorted (__list__ items) (__list__ (keyword key (Call attrgetter (__list__ STRING_3))) (keyword reverse True))) (__list__ (If (Compare remaining_capacity (__list__ Eq) (__list__ 0)) (__list__ Break)) (Assign (__list__ weight_taken) (Call min (__list__ (Attribute item weight) remaining_capacity))) (AugAssign total_value Add (BinOp weight_taken Mult (Attribute item ratio))) (AugAssign remaining_capacity Sub weight_taken))) (Return total_value)) (__list__ ) float) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (Import (__list__ (alias doctest))) (If (NamedExpr result (Attribute (Call (Attribute doctest testmod)) failed)) (__list__ (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue result -1) STRING_4)))))) (__list__ (Expr (Call print (__list__ STRING_5))))))))",
    "(ProgramStatements (ImportFrom bisect (__list__ (alias bisect)) 0) (ImportFrom itertools (__list__ (alias accumulate)) 0) (FunctionDef frac_knapsack (arguments (__list__ (arg vl) (arg wt) (arg w) (arg n))) (__list__ (Expr STRING_0) (Assign (__list__ r) (Call sorted (__list__ (Call zip (__list__ vl wt))) (__list__ (keyword key (Lambda (arguments (__list__ (arg x))) (BinOp (Subscript x 0) Div (Subscript x 1)))) (keyword reverse True)))) (Assign (__list__ (Tuple (__list__ vl wt))) (Tuple (__list__ (ListComp (Subscript i 0) (__list__ (comprehension i r 0))) (ListComp (Subscript i 1) (__list__ (comprehension i r 0)))))) (Assign (__list__ acc) (Call list (__list__ (Call accumulate (__list__ wt))))) (Assign (__list__ k) (Call bisect (__list__ acc w))) (Return (IfExp (Compare k (__list__ Eq) (__list__ 0)) 0 (IfExp (Compare k (__list__ NotEq) (__list__ n)) (BinOp (Call sum (__list__ (Subscript vl (Slice k)))) Add (BinOp (BinOp (BinOp w Sub (Subscript acc (BinOp k Sub 1))) Mult (Subscript vl k)) Div (Subscript wt k))) (Call sum (__list__ (Subscript vl (Slice k)))))))) (__list__ )) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom heapq (__list__ (alias heappop) (alias heappush)) 0) (ImportFrom sys (__list__ (alias maxsize)) 0) (FunctionDef smallest_range (arguments (__list__ (arg nums (Subscript list (Subscript list int))))) (__list__ (Expr STRING_1) (AnnAssign min_heap (Subscript list (Subscript tuple (Tuple (__list__ int int int)))) List 1) (Assign (__list__ current_max) (BinOp (UnaryOp USub maxsize) Sub 1)) (For (Tuple (__list__ i items)) (Call enumerate (__list__ nums)) (__list__ (Expr (Call heappush (__list__ min_heap (Tuple (__list__ (Subscript items 0) i 0))))) (Assign (__list__ current_max) (Call max (__list__ current_max (Subscript items 0)))))) (Assign (__list__ smallest_range) (List (__list__ (BinOp (UnaryOp USub maxsize) Sub 1) maxsize))) (While min_heap (__list__ (Assign (__list__ (Tuple (__list__ current_min list_index element_index))) (Call heappop (__list__ min_heap))) (If (Compare (BinOp current_max Sub current_min) (__list__ Lt) (__list__ (BinOp (Subscript smallest_range 1) Sub (Subscript smallest_range 0)))) (__list__ (Assign (__list__ smallest_range) (List (__list__ current_min current_max))))) (If (Compare element_index (__list__ Eq) (__list__ (BinOp (Call len (__list__ (Subscript nums list_index))) Sub 1))) (__list__ Break)) (Assign (__list__ next_element) (Subscript (Subscript nums list_index) (BinOp element_index Add 1))) (Expr (Call heappush (__list__ min_heap (Tuple (__list__ next_element list_index (BinOp element_index Add 1)))))) (Assign (__list__ current_max) (Call max (__list__ current_max next_element))))) (Return smallest_range)) (__list__ ) (Subscript list int)) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (ImportFrom doctest (__list__ (alias testmod)) 0) (Expr (Call testmod)) (Expr (Call print (__list__ (JoinedStr (__list__ (FormattedValue (Call smallest_range (__list__ (List (__list__ (List (__list__ 1 2 3)) (List (__list__ 1 2 3)) (List (__list__ 1 2 3)))))) -1)))))))))",
    "(ProgramStatements (ImportFrom __future__ (__list__ (alias annotations)) 0) (FunctionDef fractional_knapsack (arguments (__list__ (arg value (Subscript list int)) (arg weight (Subscript list int)) (arg capacity int))) (__list__ (Expr STRING_0) (Assign (__list__ index) (Call list (__list__ (Call range (__list__ (Call len (__list__ value))))))) (Assign (__list__ ratio) (ListComp (BinOp v Div w) (__list__ (comprehension (Tuple (__list__ v w)) (Call zip (__list__ value weight)) 0)))) (Expr (Call (Attribute index sort) (__list__ (keyword key (Lambda (arguments (__list__ (arg i))) (Subscript ratio i))) (keyword reverse True)))) (AnnAssign max_value float 0 1) (AnnAssign fractions (Subscript list float) (BinOp (List (__list__ 0)) Mult (Call len (__list__ value))) 1) (For i index (__list__ (If (Compare (Subscript weight i) (__list__ LtE) (__list__ capacity)) (__list__ (Assign (__list__ (Subscript fractions i)) 1) (AugAssign max_value Add (Subscript value i)) (AugAssign capacity Sub (Subscript weight i))) (__list__ (Assign (__list__ (Subscript fractions i)) (BinOp capacity Div (Subscript weight i))) (AugAssign max_value Add (BinOp (BinOp (Subscript value i) Mult capacity) Div (Subscript weight i))) Break)))) (Return (Tuple (__list__ max_value fractions)))) (__list__ ) (Subscript tuple (Tuple (__list__ float (Subscript list float))))) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))",
    "(ProgramStatements (Expr STRING_0) (ImportFrom dataclasses (__list__ (alias dataclass)) 0) (ClassDef GasStation (__list__ (AnnAssign gas_quantity int 1) (AnnAssign cost int 1)) (__list__ dataclass)) (FunctionDef get_gas_stations (arguments (__list__ (arg gas_quantities (Subscript list int)) (arg costs (Subscript list int)))) (__list__ (Expr STRING_1) (Return (Call tuple (__list__ (GeneratorExp (Call GasStation (__list__ quantity cost)) (__list__ (comprehension (Tuple (__list__ quantity cost)) (Call zip (__list__ gas_quantities costs)) 0))))))) (__list__ ) (Subscript tuple (Tuple (__list__ GasStation Ellipsis)))) (FunctionDef can_complete_journey (arguments (__list__ (arg gas_stations (Subscript tuple (Tuple (__list__ GasStation Ellipsis)))))) (__list__ (Expr STRING_2) (Assign (__list__ total_gas) (Call sum (__list__ (GeneratorExp (Attribute gas_station gas_quantity) (__list__ (comprehension gas_station gas_stations 0)))))) (Assign (__list__ total_cost) (Call sum (__list__ (GeneratorExp (Attribute gas_station cost) (__list__ (comprehension gas_station gas_stations 0)))))) (If (Compare total_gas (__list__ Lt) (__list__ total_cost)) (__list__ (Return (UnaryOp USub 1)))) (Assign (__list__ start) 0) (Assign (__list__ net) 0) (For (Tuple (__list__ i gas_station)) (Call enumerate (__list__ gas_stations)) (__list__ (AugAssign net Add (BinOp (Attribute gas_station gas_quantity) Sub (Attribute gas_station cost))) (If (Compare net (__list__ Lt) (__list__ 0)) (__list__ (Assign (__list__ start) (BinOp i Add 1)) (Assign (__list__ net) 0))))) (Return start)) (__list__ ) int) (If (Compare __name__ (__list__ Eq) (__list__ STRING_2)) (__list__ (Import (__list__ (alias doctest))) (Expr (Call (Attribute doctest testmod))))))"
]
